{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/images/0725-3.png","path":"images/0725-3.png","modified":0,"renderable":0},{"_id":"source/images/070502.png","path":"images/070502.png","modified":0,"renderable":0},{"_id":"source/images/2022-08-18.png","path":"images/2022-08-18.png","modified":0,"renderable":0},{"_id":"source/images/20220822-1.png","path":"images/20220822-1.png","modified":0,"renderable":0},{"_id":"source/images/20220822-10.png","path":"images/20220822-10.png","modified":0,"renderable":0},{"_id":"source/images/20220822-11.png","path":"images/20220822-11.png","modified":0,"renderable":0},{"_id":"source/images/20220822-12.png","path":"images/20220822-12.png","modified":0,"renderable":0},{"_id":"source/images/20220822-3.png","path":"images/20220822-3.png","modified":0,"renderable":0},{"_id":"source/images/20220822-2.png","path":"images/20220822-2.png","modified":0,"renderable":0},{"_id":"source/images/20220822-4.png","path":"images/20220822-4.png","modified":0,"renderable":0},{"_id":"source/images/20220822-5.png","path":"images/20220822-5.png","modified":0,"renderable":0},{"_id":"source/images/20220822-6.png","path":"images/20220822-6.png","modified":0,"renderable":0},{"_id":"source/images/20220822-8.png","path":"images/20220822-8.png","modified":0,"renderable":0},{"_id":"source/images/20220822-9.png","path":"images/20220822-9.png","modified":0,"renderable":0},{"_id":"source/images/220707-1.png","path":"images/220707-1.png","modified":0,"renderable":0},{"_id":"source/images/220707-2.png","path":"images/220707-2.png","modified":0,"renderable":0},{"_id":"source/images/220708-1.png","path":"images/220708-1.png","modified":0,"renderable":0},{"_id":"source/images/220708-2.png","path":"images/220708-2.png","modified":0,"renderable":0},{"_id":"source/images/220714-1.png","path":"images/220714-1.png","modified":0,"renderable":0},{"_id":"source/images/220714-2.png","path":"images/220714-2.png","modified":0,"renderable":0},{"_id":"source/images/220714-3.png","path":"images/220714-3.png","modified":0,"renderable":0},{"_id":"source/images/220715-1.png","path":"images/220715-1.png","modified":0,"renderable":0},{"_id":"source/images/220725-2.png","path":"images/220725-2.png","modified":0,"renderable":0},{"_id":"source/images/220725.png","path":"images/220725.png","modified":0,"renderable":0},{"_id":"source/images/屏幕截图 2022-08-04 114418.png","path":"images/屏幕截图 2022-08-04 114418.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Redis持久化机制.md","hash":"6d54b655855b76727d92f023ef4014032538208b","modified":1657198144246},{"_id":"source/_posts/ThreadPoolExecutor 类分析.md","hash":"612d111f571460c74a83762fe5a981db1d98c5a3","modified":1657196756716},{"_id":"source/_posts/dockers部署jenkins和gitlab总结.md","hash":"d8b1ab98cbff4cd96a98d2d202fd32fca18eba6d","modified":1676338843571},{"_id":"source/_posts/docker部署springboot项目.md","hash":"8f6200708cfda340458c32d91b581ccf65a4759b","modified":1663424704647},{"_id":"source/_posts/git 一般操作.md","hash":"fc00b684556e29b43f85ffe40595f3d31350f385","modified":1673877217076},{"_id":"source/_posts/git常用操作.md","hash":"712e7df32b6d710bdfc533727b122322e32316e0","modified":1678289638510},{"_id":"source/_posts/token的一点个人总结.md","hash":"3f9684869f100f6cb459db511c7ee66cfafb5145","modified":1657294408646},{"_id":"source/_posts/lamdba表达式的运用总结.md","hash":"4a32a152d2c0dc988aaa31251790cdc04be6345b","modified":1661496021434},{"_id":"source/_posts/wms部署.md","hash":"37d9217304061eb4b2f2c527d054748f3b316a2b","modified":1681829968276},{"_id":"source/_posts/回溯，双指针，和栈的运用.md","hash":"346031d1801976e93ad0af9c6e3281362dd9a232","modified":1658720130960},{"_id":"source/_posts/算法-回溯总结.md","hash":"532f7445e026417ea5b91881e1c899ffefa9cbca","modified":1657894736333},{"_id":"source/_posts/算法-双指针和hashmap的运用.md","hash":"2978a3a31693cf46cc30e4077465c151d4c7b75e","modified":1657788788827},{"_id":"source/_posts/若依项目前后端分离部署.md","hash":"65ec0227c8638147aa71d70240c8477d7b7597e3","modified":1657196877561},{"_id":"source/_posts/递归的一点思考.md","hash":"b6a37e7689a567eb30c04e5102256861d95ff8b1","modified":1657196794949},{"_id":"source/_posts/部署ruoyi前后端不分离版.md","hash":"69a2e1c70af84ea2434e0c8a71fcaceb291ea483","modified":1660814945448},{"_id":"source/_posts/部署ruoyi前后端分离版.md","hash":"a9329b290d7761f8a01a1a84ea9e5d8055b67f3a","modified":1660815780936},{"_id":"source/images/0725-3.png","hash":"9dad751cca2d42ce6736e50a60cb0c2ffb412d1e","modified":1658720102999},{"_id":"source/images/20220822-1.png","hash":"23ebaa4990a827efa59cd616a4d7ee26f7dc3b79","modified":1661132432861},{"_id":"source/images/20220822-10.png","hash":"727605f0c68565362545710117764648e555f60a","modified":1661137124446},{"_id":"source/images/20220822-3.png","hash":"5a0e113be284544c88f9826b2f7a5e31f406dcd4","modified":1661133320409},{"_id":"source/images/20220822-2.png","hash":"49e558cfb00e97b95fe5e9ab0e78d852291faea8","modified":1661134177766},{"_id":"source/images/20220822-5.png","hash":"f1412add5375f95e7f6bd235ef2b6cf8cb6511c9","modified":1661134242272},{"_id":"source/images/20220822-6.png","hash":"eaab2b3b72fb28e4f76fe93c9fd82d6893842c9f","modified":1661134663364},{"_id":"source/images/220707-1.png","hash":"d7a0fac31448f1f80d940583f784deeacd09889d","modified":1657193071123},{"_id":"source/images/220707-2.png","hash":"0b1f19f80fd8f552e53d3cf284d93b0790e8a7ba","modified":1657195445372},{"_id":"source/images/220708-2.png","hash":"d572402264b85d2af9bbdf21f64fb73e17e5d927","modified":1657294066618},{"_id":"source/images/220714-1.png","hash":"c40cb7279acebbdbab54f45ee1a3aa50e751accb","modified":1657787636225},{"_id":"source/images/屏幕截图 2022-08-04 114418.png","hash":"ef599c4a34144c5a9446ca5be6e43db23d6d87b0","modified":1659584668360},{"_id":"source/images/070502.png","hash":"4ff18e5c9696c0934f52c4967fab2aed3313d670","modified":1655284639994},{"_id":"source/images/2022-08-18.png","hash":"119459c80fa857018952e705e0cd339bcc63bca6","modified":1660814515793},{"_id":"source/images/20220822-11.png","hash":"e16ec53b10320ae3e387557b2031b0c48e2850e6","modified":1661137367948},{"_id":"source/images/20220822-12.png","hash":"0f0b808589cf6a22cca5c4cddb1d3ff4604fc7d4","modified":1661137474483},{"_id":"source/images/20220822-4.png","hash":"ace9d198c2a29aa01ab569ad2767b413ca1c3134","modified":1661133099114},{"_id":"source/images/20220822-8.png","hash":"531e5cc0d09f83dec8b7458e93ed3e601ce0cf0c","modified":1661134763165},{"_id":"source/images/20220822-9.png","hash":"63d2085ced45569971421bca64200a95e24d0bdb","modified":1661135300579},{"_id":"source/images/220708-1.png","hash":"161c0413bd05d1bb2d462967d9142ec56c5e0486","modified":1657293727571},{"_id":"source/images/220714-2.png","hash":"37ccdf90d06356301ddcbdddb949578e52bcfc8f","modified":1657788228404},{"_id":"source/images/220714-3.png","hash":"e3edea534bf50b1389449023947f86c12d28a534","modified":1657788759493},{"_id":"source/images/220715-1.png","hash":"5cc09b65baf2af5fa36a2a2c90e0060470eb9e7c","modified":1657894704372},{"_id":"source/images/220725-2.png","hash":"58e3f3bc86e753f9f98902662fcea50c2339c664","modified":1658718978299},{"_id":"source/images/220725.png","hash":"e1830b70702a51348b43cbb185554bd0cff121c5","modified":1658718545273},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1655197269935},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1655197269925},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1655197269925},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1655197269925},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1655197269925},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1655197269926},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1655197269926},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1655197269926},{"_id":"themes/yilia/_config.yml","hash":"f0251775eedb78c53deea081272a2a09b1fe7a3b","modified":1657197714863},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1655197269937},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1655197269956},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1655197269927},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1655197269927},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1655197269927},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1655197269928},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1655197269928},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1655197269927},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1655197269928},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1655197269935},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1655197269936},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1655197269936},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1655197269935},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1655197269936},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1655197269936},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1655197269937},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1655197269956},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1655197269954},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1655197269937},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1655197269951},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1655197269929},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1655197269929},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1655197269929},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1655197269929},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1655197269929},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1655197269930},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1655197269930},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1655197269930},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1655197269930},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1655197269931},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1655197269931},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1655197269931},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1655197269930},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1655197269931},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1655197269935},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1655197269935},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1655197269951},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1655197269952},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1655197269952},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1655197269952},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1655197269953},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1655197269953},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1655197269953},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1655197269954},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1655197269954},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1655197269937},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1655197269938},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1655197269938},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1655197269938},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1655197269938},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1655197269939},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1655197269939},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1655197269939},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1655197269939},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1655197269941},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1655197269943},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1655197269943},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1655197269943},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1655197269943},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1655197269944},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1655197269945},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1655197269945},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1655197269945},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1655197269945},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1655197269945},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1655197269946},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1655197269946},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1655197269946},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1655197269946},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1655197269947},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1655197269947},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1655197269947},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1655197269948},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1655197269948},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1655197269948},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1655197269949},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1655197269949},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1655197269949},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1655197269949},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1655197269950},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1655197269950},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1655197269950},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1655197269951},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1655197269950},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1655197269932},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1655197269932},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1655197269932},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1655197269932},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1655197269933},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1655197269933},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1655197269933},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1655197269933},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1655197269934},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1655197269934},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1655197269942},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1655197269941},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1655197269942},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1655197269942},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1655197269940},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1655197269940},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1655197269940},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1655197269940},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1655197269941},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1655197269944},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1655197269944},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1655197269944},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1655197269955},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1655197269955},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1655197269934},{"_id":"public/content.json","hash":"18ebbc26be3c43829eef651b5b66d364262b0fdb","modified":1681830053997},{"_id":"public/2023/04/18/wms部署/index.html","hash":"2c0e12a8ef9ce64f8e33d13bd76668ef41fba3ed","modified":1681830053997},{"_id":"public/2023/03/08/git常用操作/index.html","hash":"0cfc64ad7f3c3707a4516ea2757f676085a5c54a","modified":1681830053997},{"_id":"public/2023/01/16/git 一般操作/index.html","hash":"c4a8a1f0fa7f687fe28c2f9f3b967e247d7f2132","modified":1681830053997},{"_id":"public/2022/09/17/docker部署springboot项目/index.html","hash":"48d3137c3ba7bfad0526b3a9c55675a0605dec7e","modified":1681830053997},{"_id":"public/2022/08/26/lamdba表达式的运用总结/index.html","hash":"4d2254b9a3529232d9c411d4a3d4ccc2848207c8","modified":1681830053997},{"_id":"public/2022/08/22/dockers部署jenkins和gitlab总结/index.html","hash":"bad9487ca0b83522bd2c773f965731b9a401d39c","modified":1681830053997},{"_id":"public/2022/08/18/部署ruoyi前后端分离版/index.html","hash":"b3eb36f7bd536710d5183627d3922a30001c6eb4","modified":1681830053997},{"_id":"public/2022/08/18/部署ruoyi前后端不分离版/index.html","hash":"9f74b3121eff90dcc68dccf82af4b6842fc0c776","modified":1681830053997},{"_id":"public/2022/07/25/回溯，双指针，和栈的运用/index.html","hash":"d014105c78ceeab5305baa02fd8fbb32bec05952","modified":1681830053997},{"_id":"public/2022/07/15/算法-回溯总结/index.html","hash":"8ed2d4673772036c30c0f66ece64db840a826956","modified":1681830053997},{"_id":"public/2022/07/14/算法-双指针和hashmap的运用/index.html","hash":"d3262d6fcc045d1260bd51a0c446a6da23997af2","modified":1681830053997},{"_id":"public/2022/07/08/token的一点个人总结/index.html","hash":"f84adc811f017d8c6d61d13228df1716636c33e7","modified":1681830053997},{"_id":"public/2022/07/07/Redis持久化机制/index.html","hash":"c179cdeb96452b930615a1f2adc3869d6edd2450","modified":1681830053997},{"_id":"public/2022/07/07/ThreadPoolExecutor 类分析/index.html","hash":"4f6f0c70529132fbb73b08780260b67eb7a164db","modified":1681830053997},{"_id":"public/2022/07/07/递归的一点思考/index.html","hash":"60a3a9cac01bdcd52ec1b2c7d6503f4baca44cf8","modified":1681830053997},{"_id":"public/2022/06/15/若依项目前后端分离部署/index.html","hash":"7c67f0abebaf4a7d9eb437e5a00ef6150c130302","modified":1681830053997},{"_id":"public/archives/index.html","hash":"ddf62104c901da5c4e653866d9c4f2342d908b9b","modified":1681830053997},{"_id":"public/archives/page/2/index.html","hash":"32452fe234c06991df32b28ccf5ce87706d14431","modified":1681830053997},{"_id":"public/archives/2022/index.html","hash":"74425428ee760cc2dcaf1afb5178bf30ef2ee2ee","modified":1681830053997},{"_id":"public/archives/2022/page/2/index.html","hash":"e395191125e2e835ea02fc11ea5d4151a9d9354f","modified":1681830053997},{"_id":"public/archives/2022/06/index.html","hash":"3592b573b707548f4b4f54cfe52997eac9a616fe","modified":1681830053997},{"_id":"public/archives/2022/07/index.html","hash":"062f6ffb77d8f677210c300e1150cb3b635e17ae","modified":1681830053997},{"_id":"public/archives/2022/08/index.html","hash":"c17d24f796d1c1a59a0572bd662e1f39ad401bf1","modified":1681830053997},{"_id":"public/archives/2022/09/index.html","hash":"0a4cb7464866a3154f664eab9ea17b017c7fd887","modified":1681830053997},{"_id":"public/archives/2023/index.html","hash":"c2a61cbf97fab091285a6962ea768a340dcaf285","modified":1681830053997},{"_id":"public/archives/2023/01/index.html","hash":"c79e1f6e2ace6d4fb78f245bbaf57cca288574e5","modified":1681830053997},{"_id":"public/archives/2023/03/index.html","hash":"c2eadea6b2d71ace9164cdb0c4fca34000b53c41","modified":1681830053997},{"_id":"public/archives/2023/04/index.html","hash":"235e603dab67b196e6f2c94a50af3393665375a2","modified":1681830053997},{"_id":"public/index.html","hash":"a2f77c91dd6b14cf8c968f323ac2aa33b3a442bf","modified":1681830053997},{"_id":"public/page/2/index.html","hash":"8e851c847e91d50523074bcfa126e8728b7c9bf6","modified":1681830053997},{"_id":"public/images/20220822-1.png","hash":"23ebaa4990a827efa59cd616a4d7ee26f7dc3b79","modified":1681830053997},{"_id":"public/images/20220822-10.png","hash":"727605f0c68565362545710117764648e555f60a","modified":1681830053997},{"_id":"public/images/20220822-2.png","hash":"49e558cfb00e97b95fe5e9ab0e78d852291faea8","modified":1681830053997},{"_id":"public/images/20220822-5.png","hash":"f1412add5375f95e7f6bd235ef2b6cf8cb6511c9","modified":1681830053997},{"_id":"public/images/220707-2.png","hash":"0b1f19f80fd8f552e53d3cf284d93b0790e8a7ba","modified":1681830053997},{"_id":"public/images/220714-1.png","hash":"c40cb7279acebbdbab54f45ee1a3aa50e751accb","modified":1681830053997},{"_id":"public/images/220708-2.png","hash":"d572402264b85d2af9bbdf21f64fb73e17e5d927","modified":1681830053997},{"_id":"public/images/屏幕截图 2022-08-04 114418.png","hash":"ef599c4a34144c5a9446ca5be6e43db23d6d87b0","modified":1681830053997},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1681830053997},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1681830053997},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1681830053997},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1681830053997},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1681830053997},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1681830053997},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1681830053997},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1681830053997},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1681830053997},{"_id":"public/images/0725-3.png","hash":"9dad751cca2d42ce6736e50a60cb0c2ffb412d1e","modified":1681830053997},{"_id":"public/images/20220822-11.png","hash":"e16ec53b10320ae3e387557b2031b0c48e2850e6","modified":1681830053997},{"_id":"public/images/20220822-12.png","hash":"0f0b808589cf6a22cca5c4cddb1d3ff4604fc7d4","modified":1681830053997},{"_id":"public/images/20220822-3.png","hash":"5a0e113be284544c88f9826b2f7a5e31f406dcd4","modified":1681830053997},{"_id":"public/images/20220822-4.png","hash":"ace9d198c2a29aa01ab569ad2767b413ca1c3134","modified":1681830053997},{"_id":"public/images/20220822-6.png","hash":"eaab2b3b72fb28e4f76fe93c9fd82d6893842c9f","modified":1681830053997},{"_id":"public/images/20220822-9.png","hash":"63d2085ced45569971421bca64200a95e24d0bdb","modified":1681830053997},{"_id":"public/images/20220822-8.png","hash":"531e5cc0d09f83dec8b7458e93ed3e601ce0cf0c","modified":1681830053997},{"_id":"public/images/220707-1.png","hash":"d7a0fac31448f1f80d940583f784deeacd09889d","modified":1681830053997},{"_id":"public/images/220708-1.png","hash":"161c0413bd05d1bb2d462967d9142ec56c5e0486","modified":1681830053997},{"_id":"public/images/220714-2.png","hash":"37ccdf90d06356301ddcbdddb949578e52bcfc8f","modified":1681830053997},{"_id":"public/images/220714-3.png","hash":"e3edea534bf50b1389449023947f86c12d28a534","modified":1681830053997},{"_id":"public/images/220715-1.png","hash":"5cc09b65baf2af5fa36a2a2c90e0060470eb9e7c","modified":1681830053997},{"_id":"public/images/220725-2.png","hash":"58e3f3bc86e753f9f98902662fcea50c2339c664","modified":1681830053997},{"_id":"public/images/220725.png","hash":"e1830b70702a51348b43cbb185554bd0cff121c5","modified":1681830053997},{"_id":"public/images/2022-08-18.png","hash":"119459c80fa857018952e705e0cd339bcc63bca6","modified":1681830053997},{"_id":"public/images/070502.png","hash":"4ff18e5c9696c0934f52c4967fab2aed3313d670","modified":1681830053997},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1681830053997},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1681830053997},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1681830053997},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1681830053997}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"\n\n## Redis 持久化机制\n\n很多时候我们需要持久化数据也就是将内存中的数据写入到硬盘里面，大部分原因是为了之后重用数据（比如重启机器、机器故障之后恢复数据），或者是为了防止系统故障而将数据备份到一个远程位置。\n\nRedis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持两种不同的持久化操作。**Redis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file, AOF）**。这两种方法各有千秋，下面我会详细这两种持久化方法是什么，怎么用，如何选择适合自己的持久化方法。\n\n**快照（snapshotting）持久化（RDB）**\n\nRedis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。\n\n快照持久化是 Redis 默认采用的持久化方式，在 Redis.conf 配置文件中默认有此下配置：\n\n\n\n```conf\nsave 900 1           #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\n\nsave 300 10          #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\n\nsave 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\n```\n\n**AOF（append-only file）持久化**\n\n与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：\n\n\n\n```conf\nappendonly yes\n```\n\n1\n\n开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到内存缓存 `server.aof_buf` 中，然后再根据 `appendfsync` 配置来决定何时将其同步到硬盘中的 AOF 文件。\n\nAOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 `appendonly.aof`。\n\n在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：\nappendfsync always    #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度\nappendfsync everysec  #每秒钟同步一次，显式地将多个写命令同步到硬盘\nappendfsync no        #让操作系统决定何时进行同步","source":"_posts/Redis持久化机制.md","raw":"\n\n## Redis 持久化机制\n\n很多时候我们需要持久化数据也就是将内存中的数据写入到硬盘里面，大部分原因是为了之后重用数据（比如重启机器、机器故障之后恢复数据），或者是为了防止系统故障而将数据备份到一个远程位置。\n\nRedis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持两种不同的持久化操作。**Redis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file, AOF）**。这两种方法各有千秋，下面我会详细这两种持久化方法是什么，怎么用，如何选择适合自己的持久化方法。\n\n**快照（snapshotting）持久化（RDB）**\n\nRedis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。\n\n快照持久化是 Redis 默认采用的持久化方式，在 Redis.conf 配置文件中默认有此下配置：\n\n\n\n```conf\nsave 900 1           #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\n\nsave 300 10          #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\n\nsave 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\n```\n\n**AOF（append-only file）持久化**\n\n与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：\n\n\n\n```conf\nappendonly yes\n```\n\n1\n\n开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到内存缓存 `server.aof_buf` 中，然后再根据 `appendfsync` 配置来决定何时将其同步到硬盘中的 AOF 文件。\n\nAOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 `appendonly.aof`。\n\n在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：\nappendfsync always    #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度\nappendfsync everysec  #每秒钟同步一次，显式地将多个写命令同步到硬盘\nappendfsync no        #让操作系统决定何时进行同步","slug":"Redis持久化机制","published":1,"date":"2022-07-07T12:45:30.724Z","updated":"2022-07-07T12:49:04.246Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vcs00001kua4adv12vi","content":"<h2 id=\"Redis-持久化机制\"><a href=\"#Redis-持久化机制\" class=\"headerlink\" title=\"Redis 持久化机制\"></a>Redis 持久化机制</h2><p>很多时候我们需要持久化数据也就是将内存中的数据写入到硬盘里面，大部分原因是为了之后重用数据（比如重启机器、机器故障之后恢复数据），或者是为了防止系统故障而将数据备份到一个远程位置。</p>\n<p>Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持两种不同的持久化操作。<strong>Redis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file, AOF）</strong>。这两种方法各有千秋，下面我会详细这两种持久化方法是什么，怎么用，如何选择适合自己的持久化方法。</p>\n<p><strong>快照（snapshotting）持久化（RDB）</strong></p>\n<p>Redis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。</p>\n<p>快照持久化是 Redis 默认采用的持久化方式，在 Redis.conf 配置文件中默认有此下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">save 900 1           #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span><br><span class=\"line\"></span><br><span class=\"line\">save 300 10          #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span><br><span class=\"line\"></span><br><span class=\"line\">save 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span><br></pre></td></tr></table></figure>\n\n<p><strong>AOF（append-only file）持久化</strong></p>\n<p>与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly yes</span><br></pre></td></tr></table></figure>\n\n<p>1</p>\n<p>开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到内存缓存 <code>server.aof_buf</code> 中，然后再根据 <code>appendfsync</code> 配置来决定何时将其同步到硬盘中的 AOF 文件。</p>\n<p>AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 <code>appendonly.aof</code>。</p>\n<p>在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：<br>appendfsync always    #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度<br>appendfsync everysec  #每秒钟同步一次，显式地将多个写命令同步到硬盘<br>appendfsync no        #让操作系统决定何时进行同步</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Redis-持久化机制\"><a href=\"#Redis-持久化机制\" class=\"headerlink\" title=\"Redis 持久化机制\"></a>Redis 持久化机制</h2><p>很多时候我们需要持久化数据也就是将内存中的数据写入到硬盘里面，大部分原因是为了之后重用数据（比如重启机器、机器故障之后恢复数据），或者是为了防止系统故障而将数据备份到一个远程位置。</p>\n<p>Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持两种不同的持久化操作。<strong>Redis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file, AOF）</strong>。这两种方法各有千秋，下面我会详细这两种持久化方法是什么，怎么用，如何选择适合自己的持久化方法。</p>\n<p><strong>快照（snapshotting）持久化（RDB）</strong></p>\n<p>Redis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。</p>\n<p>快照持久化是 Redis 默认采用的持久化方式，在 Redis.conf 配置文件中默认有此下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">save 900 1           #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span><br><span class=\"line\"></span><br><span class=\"line\">save 300 10          #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span><br><span class=\"line\"></span><br><span class=\"line\">save 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span><br></pre></td></tr></table></figure>\n\n<p><strong>AOF（append-only file）持久化</strong></p>\n<p>与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly yes</span><br></pre></td></tr></table></figure>\n\n<p>1</p>\n<p>开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到内存缓存 <code>server.aof_buf</code> 中，然后再根据 <code>appendfsync</code> 配置来决定何时将其同步到硬盘中的 AOF 文件。</p>\n<p>AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 <code>appendonly.aof</code>。</p>\n<p>在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：<br>appendfsync always    #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度<br>appendfsync everysec  #每秒钟同步一次，显式地将多个写命令同步到硬盘<br>appendfsync no        #让操作系统决定何时进行同步</p>\n"},{"_content":"\n\n## 线程池总结\n\n**`ThreadPoolExecutor` 3 个最重要的参数：**\n\n- **`corePoolSize` :** 核心线程数线程数定义了最小可以同时运行的线程数量。\n\n- **`maximumPoolSize` :** 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。\n\n- **`workQueue`:** 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\n\n  ##### 线程池的执行策略\n\n  ![](E:\\javaProject\\hexo\\source\\images\\220707-2.png)\n\n  ![](/images/220707-2.png)\n\n  ##### 线程池和callable一起使用，一般用来有返回值得类型\n\n  第一 创建线程池\n\n  ```\n  private static ThreadPoolExecutor executorService = new ThreadPoolExecutor(9, 9, 1000, TimeUnit.MILLISECONDS, WORK_QUEUE, HANDLER);\n  ```\n\n​\t\t第二 重写callable方法\n\n​\t\tCallable<List> bannerListCallable = () -> adService.queryIndex();\n\n​\t\t第三步 调用线程池submit方法，获取future对象\n\n​\t\tFuture<List> banner=executorService.submit(bannerListCallable);\n\n​\t\t第四步，调用future.get方法获取返回值\n\n​\t\tMap<String, Object> entity = new HashMap<>();\n\n​\t\tentity.put(\"banner\", banner.get());\n\n","source":"_posts/ThreadPoolExecutor 类分析.md","raw":"\n\n## 线程池总结\n\n**`ThreadPoolExecutor` 3 个最重要的参数：**\n\n- **`corePoolSize` :** 核心线程数线程数定义了最小可以同时运行的线程数量。\n\n- **`maximumPoolSize` :** 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。\n\n- **`workQueue`:** 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\n\n  ##### 线程池的执行策略\n\n  ![](E:\\javaProject\\hexo\\source\\images\\220707-2.png)\n\n  ![](/images/220707-2.png)\n\n  ##### 线程池和callable一起使用，一般用来有返回值得类型\n\n  第一 创建线程池\n\n  ```\n  private static ThreadPoolExecutor executorService = new ThreadPoolExecutor(9, 9, 1000, TimeUnit.MILLISECONDS, WORK_QUEUE, HANDLER);\n  ```\n\n​\t\t第二 重写callable方法\n\n​\t\tCallable<List> bannerListCallable = () -> adService.queryIndex();\n\n​\t\t第三步 调用线程池submit方法，获取future对象\n\n​\t\tFuture<List> banner=executorService.submit(bannerListCallable);\n\n​\t\t第四步，调用future.get方法获取返回值\n\n​\t\tMap<String, Object> entity = new HashMap<>();\n\n​\t\tentity.put(\"banner\", banner.get());\n\n","slug":"ThreadPoolExecutor 类分析","published":1,"date":"2022-07-07T11:59:47.199Z","updated":"2022-07-07T12:25:56.716Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vcx00011kua639m6z6w","content":"<h2 id=\"线程池总结\"><a href=\"#线程池总结\" class=\"headerlink\" title=\"线程池总结\"></a>线程池总结</h2><p><strong><code>ThreadPoolExecutor</code> 3 个最重要的参数：</strong></p>\n<ul>\n<li><p><strong><code>corePoolSize</code> :</strong> 核心线程数线程数定义了最小可以同时运行的线程数量。</p>\n</li>\n<li><p><strong><code>maximumPoolSize</code> :</strong> 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</p>\n</li>\n<li><p><strong><code>workQueue</code>:</strong> 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</p>\n<h5 id=\"线程池的执行策略\"><a href=\"#线程池的执行策略\" class=\"headerlink\" title=\"线程池的执行策略\"></a>线程池的执行策略</h5><p><img src=\"E:\\javaProject\\hexo\\source\\images\\220707-2.png\"></p>\n<p><img src=\"/images/220707-2.png\"></p>\n<h5 id=\"线程池和callable一起使用，一般用来有返回值得类型\"><a href=\"#线程池和callable一起使用，一般用来有返回值得类型\" class=\"headerlink\" title=\"线程池和callable一起使用，一般用来有返回值得类型\"></a>线程池和callable一起使用，一般用来有返回值得类型</h5><p>第一 创建线程池</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static ThreadPoolExecutor executorService = new ThreadPoolExecutor(9, 9, 1000, TimeUnit.MILLISECONDS, WORK_QUEUE, HANDLER);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>​        第二 重写callable方法</p>\n<p>​        Callable<List> bannerListCallable = () -&gt; adService.queryIndex();</p>\n<p>​        第三步 调用线程池submit方法，获取future对象</p>\n<p>​        Future<List> banner=executorService.submit(bannerListCallable);</p>\n<p>​        第四步，调用future.get方法获取返回值</p>\n<p>​        Map&lt;String, Object&gt; entity = new HashMap&lt;&gt;();</p>\n<p>​        entity.put(“banner”, banner.get());</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线程池总结\"><a href=\"#线程池总结\" class=\"headerlink\" title=\"线程池总结\"></a>线程池总结</h2><p><strong><code>ThreadPoolExecutor</code> 3 个最重要的参数：</strong></p>\n<ul>\n<li><p><strong><code>corePoolSize</code> :</strong> 核心线程数线程数定义了最小可以同时运行的线程数量。</p>\n</li>\n<li><p><strong><code>maximumPoolSize</code> :</strong> 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</p>\n</li>\n<li><p><strong><code>workQueue</code>:</strong> 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</p>\n<h5 id=\"线程池的执行策略\"><a href=\"#线程池的执行策略\" class=\"headerlink\" title=\"线程池的执行策略\"></a>线程池的执行策略</h5><p><img src=\"E:\\javaProject\\hexo\\source\\images\\220707-2.png\"></p>\n<p><img src=\"/images/220707-2.png\"></p>\n<h5 id=\"线程池和callable一起使用，一般用来有返回值得类型\"><a href=\"#线程池和callable一起使用，一般用来有返回值得类型\" class=\"headerlink\" title=\"线程池和callable一起使用，一般用来有返回值得类型\"></a>线程池和callable一起使用，一般用来有返回值得类型</h5><p>第一 创建线程池</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static ThreadPoolExecutor executorService = new ThreadPoolExecutor(9, 9, 1000, TimeUnit.MILLISECONDS, WORK_QUEUE, HANDLER);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>​        第二 重写callable方法</p>\n<p>​        Callable<List> bannerListCallable = () -&gt; adService.queryIndex();</p>\n<p>​        第三步 调用线程池submit方法，获取future对象</p>\n<p>​        Future<List> banner=executorService.submit(bannerListCallable);</p>\n<p>​        第四步，调用future.get方法获取返回值</p>\n<p>​        Map&lt;String, Object&gt; entity = new HashMap&lt;&gt;();</p>\n<p>​        entity.put(“banner”, banner.get());</p>\n"},{"_content":"# docker部署jenkins和gitlab总结\n\n## jenkins安装\n\n### 1拉取docker镜像并启动\n\ndocker pull jenkinsci/blueocean\ndocker run -e JAVA_OPTS=\"-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true\" --name jenkins -u root --rm  -d -p 7005:8080 -p 50000:50000 -v /data/service/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /data/service/apache-maven-3.8.5:/usr/local/maven -v /data/service/jdk1.8.0_212:/usr/local/jdk jenkinsci/blueocean\n\n注意，这里的run -e JAVA_OPTS=\"-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true\" --name 是用来允许跨网站请求伪造，方便后来部署webhook\n\n--rm代表stop容器后就删除了容器 -v代表挂载，这里分别挂载jenkins目录，maven目录，jdk目录 -name代表容器名是jenkens ，这个可以直接通过docker rm Jenkins就删除了jenkins目录 -p代表端口映射，这里是代表容器在7005端口启动\n\n启动后访问 ip:7005\n\n### 2查看密码登录\n\n查看密码 ，目录文件为/data/service/Jenkins\n\ncat /data/service/jenkins/secrets/initialAdminPassword\n\n### 3配置环境变量和git\n\n设置全局工作变量 ，git和java是有的，不用配置\n\n这里只用配置maven环境变量，地址是docker容器内的\n\n![](images/20220822-1.png)\n\n 首先生成公钥\n\n进入jinkins容器后执行\n\ndocker exec -it jenkins bash\n\nssh-keygen -t rsa -C ‘15019474951@163.com’\n\ncat ~/.ssh/id_rsa.pub\n\n#### 将公钥填入\n\n![](images/20220822-2.png)\n\n新建一个自由风格项目\n\n![](images/20220822-3.png)\n\n这里将刚才的公钥填入\n\n### 4安装ssh插件并执行远程ssh连接\n\n搜索 Publish over SSH 插件安装，搜索 Maven Integration 插件安装\n\n在系统设置下配置远程连接，这里我配置主机地址,找到**Publish over SSH**\n\n![](images/20220822-5.png)\n\n接着构建项目\n\n主要流程是先打包项目，然后把git目录下的项目的包发送\n\n![](images/20220822-8.png)\n\n这里首先是Soure set这里代表git根目录下的地址\n\nremove prefix代表去除项目前缀，可以不配置\n\n关键是remote directory 这里是用户的目录地址下的，这是个坑，即如果是root目录，则是/root/data/test，即用户打包的东西会传到这个目录下\n\n这里的shell命令就是删除原来的进程然后构建\n\n## webhook配置\n\n#### webhook配置\n\n\\1.   安装**Generic Webhook Trigger**插件\n\n\\2.   加入git的公钥到jenkins\n\n\\3.   生成key  ssh-keygen -t rsa -C '15172537049@163.com‘ cat ~/.ssh/id_rsa.pub\n\n\\4.    将构建触发器勾上!![](images/20220822-9.png)\n\n\\5.                 \n\n \n\n配置apitoken，这里是后面APItoken的地址\n\n这里是在用户配置哪里，点设置，进去之后就能看到apitoken\n\n![](images/20220822-10.png)\n\n先找到设置然后打勾\n\n![](images/20220822-11.png)\n\n\\1.   找到WebHooks配置界面，在POST地址框中输入如下格式内容：\n\n\\2.  ![](images/20220822-12.png)\n\n\\3.   http://<User ID>:<API Token>@<Jenkins IP地址>:端口/generic-webhook-trigger/invoke \n\n\\4.   添加url\n\nhttp://root:1148e42061461a8d68883794319c3dcd82@192.168.2.2:7005/generic-webhook-trigger/invoke\n\n## 配置gitlab\n\n### 拉docker 并启动 \n\ndocker pull gitlab/gitlab-ce\ndocker run -d  -p 443:443 -p 81:80 -p 222:22 --name gitlab --restart always -v /root/gitlab/config:/etc/gitlab -v /root/gitlab/logs:/var/log/gitlab -v /root/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce\n\n#### 配置启动路径\n\ngitlab.rb文件内容默认全是注释\n\n$ vim /root/gitlab/config/gitlab.rb\n\n配置http协议所使用的访问地址,不加端口号默认为80\n\nexternal_url 'http://192.168.2.7'\n\nexternal_url 'http://120.77.247.123'\n\n配置ssh协议所使用的访问地址和端口\n\ngitlab_rails['gitlab_ssh_host'] = '192.168.2.7 '\ngitlab_rails['gitlab_shell_ssh_port'] = 222 # 此端口是run时22端口映射的222端口\n:wq #保存配置文件并退出\n重启gitlab容器\n\n\n\n$ docker restart gitlab\nGitLab占用内存非常恐怖，解决方法很简单\n     修改/root/gitlab/config/gitlab/gitlab.rb 文件，将 unicorn['worker_processes'] = 2 去掉注释就可以了。在注释的情况下默认是服务器上的所有线程。\n\n### 重置root密码\n\ndocker exec -it gitlab /bin/bash\n启用docker里面gitlab的ruby\n\n#### 注意，这里一定要等到控制台打印信息后才能输入下面的user\n\ngitlab-rails console -e production\n\n 找到管理员用户\nuser = User.where(id: 1).first\n 更改密码\nuser.password = 'abcd1234'\nuser.password_confirmation = 'abcd1234'\n记得保存\nuser.save!\n\n### \n\n \n\n​                               \n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/dockers部署jenkins和gitlab总结.md","raw":"# docker部署jenkins和gitlab总结\n\n## jenkins安装\n\n### 1拉取docker镜像并启动\n\ndocker pull jenkinsci/blueocean\ndocker run -e JAVA_OPTS=\"-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true\" --name jenkins -u root --rm  -d -p 7005:8080 -p 50000:50000 -v /data/service/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /data/service/apache-maven-3.8.5:/usr/local/maven -v /data/service/jdk1.8.0_212:/usr/local/jdk jenkinsci/blueocean\n\n注意，这里的run -e JAVA_OPTS=\"-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true\" --name 是用来允许跨网站请求伪造，方便后来部署webhook\n\n--rm代表stop容器后就删除了容器 -v代表挂载，这里分别挂载jenkins目录，maven目录，jdk目录 -name代表容器名是jenkens ，这个可以直接通过docker rm Jenkins就删除了jenkins目录 -p代表端口映射，这里是代表容器在7005端口启动\n\n启动后访问 ip:7005\n\n### 2查看密码登录\n\n查看密码 ，目录文件为/data/service/Jenkins\n\ncat /data/service/jenkins/secrets/initialAdminPassword\n\n### 3配置环境变量和git\n\n设置全局工作变量 ，git和java是有的，不用配置\n\n这里只用配置maven环境变量，地址是docker容器内的\n\n![](images/20220822-1.png)\n\n 首先生成公钥\n\n进入jinkins容器后执行\n\ndocker exec -it jenkins bash\n\nssh-keygen -t rsa -C ‘15019474951@163.com’\n\ncat ~/.ssh/id_rsa.pub\n\n#### 将公钥填入\n\n![](images/20220822-2.png)\n\n新建一个自由风格项目\n\n![](images/20220822-3.png)\n\n这里将刚才的公钥填入\n\n### 4安装ssh插件并执行远程ssh连接\n\n搜索 Publish over SSH 插件安装，搜索 Maven Integration 插件安装\n\n在系统设置下配置远程连接，这里我配置主机地址,找到**Publish over SSH**\n\n![](images/20220822-5.png)\n\n接着构建项目\n\n主要流程是先打包项目，然后把git目录下的项目的包发送\n\n![](images/20220822-8.png)\n\n这里首先是Soure set这里代表git根目录下的地址\n\nremove prefix代表去除项目前缀，可以不配置\n\n关键是remote directory 这里是用户的目录地址下的，这是个坑，即如果是root目录，则是/root/data/test，即用户打包的东西会传到这个目录下\n\n这里的shell命令就是删除原来的进程然后构建\n\n## webhook配置\n\n#### webhook配置\n\n\\1.   安装**Generic Webhook Trigger**插件\n\n\\2.   加入git的公钥到jenkins\n\n\\3.   生成key  ssh-keygen -t rsa -C '15172537049@163.com‘ cat ~/.ssh/id_rsa.pub\n\n\\4.    将构建触发器勾上!![](images/20220822-9.png)\n\n\\5.                 \n\n \n\n配置apitoken，这里是后面APItoken的地址\n\n这里是在用户配置哪里，点设置，进去之后就能看到apitoken\n\n![](images/20220822-10.png)\n\n先找到设置然后打勾\n\n![](images/20220822-11.png)\n\n\\1.   找到WebHooks配置界面，在POST地址框中输入如下格式内容：\n\n\\2.  ![](images/20220822-12.png)\n\n\\3.   http://<User ID>:<API Token>@<Jenkins IP地址>:端口/generic-webhook-trigger/invoke \n\n\\4.   添加url\n\nhttp://root:1148e42061461a8d68883794319c3dcd82@192.168.2.2:7005/generic-webhook-trigger/invoke\n\n## 配置gitlab\n\n### 拉docker 并启动 \n\ndocker pull gitlab/gitlab-ce\ndocker run -d  -p 443:443 -p 81:80 -p 222:22 --name gitlab --restart always -v /root/gitlab/config:/etc/gitlab -v /root/gitlab/logs:/var/log/gitlab -v /root/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce\n\n#### 配置启动路径\n\ngitlab.rb文件内容默认全是注释\n\n$ vim /root/gitlab/config/gitlab.rb\n\n配置http协议所使用的访问地址,不加端口号默认为80\n\nexternal_url 'http://192.168.2.7'\n\nexternal_url 'http://120.77.247.123'\n\n配置ssh协议所使用的访问地址和端口\n\ngitlab_rails['gitlab_ssh_host'] = '192.168.2.7 '\ngitlab_rails['gitlab_shell_ssh_port'] = 222 # 此端口是run时22端口映射的222端口\n:wq #保存配置文件并退出\n重启gitlab容器\n\n\n\n$ docker restart gitlab\nGitLab占用内存非常恐怖，解决方法很简单\n     修改/root/gitlab/config/gitlab/gitlab.rb 文件，将 unicorn['worker_processes'] = 2 去掉注释就可以了。在注释的情况下默认是服务器上的所有线程。\n\n### 重置root密码\n\ndocker exec -it gitlab /bin/bash\n启用docker里面gitlab的ruby\n\n#### 注意，这里一定要等到控制台打印信息后才能输入下面的user\n\ngitlab-rails console -e production\n\n 找到管理员用户\nuser = User.where(id: 1).first\n 更改密码\nuser.password = 'abcd1234'\nuser.password_confirmation = 'abcd1234'\n记得保存\nuser.save!\n\n### \n\n \n\n​                               \n\n\n\n\n\n\n\n\n\n\n\n","slug":"dockers部署jenkins和gitlab总结","published":1,"date":"2022-08-22T01:14:42.339Z","updated":"2023-02-14T01:40:43.571Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vcy00021kua17wu29e3","content":"<h1 id=\"docker部署jenkins和gitlab总结\"><a href=\"#docker部署jenkins和gitlab总结\" class=\"headerlink\" title=\"docker部署jenkins和gitlab总结\"></a>docker部署jenkins和gitlab总结</h1><h2 id=\"jenkins安装\"><a href=\"#jenkins安装\" class=\"headerlink\" title=\"jenkins安装\"></a>jenkins安装</h2><h3 id=\"1拉取docker镜像并启动\"><a href=\"#1拉取docker镜像并启动\" class=\"headerlink\" title=\"1拉取docker镜像并启动\"></a>1拉取docker镜像并启动</h3><p>docker pull jenkinsci/blueocean<br>docker run -e JAVA_OPTS=”-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true” –name jenkins -u root –rm  -d -p 7005:8080 -p 50000:50000 -v /data/service/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /data/service/apache-maven-3.8.5:/usr/local/maven -v /data/service/jdk1.8.0_212:/usr/local/jdk jenkinsci/blueocean</p>\n<p>注意，这里的run -e JAVA_OPTS=”-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true” –name 是用来允许跨网站请求伪造，方便后来部署webhook</p>\n<p>–rm代表stop容器后就删除了容器 -v代表挂载，这里分别挂载jenkins目录，maven目录，jdk目录 -name代表容器名是jenkens ，这个可以直接通过docker rm Jenkins就删除了jenkins目录 -p代表端口映射，这里是代表容器在7005端口启动</p>\n<p>启动后访问 ip:7005</p>\n<h3 id=\"2查看密码登录\"><a href=\"#2查看密码登录\" class=\"headerlink\" title=\"2查看密码登录\"></a>2查看密码登录</h3><p>查看密码 ，目录文件为/data/service/Jenkins</p>\n<p>cat /data/service/jenkins/secrets/initialAdminPassword</p>\n<h3 id=\"3配置环境变量和git\"><a href=\"#3配置环境变量和git\" class=\"headerlink\" title=\"3配置环境变量和git\"></a>3配置环境变量和git</h3><p>设置全局工作变量 ，git和java是有的，不用配置</p>\n<p>这里只用配置maven环境变量，地址是docker容器内的</p>\n<p><img src=\"images/20220822-1.png\"></p>\n<p> 首先生成公钥</p>\n<p>进入jinkins容器后执行</p>\n<p>docker exec -it jenkins bash</p>\n<p>ssh-keygen -t rsa -C ‘<a href=\"mailto:&#x31;&#53;&#x30;&#49;&#x39;&#x34;&#x37;&#x34;&#x39;&#53;&#49;&#64;&#x31;&#54;&#51;&#x2e;&#99;&#x6f;&#x6d;\">&#x31;&#53;&#x30;&#49;&#x39;&#x34;&#x37;&#x34;&#x39;&#53;&#49;&#64;&#x31;&#54;&#51;&#x2e;&#99;&#x6f;&#x6d;</a>’</p>\n<p>cat ~/.ssh/id_rsa.pub</p>\n<h4 id=\"将公钥填入\"><a href=\"#将公钥填入\" class=\"headerlink\" title=\"将公钥填入\"></a>将公钥填入</h4><p><img src=\"images/20220822-2.png\"></p>\n<p>新建一个自由风格项目</p>\n<p><img src=\"images/20220822-3.png\"></p>\n<p>这里将刚才的公钥填入</p>\n<h3 id=\"4安装ssh插件并执行远程ssh连接\"><a href=\"#4安装ssh插件并执行远程ssh连接\" class=\"headerlink\" title=\"4安装ssh插件并执行远程ssh连接\"></a>4安装ssh插件并执行远程ssh连接</h3><p>搜索 Publish over SSH 插件安装，搜索 Maven Integration 插件安装</p>\n<p>在系统设置下配置远程连接，这里我配置主机地址,找到<strong>Publish over SSH</strong></p>\n<p><img src=\"images/20220822-5.png\"></p>\n<p>接着构建项目</p>\n<p>主要流程是先打包项目，然后把git目录下的项目的包发送</p>\n<p><img src=\"images/20220822-8.png\"></p>\n<p>这里首先是Soure set这里代表git根目录下的地址</p>\n<p>remove prefix代表去除项目前缀，可以不配置</p>\n<p>关键是remote directory 这里是用户的目录地址下的，这是个坑，即如果是root目录，则是/root/data/test，即用户打包的东西会传到这个目录下</p>\n<p>这里的shell命令就是删除原来的进程然后构建</p>\n<h2 id=\"webhook配置\"><a href=\"#webhook配置\" class=\"headerlink\" title=\"webhook配置\"></a>webhook配置</h2><h4 id=\"webhook配置-1\"><a href=\"#webhook配置-1\" class=\"headerlink\" title=\"webhook配置\"></a>webhook配置</h4><p>\\1.   安装<strong>Generic Webhook Trigger</strong>插件</p>\n<p>\\2.   加入git的公钥到jenkins</p>\n<p>\\3.   生成key  ssh-keygen -t rsa -C ‘<a href=\"mailto:&#x31;&#x35;&#49;&#55;&#50;&#53;&#x33;&#x37;&#x30;&#52;&#57;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#x6f;&#109;\">&#x31;&#x35;&#49;&#55;&#50;&#53;&#x33;&#x37;&#x30;&#52;&#57;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#x6f;&#109;</a>‘ cat ~/.ssh/id_rsa.pub</p>\n<p>\\4.    将构建触发器勾上!<img src=\"images/20220822-9.png\"></p>\n<p>\\5.                 </p>\n<p>配置apitoken，这里是后面APItoken的地址</p>\n<p>这里是在用户配置哪里，点设置，进去之后就能看到apitoken</p>\n<p><img src=\"images/20220822-10.png\"></p>\n<p>先找到设置然后打勾</p>\n<p><img src=\"images/20220822-11.png\"></p>\n<p>\\1.   找到WebHooks配置界面，在POST地址框中输入如下格式内容：</p>\n<p>\\2.  <img src=\"images/20220822-12.png\"></p>\n<p>\\3.   http://<User ID>:<API Token>@&lt;Jenkins IP地址&gt;:端口/generic-webhook-trigger/invoke </p>\n<p>\\4.   添加url</p>\n<p><a href=\"http://root:1148e42061461a8d68883794319c3dcd82@192.168.2.2:7005/generic-webhook-trigger/invoke\">http://root:1148e42061461a8d68883794319c3dcd82@192.168.2.2:7005/generic-webhook-trigger/invoke</a></p>\n<h2 id=\"配置gitlab\"><a href=\"#配置gitlab\" class=\"headerlink\" title=\"配置gitlab\"></a>配置gitlab</h2><h3 id=\"拉docker-并启动\"><a href=\"#拉docker-并启动\" class=\"headerlink\" title=\"拉docker 并启动\"></a>拉docker 并启动</h3><p>docker pull gitlab/gitlab-ce<br>docker run -d  -p 443:443 -p 81:80 -p 222:22 –name gitlab –restart always -v /root/gitlab/config:/etc/gitlab -v /root/gitlab/logs:/var/log/gitlab -v /root/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce</p>\n<h4 id=\"配置启动路径\"><a href=\"#配置启动路径\" class=\"headerlink\" title=\"配置启动路径\"></a>配置启动路径</h4><p>gitlab.rb文件内容默认全是注释</p>\n<p>$ vim /root/gitlab/config/gitlab.rb</p>\n<p>配置http协议所使用的访问地址,不加端口号默认为80</p>\n<p>external_url ‘<a href=\"http://192.168.2.7&/#39;\">http://192.168.2.7&#39;</a></p>\n<p>external_url ‘<a href=\"http://120.77.247.123&/#39;\">http://120.77.247.123&#39;</a></p>\n<p>配置ssh协议所使用的访问地址和端口</p>\n<p>gitlab_rails[‘gitlab_ssh_host’] = ‘192.168.2.7 ‘<br>gitlab_rails[‘gitlab_shell_ssh_port’] = 222 # 此端口是run时22端口映射的222端口<br>:wq #保存配置文件并退出<br>重启gitlab容器</p>\n<p>$ docker restart gitlab<br>GitLab占用内存非常恐怖，解决方法很简单<br>     修改/root/gitlab/config/gitlab/gitlab.rb 文件，将 unicorn[‘worker_processes’] = 2 去掉注释就可以了。在注释的情况下默认是服务器上的所有线程。</p>\n<h3 id=\"重置root密码\"><a href=\"#重置root密码\" class=\"headerlink\" title=\"重置root密码\"></a>重置root密码</h3><p>docker exec -it gitlab /bin/bash<br>启用docker里面gitlab的ruby</p>\n<h4 id=\"注意，这里一定要等到控制台打印信息后才能输入下面的user\"><a href=\"#注意，这里一定要等到控制台打印信息后才能输入下面的user\" class=\"headerlink\" title=\"注意，这里一定要等到控制台打印信息后才能输入下面的user\"></a>注意，这里一定要等到控制台打印信息后才能输入下面的user</h4><p>gitlab-rails console -e production</p>\n<p> 找到管理员用户<br>user = User.where(id: 1).first<br> 更改密码<br>user.password = ‘abcd1234’<br>user.password_confirmation = ‘abcd1234’<br>记得保存<br>user.save!</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p>​                               </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker部署jenkins和gitlab总结\"><a href=\"#docker部署jenkins和gitlab总结\" class=\"headerlink\" title=\"docker部署jenkins和gitlab总结\"></a>docker部署jenkins和gitlab总结</h1><h2 id=\"jenkins安装\"><a href=\"#jenkins安装\" class=\"headerlink\" title=\"jenkins安装\"></a>jenkins安装</h2><h3 id=\"1拉取docker镜像并启动\"><a href=\"#1拉取docker镜像并启动\" class=\"headerlink\" title=\"1拉取docker镜像并启动\"></a>1拉取docker镜像并启动</h3><p>docker pull jenkinsci/blueocean<br>docker run -e JAVA_OPTS=”-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true” –name jenkins -u root –rm  -d -p 7005:8080 -p 50000:50000 -v /data/service/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /data/service/apache-maven-3.8.5:/usr/local/maven -v /data/service/jdk1.8.0_212:/usr/local/jdk jenkinsci/blueocean</p>\n<p>注意，这里的run -e JAVA_OPTS=”-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true” –name 是用来允许跨网站请求伪造，方便后来部署webhook</p>\n<p>–rm代表stop容器后就删除了容器 -v代表挂载，这里分别挂载jenkins目录，maven目录，jdk目录 -name代表容器名是jenkens ，这个可以直接通过docker rm Jenkins就删除了jenkins目录 -p代表端口映射，这里是代表容器在7005端口启动</p>\n<p>启动后访问 ip:7005</p>\n<h3 id=\"2查看密码登录\"><a href=\"#2查看密码登录\" class=\"headerlink\" title=\"2查看密码登录\"></a>2查看密码登录</h3><p>查看密码 ，目录文件为/data/service/Jenkins</p>\n<p>cat /data/service/jenkins/secrets/initialAdminPassword</p>\n<h3 id=\"3配置环境变量和git\"><a href=\"#3配置环境变量和git\" class=\"headerlink\" title=\"3配置环境变量和git\"></a>3配置环境变量和git</h3><p>设置全局工作变量 ，git和java是有的，不用配置</p>\n<p>这里只用配置maven环境变量，地址是docker容器内的</p>\n<p><img src=\"images/20220822-1.png\"></p>\n<p> 首先生成公钥</p>\n<p>进入jinkins容器后执行</p>\n<p>docker exec -it jenkins bash</p>\n<p>ssh-keygen -t rsa -C ‘<a href=\"mailto:&#x31;&#53;&#x30;&#49;&#x39;&#x34;&#x37;&#x34;&#x39;&#53;&#49;&#64;&#x31;&#54;&#51;&#x2e;&#99;&#x6f;&#x6d;\">&#x31;&#53;&#x30;&#49;&#x39;&#x34;&#x37;&#x34;&#x39;&#53;&#49;&#64;&#x31;&#54;&#51;&#x2e;&#99;&#x6f;&#x6d;</a>’</p>\n<p>cat ~/.ssh/id_rsa.pub</p>\n<h4 id=\"将公钥填入\"><a href=\"#将公钥填入\" class=\"headerlink\" title=\"将公钥填入\"></a>将公钥填入</h4><p><img src=\"images/20220822-2.png\"></p>\n<p>新建一个自由风格项目</p>\n<p><img src=\"images/20220822-3.png\"></p>\n<p>这里将刚才的公钥填入</p>\n<h3 id=\"4安装ssh插件并执行远程ssh连接\"><a href=\"#4安装ssh插件并执行远程ssh连接\" class=\"headerlink\" title=\"4安装ssh插件并执行远程ssh连接\"></a>4安装ssh插件并执行远程ssh连接</h3><p>搜索 Publish over SSH 插件安装，搜索 Maven Integration 插件安装</p>\n<p>在系统设置下配置远程连接，这里我配置主机地址,找到<strong>Publish over SSH</strong></p>\n<p><img src=\"images/20220822-5.png\"></p>\n<p>接着构建项目</p>\n<p>主要流程是先打包项目，然后把git目录下的项目的包发送</p>\n<p><img src=\"images/20220822-8.png\"></p>\n<p>这里首先是Soure set这里代表git根目录下的地址</p>\n<p>remove prefix代表去除项目前缀，可以不配置</p>\n<p>关键是remote directory 这里是用户的目录地址下的，这是个坑，即如果是root目录，则是/root/data/test，即用户打包的东西会传到这个目录下</p>\n<p>这里的shell命令就是删除原来的进程然后构建</p>\n<h2 id=\"webhook配置\"><a href=\"#webhook配置\" class=\"headerlink\" title=\"webhook配置\"></a>webhook配置</h2><h4 id=\"webhook配置-1\"><a href=\"#webhook配置-1\" class=\"headerlink\" title=\"webhook配置\"></a>webhook配置</h4><p>\\1.   安装<strong>Generic Webhook Trigger</strong>插件</p>\n<p>\\2.   加入git的公钥到jenkins</p>\n<p>\\3.   生成key  ssh-keygen -t rsa -C ‘<a href=\"mailto:&#x31;&#x35;&#49;&#55;&#50;&#53;&#x33;&#x37;&#x30;&#52;&#57;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#x6f;&#109;\">&#x31;&#x35;&#49;&#55;&#50;&#53;&#x33;&#x37;&#x30;&#52;&#57;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#x6f;&#109;</a>‘ cat ~/.ssh/id_rsa.pub</p>\n<p>\\4.    将构建触发器勾上!<img src=\"images/20220822-9.png\"></p>\n<p>\\5.                 </p>\n<p>配置apitoken，这里是后面APItoken的地址</p>\n<p>这里是在用户配置哪里，点设置，进去之后就能看到apitoken</p>\n<p><img src=\"images/20220822-10.png\"></p>\n<p>先找到设置然后打勾</p>\n<p><img src=\"images/20220822-11.png\"></p>\n<p>\\1.   找到WebHooks配置界面，在POST地址框中输入如下格式内容：</p>\n<p>\\2.  <img src=\"images/20220822-12.png\"></p>\n<p>\\3.   http://<User ID>:<API Token>@&lt;Jenkins IP地址&gt;:端口/generic-webhook-trigger/invoke </p>\n<p>\\4.   添加url</p>\n<p><a href=\"http://root:1148e42061461a8d68883794319c3dcd82@192.168.2.2:7005/generic-webhook-trigger/invoke\">http://root:1148e42061461a8d68883794319c3dcd82@192.168.2.2:7005/generic-webhook-trigger/invoke</a></p>\n<h2 id=\"配置gitlab\"><a href=\"#配置gitlab\" class=\"headerlink\" title=\"配置gitlab\"></a>配置gitlab</h2><h3 id=\"拉docker-并启动\"><a href=\"#拉docker-并启动\" class=\"headerlink\" title=\"拉docker 并启动\"></a>拉docker 并启动</h3><p>docker pull gitlab/gitlab-ce<br>docker run -d  -p 443:443 -p 81:80 -p 222:22 –name gitlab –restart always -v /root/gitlab/config:/etc/gitlab -v /root/gitlab/logs:/var/log/gitlab -v /root/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce</p>\n<h4 id=\"配置启动路径\"><a href=\"#配置启动路径\" class=\"headerlink\" title=\"配置启动路径\"></a>配置启动路径</h4><p>gitlab.rb文件内容默认全是注释</p>\n<p>$ vim /root/gitlab/config/gitlab.rb</p>\n<p>配置http协议所使用的访问地址,不加端口号默认为80</p>\n<p>external_url ‘<a href=\"http://192.168.2.7&/#39;\">http://192.168.2.7&#39;</a></p>\n<p>external_url ‘<a href=\"http://120.77.247.123&/#39;\">http://120.77.247.123&#39;</a></p>\n<p>配置ssh协议所使用的访问地址和端口</p>\n<p>gitlab_rails[‘gitlab_ssh_host’] = ‘192.168.2.7 ‘<br>gitlab_rails[‘gitlab_shell_ssh_port’] = 222 # 此端口是run时22端口映射的222端口<br>:wq #保存配置文件并退出<br>重启gitlab容器</p>\n<p>$ docker restart gitlab<br>GitLab占用内存非常恐怖，解决方法很简单<br>     修改/root/gitlab/config/gitlab/gitlab.rb 文件，将 unicorn[‘worker_processes’] = 2 去掉注释就可以了。在注释的情况下默认是服务器上的所有线程。</p>\n<h3 id=\"重置root密码\"><a href=\"#重置root密码\" class=\"headerlink\" title=\"重置root密码\"></a>重置root密码</h3><p>docker exec -it gitlab /bin/bash<br>启用docker里面gitlab的ruby</p>\n<h4 id=\"注意，这里一定要等到控制台打印信息后才能输入下面的user\"><a href=\"#注意，这里一定要等到控制台打印信息后才能输入下面的user\" class=\"headerlink\" title=\"注意，这里一定要等到控制台打印信息后才能输入下面的user\"></a>注意，这里一定要等到控制台打印信息后才能输入下面的user</h4><p>gitlab-rails console -e production</p>\n<p> 找到管理员用户<br>user = User.where(id: 1).first<br> 更改密码<br>user.password = ‘abcd1234’<br>user.password_confirmation = ‘abcd1234’<br>记得保存<br>user.save!</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p>​                               </p>\n"},{"_content":"# docker部署springboot项目\n\n本文主要介绍docker如何部署springboot项目\n\n#### 创建一个springboot项目，打包成jar包\n\n该项目端口为8081，logback日志目录为/home/docker/logs\n\n![img](https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415153310412-1698748435.png)\n\n#### 准备一台搭建好了docker的linux服务器\n\nlinux搭建docker攻略移步：https://www.cnblogs.com/lixianguo/p/13254950.html\n创建/home/docker文件夹，将打包的jar包上传\n创建/home/docker/logs文件夹存放日志文件，该路径与项目中logback中设置的一致\n创建Dockerfile,内容如下\n\n```dockerfile\n#指定基础镜像，不需要另外安装jdk\nFROM java:8\n#维护者\nMAINTAINER lxg\n#将本地文件添加到容器中，并更名为myproject.jar\nCOPY springboot-docker-1.0-SNAPSHOT.jar myproject.jar\n#指定访问端口，与yml文件中的端口一致\nEXPOSE 8081\n#容器启动时，运行该程序\nENTRYPOINT [\"java\", \"-jar\", \"myproject.jar\"]\n```\n\n目录截图如下\n\n![img](https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415154509479-1294761548.png)\n\n#### 使用命令构建镜像\n\n最后空格和\".\"不可忽略\n\n```\ndocker build -t myproject .\n```\n\n![img](https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415160735560-359695528.png)\n\n#### 创建并启动容器\n\n```shell\ndocker run -p 8080:8081 --name myproject \\\n> -v /home/docker/logs:/home/docker/logs \\\n> -d myproject\n```\n\n![img](https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415162800983-219739236.png)\n\n8080是外界访问的端口，可以自定义，8081是Dockerfile中定义的端口。\n-v是为了将容器中的日志目录挂载出来，冒号之前是linux宿主机自己创建的目录，可以自定义。后面的是logback文件中定义的输出日志的目录。\n\n![img](https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415162939731-510580576.png)","source":"_posts/docker部署springboot项目.md","raw":"# docker部署springboot项目\n\n本文主要介绍docker如何部署springboot项目\n\n#### 创建一个springboot项目，打包成jar包\n\n该项目端口为8081，logback日志目录为/home/docker/logs\n\n![img](https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415153310412-1698748435.png)\n\n#### 准备一台搭建好了docker的linux服务器\n\nlinux搭建docker攻略移步：https://www.cnblogs.com/lixianguo/p/13254950.html\n创建/home/docker文件夹，将打包的jar包上传\n创建/home/docker/logs文件夹存放日志文件，该路径与项目中logback中设置的一致\n创建Dockerfile,内容如下\n\n```dockerfile\n#指定基础镜像，不需要另外安装jdk\nFROM java:8\n#维护者\nMAINTAINER lxg\n#将本地文件添加到容器中，并更名为myproject.jar\nCOPY springboot-docker-1.0-SNAPSHOT.jar myproject.jar\n#指定访问端口，与yml文件中的端口一致\nEXPOSE 8081\n#容器启动时，运行该程序\nENTRYPOINT [\"java\", \"-jar\", \"myproject.jar\"]\n```\n\n目录截图如下\n\n![img](https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415154509479-1294761548.png)\n\n#### 使用命令构建镜像\n\n最后空格和\".\"不可忽略\n\n```\ndocker build -t myproject .\n```\n\n![img](https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415160735560-359695528.png)\n\n#### 创建并启动容器\n\n```shell\ndocker run -p 8080:8081 --name myproject \\\n> -v /home/docker/logs:/home/docker/logs \\\n> -d myproject\n```\n\n![img](https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415162800983-219739236.png)\n\n8080是外界访问的端口，可以自定义，8081是Dockerfile中定义的端口。\n-v是为了将容器中的日志目录挂载出来，冒号之前是linux宿主机自己创建的目录，可以自定义。后面的是logback文件中定义的输出日志的目录。\n\n![img](https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415162939731-510580576.png)","slug":"docker部署springboot项目","published":1,"date":"2022-09-17T12:34:13.529Z","updated":"2022-09-17T14:25:04.647Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vcz00031kua96nx87i2","content":"<h1 id=\"docker部署springboot项目\"><a href=\"#docker部署springboot项目\" class=\"headerlink\" title=\"docker部署springboot项目\"></a>docker部署springboot项目</h1><p>本文主要介绍docker如何部署springboot项目</p>\n<h4 id=\"创建一个springboot项目，打包成jar包\"><a href=\"#创建一个springboot项目，打包成jar包\" class=\"headerlink\" title=\"创建一个springboot项目，打包成jar包\"></a>创建一个springboot项目，打包成jar包</h4><p>该项目端口为8081，logback日志目录为/home/docker/logs</p>\n<p><img src=\"https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415153310412-1698748435.png\" alt=\"img\"></p>\n<h4 id=\"准备一台搭建好了docker的linux服务器\"><a href=\"#准备一台搭建好了docker的linux服务器\" class=\"headerlink\" title=\"准备一台搭建好了docker的linux服务器\"></a>准备一台搭建好了docker的linux服务器</h4><p>linux搭建docker攻略移步：<a href=\"https://www.cnblogs.com/lixianguo/p/13254950.html\">https://www.cnblogs.com/lixianguo/p/13254950.html</a><br>创建/home/docker文件夹，将打包的jar包上传<br>创建/home/docker/logs文件夹存放日志文件，该路径与项目中logback中设置的一致<br>创建Dockerfile,内容如下</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定基础镜像，不需要另外安装jdk</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> java:<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\">#维护者</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> lxg</span><br><span class=\"line\"><span class=\"comment\">#将本地文件添加到容器中，并更名为myproject.jar</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> springboot-docker-1.0-SNAPSHOT.jar myproject.jar</span></span><br><span class=\"line\"><span class=\"comment\">#指定访问端口，与yml文件中的端口一致</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8081</span></span><br><span class=\"line\"><span class=\"comment\">#容器启动时，运行该程序</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>, <span class=\"string\">&quot;myproject.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>目录截图如下</p>\n<p><img src=\"https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415154509479-1294761548.png\" alt=\"img\"></p>\n<h4 id=\"使用命令构建镜像\"><a href=\"#使用命令构建镜像\" class=\"headerlink\" title=\"使用命令构建镜像\"></a>使用命令构建镜像</h4><p>最后空格和”.”不可忽略</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t myproject .</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415160735560-359695528.png\" alt=\"img\"></p>\n<h4 id=\"创建并启动容器\"><a href=\"#创建并启动容器\" class=\"headerlink\" title=\"创建并启动容器\"></a>创建并启动容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 8080:8081 --name myproject \\</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">-v /home/docker/logs:/home/docker/logs \\</span></span><br><span class=\"line\"><span class=\"language-bash\">&gt; -d myproject</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415162800983-219739236.png\" alt=\"img\"></p>\n<p>8080是外界访问的端口，可以自定义，8081是Dockerfile中定义的端口。<br>-v是为了将容器中的日志目录挂载出来，冒号之前是linux宿主机自己创建的目录，可以自定义。后面的是logback文件中定义的输出日志的目录。</p>\n<p><img src=\"https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415162939731-510580576.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker部署springboot项目\"><a href=\"#docker部署springboot项目\" class=\"headerlink\" title=\"docker部署springboot项目\"></a>docker部署springboot项目</h1><p>本文主要介绍docker如何部署springboot项目</p>\n<h4 id=\"创建一个springboot项目，打包成jar包\"><a href=\"#创建一个springboot项目，打包成jar包\" class=\"headerlink\" title=\"创建一个springboot项目，打包成jar包\"></a>创建一个springboot项目，打包成jar包</h4><p>该项目端口为8081，logback日志目录为/home/docker/logs</p>\n<p><img src=\"https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415153310412-1698748435.png\" alt=\"img\"></p>\n<h4 id=\"准备一台搭建好了docker的linux服务器\"><a href=\"#准备一台搭建好了docker的linux服务器\" class=\"headerlink\" title=\"准备一台搭建好了docker的linux服务器\"></a>准备一台搭建好了docker的linux服务器</h4><p>linux搭建docker攻略移步：<a href=\"https://www.cnblogs.com/lixianguo/p/13254950.html\">https://www.cnblogs.com/lixianguo/p/13254950.html</a><br>创建/home/docker文件夹，将打包的jar包上传<br>创建/home/docker/logs文件夹存放日志文件，该路径与项目中logback中设置的一致<br>创建Dockerfile,内容如下</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定基础镜像，不需要另外安装jdk</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> java:<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\">#维护者</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> lxg</span><br><span class=\"line\"><span class=\"comment\">#将本地文件添加到容器中，并更名为myproject.jar</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> springboot-docker-1.0-SNAPSHOT.jar myproject.jar</span></span><br><span class=\"line\"><span class=\"comment\">#指定访问端口，与yml文件中的端口一致</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8081</span></span><br><span class=\"line\"><span class=\"comment\">#容器启动时，运行该程序</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>, <span class=\"string\">&quot;myproject.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>目录截图如下</p>\n<p><img src=\"https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415154509479-1294761548.png\" alt=\"img\"></p>\n<h4 id=\"使用命令构建镜像\"><a href=\"#使用命令构建镜像\" class=\"headerlink\" title=\"使用命令构建镜像\"></a>使用命令构建镜像</h4><p>最后空格和”.”不可忽略</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t myproject .</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415160735560-359695528.png\" alt=\"img\"></p>\n<h4 id=\"创建并启动容器\"><a href=\"#创建并启动容器\" class=\"headerlink\" title=\"创建并启动容器\"></a>创建并启动容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 8080:8081 --name myproject \\</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">-v /home/docker/logs:/home/docker/logs \\</span></span><br><span class=\"line\"><span class=\"language-bash\">&gt; -d myproject</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415162800983-219739236.png\" alt=\"img\"></p>\n<p>8080是外界访问的端口，可以自定义，8081是Dockerfile中定义的端口。<br>-v是为了将容器中的日志目录挂载出来，冒号之前是linux宿主机自己创建的目录，可以自定义。后面的是logback文件中定义的输出日志的目录。</p>\n<p><img src=\"https://img2022.cnblogs.com/blog/1899220/202204/1899220-20220415162939731-510580576.png\" alt=\"img\"></p>\n"},{"_content":"##### Git global setup\n\n```\ngit config --global user.name \"Administrator\"\ngit config --global user.email \"admin@example.com\"\n```\n\n##### Create a new repository\n\n```\ngit clone ssh://git@192.168.2.2:222/root/newbeemallplus.git\ncd newbeemallplus\ngit switch -c main\ntouch README.md\ngit add README.md\ngit commit -m \"add README\"\ngit push -u origin main\n```\n\n##### Push an existing folder\n\n```\ncd existing_folder\ngit init --initial-branch=main\ngit remote add origin ssh://git@192.168.2.2:222/root/newbeemallplus.git\ngit add .\ngit commit -m \"Initial commit\"\ngit push -u origin main\n```\n\n##### Push an existing Git repository\n\n```\ncd existing_repo\ngit remote rename origin old-origin\ngit remote add origin ssh://git@192.168.2.2:222/root/newbeemallplus.git\ngit push -u origin --all\ngit push -u origin --tags\n```","source":"_posts/git 一般操作.md","raw":"##### Git global setup\n\n```\ngit config --global user.name \"Administrator\"\ngit config --global user.email \"admin@example.com\"\n```\n\n##### Create a new repository\n\n```\ngit clone ssh://git@192.168.2.2:222/root/newbeemallplus.git\ncd newbeemallplus\ngit switch -c main\ntouch README.md\ngit add README.md\ngit commit -m \"add README\"\ngit push -u origin main\n```\n\n##### Push an existing folder\n\n```\ncd existing_folder\ngit init --initial-branch=main\ngit remote add origin ssh://git@192.168.2.2:222/root/newbeemallplus.git\ngit add .\ngit commit -m \"Initial commit\"\ngit push -u origin main\n```\n\n##### Push an existing Git repository\n\n```\ncd existing_repo\ngit remote rename origin old-origin\ngit remote add origin ssh://git@192.168.2.2:222/root/newbeemallplus.git\ngit push -u origin --all\ngit push -u origin --tags\n```","slug":"git 一般操作","published":1,"date":"2023-01-16T13:53:13.892Z","updated":"2023-01-16T13:53:37.076Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vcz00041kua6huz6ccv","content":"<h5 id=\"Git-global-setup\"><a href=\"#Git-global-setup\" class=\"headerlink\" title=\"Git global setup\"></a>Git global setup</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Administrator&quot;</span><br><span class=\"line\">git config --global user.email &quot;admin@example.com&quot;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Create-a-new-repository\"><a href=\"#Create-a-new-repository\" class=\"headerlink\" title=\"Create a new repository\"></a>Create a new repository</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ssh://git@192.168.2.2:222/root/newbeemallplus.git</span><br><span class=\"line\">cd newbeemallplus</span><br><span class=\"line\">git switch -c main</span><br><span class=\"line\">touch README.md</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m &quot;add README&quot;</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Push-an-existing-folder\"><a href=\"#Push-an-existing-folder\" class=\"headerlink\" title=\"Push an existing folder\"></a>Push an existing folder</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd existing_folder</span><br><span class=\"line\">git init --initial-branch=main</span><br><span class=\"line\">git remote add origin ssh://git@192.168.2.2:222/root/newbeemallplus.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;Initial commit&quot;</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Push-an-existing-Git-repository\"><a href=\"#Push-an-existing-Git-repository\" class=\"headerlink\" title=\"Push an existing Git repository\"></a>Push an existing Git repository</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd existing_repo</span><br><span class=\"line\">git remote rename origin old-origin</span><br><span class=\"line\">git remote add origin ssh://git@192.168.2.2:222/root/newbeemallplus.git</span><br><span class=\"line\">git push -u origin --all</span><br><span class=\"line\">git push -u origin --tags</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"Git-global-setup\"><a href=\"#Git-global-setup\" class=\"headerlink\" title=\"Git global setup\"></a>Git global setup</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Administrator&quot;</span><br><span class=\"line\">git config --global user.email &quot;admin@example.com&quot;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Create-a-new-repository\"><a href=\"#Create-a-new-repository\" class=\"headerlink\" title=\"Create a new repository\"></a>Create a new repository</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ssh://git@192.168.2.2:222/root/newbeemallplus.git</span><br><span class=\"line\">cd newbeemallplus</span><br><span class=\"line\">git switch -c main</span><br><span class=\"line\">touch README.md</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m &quot;add README&quot;</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Push-an-existing-folder\"><a href=\"#Push-an-existing-folder\" class=\"headerlink\" title=\"Push an existing folder\"></a>Push an existing folder</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd existing_folder</span><br><span class=\"line\">git init --initial-branch=main</span><br><span class=\"line\">git remote add origin ssh://git@192.168.2.2:222/root/newbeemallplus.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;Initial commit&quot;</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Push-an-existing-Git-repository\"><a href=\"#Push-an-existing-Git-repository\" class=\"headerlink\" title=\"Push an existing Git repository\"></a>Push an existing Git repository</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd existing_repo</span><br><span class=\"line\">git remote rename origin old-origin</span><br><span class=\"line\">git remote add origin ssh://git@192.168.2.2:222/root/newbeemallplus.git</span><br><span class=\"line\">git push -u origin --all</span><br><span class=\"line\">git push -u origin --tags</span><br></pre></td></tr></table></figure>"},{"_content":"# Git 常用命令：\n\n- 工作区：指在本地仓库中的全部代码区域；\n- 暂存区：指在本地仓库中通过 git add 后的代码区域；\n- 本地仓库：指在本地仓库中的 git commit 后的代码区域；\n- 远程仓库：远程仓库指的托管代码的服务器。\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be9dbaf612d145d1890de71f4a57829a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n## 常用指令\n\n### git clone\n\ngit clone 命令用于将存储库克隆到本地。\n\n```less\ngit clone [url] // 将存储库克隆到本地\n\n```\n\n### git init\n\n**git init 命令用于在目录中创建新的 Git 仓库。**\n\n```csharp\n- git init // 创建新的 Git 仓库，在当前路径下生成 .git 目录\n\n```\n\n### git remote\n\ngit remote 用于管理跟踪远程仓库。\n\n```csharp\ngit remote -v // 查看连接的远程仓库地址\ngit remote add origin [gitUrl] // 为本地仓库添加远程仓库地址\ngit push -u origin master // 将本地仓库的master和远程仓库的master进行关联\ngit remote origin set-url [gitUrl] // 为本地仓库修改远程仓库地址\ngit remote rm origin // 为本地仓库删除远程仓库连接\n\n```\n\n### git checkout\n\ngit checkout 命令用于切换分支。\n\n```less\ngit checkout [branchName] // 切换分支\ngit checkout -b [branchName] // 新建分支并切换到该分支\n\n```\n\n### git branch\n\ngit branch 命令用于查看、创建、删除分支。\n\n```less\ngit branch //查看本地分支\ngit branch -r //查看远程分支\ngit branch -a //查看本地和远程分支\ngit branch [branchName] //新建本地分支但不切换\ngit branch -D [branchName] //删除本地分支\ngit branch -m [oldBranchName] [newBranchName] //重新命名分支\n\n```\n\n### git tag\n\ngit tag 用于创建、删除、查看标签。\n\n```less\ngit tag [tagName] // 新建标签\ngit tag // 查看标签列表\ngit tag -d [tagName] // 删除标签\ngit push origin [tagName] // 推送标签到远程仓库\n\n```\n\n### git add\n\n**git add** 命令用于将本地文件添加到暂存区。\n\n```csharp\ngit add [file1] [file2] // 添加指定文件至暂存区\ngit add [dir] // 添加指定目录至暂存区\ngit add . // 添加当前目录下所有文件至暂存区\ngit add -A // 添加当前仓库下的所有文件改动至暂存区\n\n```\n\n### git commit\n\ngit commit 命令用于将暂存区内容添加到本地仓库中。\n\n```arduino\ngit commit -m 'xxx' // 将暂存区文件添加到本地仓库，并记录下备注\ngit commit -m 'xxx' -n // 将暂存区文件添加到本地仓库，并记录下备注，同时跳过 husky hooks 设置的规则校验\ngit commit -am 'xxx' // 将文件添加到暂存区，再添加到本地仓库，并记录下备注\n\n```\n\n### git push\n\ngit push 命令用于将本地分支推送到远程仓库。\n\n```scss\ngit push [remoteName] [branchName] // 推送分支\ngit push --set-upstream [remoteName] [branchName] // 推送分支并建立关联关系\n\n```\n\n### git pull\n\ngit pull 命令用于从远程仓库拉取代码并合并到本地当前分支。\n\n```scss\ngit pull // 从远程仓库拉取代码合并到本地，等同于 git fetch && git merge\ngit pull --rebase // 使用rebase的模式进行合并\n\n```\n\n### git fetch\n\ngit fetch 命令用于从远程获取代码库。\n\n```scss\ngit fetch // 从所有远程仓库拉取当前分支代码\ngit fetch [remoteName] // 从指定远程仓库拉取当前分支代码\ngit fetch --all // 获取所有远程仓库所有分支的更新\n\n```\n\n### git cherry-pick\n\ngit cherry-pick 命令用于获取指定的 commit，可以将分支 a 上的 commit 1，复制到分支 b上。\n\n```less\ngit cherry-pick [commitId] // 获取指定的commit\n\n```\n\n### git merge\n\ngit merge 命令用于分支合并，将其他分支的内容合并到当前分支中。\n\n```css\ngit merge [branchName]\n\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b182abe7c54161959596eb5b140299~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\n\n### git rebase\n\ngit rebase 用于分支变基。\n\n```arduino\ngit rebase master // 将当前分支变基到 master 分支上\n\n```\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdee372fa7654715ba5e2538b562edef~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\ngit rebase -i 交互模式：\n\n```css\ngit rebase -i [commitId] // 基于 commitId 进行 rebase，交互式变基，可以重新编辑 commit，比如压缩合并\n\n```\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f45211ea91014b459befe44034917aac~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n### git reset\n\ngit reset 命令用于回退版本，可以指定退回某一次提交的版本。\n\n```scss\ngit reset HEAD^ // 回退所有内容到上一个版本\ngit reset HEAD^ [filename] // 回退某文件到上一个版本\ngit reset [commitId] // 回退所有内容到指定版本\n\ngit reset --soft HEAD~1 // 回退本地仓库到上一个版本\ngit reset --hard HEAD~1 // 回退本地仓库到上一个版本，并删除工作区所有未提交的修改内容\n复制代码\n```\n\n### git revert\n\ngit revert 指令用于回滚提交，可以回滚某一次提交记录。\n\n```less\ngit revert [commitId] // 回滚某次提交\ngit revert [commitId] -m 1 // 回滚某次 merge 的 commit，1 代表保留主分支代码\n\n```\n\n### git stash\n\ngit stash 用于暂存文件。\n\n```arduino\ngit stash // 暂存文件\ngit stash save 'aa' // 暂存文件，添加备注\ngit stash pop // 应用最近一次暂存文件，并删除暂存记录\ngit stash apply // 应用最近一次暂存，但不删除该暂存记录\ngit stash apply stash@{第几次暂存的代码，例如0} // 应用某一次暂存，但不删除该暂存记录；\ngit stash list // 暂存记录\ngit stash clear // 删除所有暂存记录\n复制代码\n```\n\n### git reflog\n\ngit reflog 记录了所有的 commit 操作记录，便于错误操作后找回。\n\n```\ngit reflog\n\n```\n\n### git rm\n\ngit rm 用于从 git 仓库删除指定文件或目录。\n\n```bash\ngit rm [filname]\ngit rm [dir]\n\n```\n\n### git log\n\ngit log 命令用于查看 git commit 记录。\n\n```c\ngit log // 查看所有 commit 记录\ngit  log  --grep  瀑布流 // 搜索 commit msg 有瀑布流关键字的 记录\n```\n\n\n\n","source":"_posts/git常用操作.md","raw":"# Git 常用命令：\n\n- 工作区：指在本地仓库中的全部代码区域；\n- 暂存区：指在本地仓库中通过 git add 后的代码区域；\n- 本地仓库：指在本地仓库中的 git commit 后的代码区域；\n- 远程仓库：远程仓库指的托管代码的服务器。\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be9dbaf612d145d1890de71f4a57829a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n## 常用指令\n\n### git clone\n\ngit clone 命令用于将存储库克隆到本地。\n\n```less\ngit clone [url] // 将存储库克隆到本地\n\n```\n\n### git init\n\n**git init 命令用于在目录中创建新的 Git 仓库。**\n\n```csharp\n- git init // 创建新的 Git 仓库，在当前路径下生成 .git 目录\n\n```\n\n### git remote\n\ngit remote 用于管理跟踪远程仓库。\n\n```csharp\ngit remote -v // 查看连接的远程仓库地址\ngit remote add origin [gitUrl] // 为本地仓库添加远程仓库地址\ngit push -u origin master // 将本地仓库的master和远程仓库的master进行关联\ngit remote origin set-url [gitUrl] // 为本地仓库修改远程仓库地址\ngit remote rm origin // 为本地仓库删除远程仓库连接\n\n```\n\n### git checkout\n\ngit checkout 命令用于切换分支。\n\n```less\ngit checkout [branchName] // 切换分支\ngit checkout -b [branchName] // 新建分支并切换到该分支\n\n```\n\n### git branch\n\ngit branch 命令用于查看、创建、删除分支。\n\n```less\ngit branch //查看本地分支\ngit branch -r //查看远程分支\ngit branch -a //查看本地和远程分支\ngit branch [branchName] //新建本地分支但不切换\ngit branch -D [branchName] //删除本地分支\ngit branch -m [oldBranchName] [newBranchName] //重新命名分支\n\n```\n\n### git tag\n\ngit tag 用于创建、删除、查看标签。\n\n```less\ngit tag [tagName] // 新建标签\ngit tag // 查看标签列表\ngit tag -d [tagName] // 删除标签\ngit push origin [tagName] // 推送标签到远程仓库\n\n```\n\n### git add\n\n**git add** 命令用于将本地文件添加到暂存区。\n\n```csharp\ngit add [file1] [file2] // 添加指定文件至暂存区\ngit add [dir] // 添加指定目录至暂存区\ngit add . // 添加当前目录下所有文件至暂存区\ngit add -A // 添加当前仓库下的所有文件改动至暂存区\n\n```\n\n### git commit\n\ngit commit 命令用于将暂存区内容添加到本地仓库中。\n\n```arduino\ngit commit -m 'xxx' // 将暂存区文件添加到本地仓库，并记录下备注\ngit commit -m 'xxx' -n // 将暂存区文件添加到本地仓库，并记录下备注，同时跳过 husky hooks 设置的规则校验\ngit commit -am 'xxx' // 将文件添加到暂存区，再添加到本地仓库，并记录下备注\n\n```\n\n### git push\n\ngit push 命令用于将本地分支推送到远程仓库。\n\n```scss\ngit push [remoteName] [branchName] // 推送分支\ngit push --set-upstream [remoteName] [branchName] // 推送分支并建立关联关系\n\n```\n\n### git pull\n\ngit pull 命令用于从远程仓库拉取代码并合并到本地当前分支。\n\n```scss\ngit pull // 从远程仓库拉取代码合并到本地，等同于 git fetch && git merge\ngit pull --rebase // 使用rebase的模式进行合并\n\n```\n\n### git fetch\n\ngit fetch 命令用于从远程获取代码库。\n\n```scss\ngit fetch // 从所有远程仓库拉取当前分支代码\ngit fetch [remoteName] // 从指定远程仓库拉取当前分支代码\ngit fetch --all // 获取所有远程仓库所有分支的更新\n\n```\n\n### git cherry-pick\n\ngit cherry-pick 命令用于获取指定的 commit，可以将分支 a 上的 commit 1，复制到分支 b上。\n\n```less\ngit cherry-pick [commitId] // 获取指定的commit\n\n```\n\n### git merge\n\ngit merge 命令用于分支合并，将其他分支的内容合并到当前分支中。\n\n```css\ngit merge [branchName]\n\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b182abe7c54161959596eb5b140299~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\n\n### git rebase\n\ngit rebase 用于分支变基。\n\n```arduino\ngit rebase master // 将当前分支变基到 master 分支上\n\n```\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdee372fa7654715ba5e2538b562edef~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\ngit rebase -i 交互模式：\n\n```css\ngit rebase -i [commitId] // 基于 commitId 进行 rebase，交互式变基，可以重新编辑 commit，比如压缩合并\n\n```\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f45211ea91014b459befe44034917aac~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n### git reset\n\ngit reset 命令用于回退版本，可以指定退回某一次提交的版本。\n\n```scss\ngit reset HEAD^ // 回退所有内容到上一个版本\ngit reset HEAD^ [filename] // 回退某文件到上一个版本\ngit reset [commitId] // 回退所有内容到指定版本\n\ngit reset --soft HEAD~1 // 回退本地仓库到上一个版本\ngit reset --hard HEAD~1 // 回退本地仓库到上一个版本，并删除工作区所有未提交的修改内容\n复制代码\n```\n\n### git revert\n\ngit revert 指令用于回滚提交，可以回滚某一次提交记录。\n\n```less\ngit revert [commitId] // 回滚某次提交\ngit revert [commitId] -m 1 // 回滚某次 merge 的 commit，1 代表保留主分支代码\n\n```\n\n### git stash\n\ngit stash 用于暂存文件。\n\n```arduino\ngit stash // 暂存文件\ngit stash save 'aa' // 暂存文件，添加备注\ngit stash pop // 应用最近一次暂存文件，并删除暂存记录\ngit stash apply // 应用最近一次暂存，但不删除该暂存记录\ngit stash apply stash@{第几次暂存的代码，例如0} // 应用某一次暂存，但不删除该暂存记录；\ngit stash list // 暂存记录\ngit stash clear // 删除所有暂存记录\n复制代码\n```\n\n### git reflog\n\ngit reflog 记录了所有的 commit 操作记录，便于错误操作后找回。\n\n```\ngit reflog\n\n```\n\n### git rm\n\ngit rm 用于从 git 仓库删除指定文件或目录。\n\n```bash\ngit rm [filname]\ngit rm [dir]\n\n```\n\n### git log\n\ngit log 命令用于查看 git commit 记录。\n\n```c\ngit log // 查看所有 commit 记录\ngit  log  --grep  瀑布流 // 搜索 commit msg 有瀑布流关键字的 记录\n```\n\n\n\n","slug":"git常用操作","published":1,"date":"2023-03-08T14:08:25.123Z","updated":"2023-03-08T15:33:58.510Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vd000051kuacez7d353","content":"<h1 id=\"Git-常用命令：\"><a href=\"#Git-常用命令：\" class=\"headerlink\" title=\"Git 常用命令：\"></a>Git 常用命令：</h1><ul>\n<li>工作区：指在本地仓库中的全部代码区域；</li>\n<li>暂存区：指在本地仓库中通过 git add 后的代码区域；</li>\n<li>本地仓库：指在本地仓库中的 git commit 后的代码区域；</li>\n<li>远程仓库：远程仓库指的托管代码的服务器。</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be9dbaf612d145d1890de71f4a57829a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><p>git clone 命令用于将存储库克隆到本地。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">clone</span> <span class=\"selector-attr\">[url]</span> <span class=\"comment\">// 将存储库克隆到本地</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h3><p><strong>git init 命令用于在目录中创建新的 Git 仓库。</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- git <span class=\"keyword\">init</span> <span class=\"comment\">// 创建新的 Git 仓库，在当前路径下生成 .git 目录</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h3><p>git remote 用于管理跟踪远程仓库。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v <span class=\"comment\">// 查看连接的远程仓库地址</span></span><br><span class=\"line\">git remote <span class=\"keyword\">add</span> origin [gitUrl] <span class=\"comment\">// 为本地仓库添加远程仓库地址</span></span><br><span class=\"line\">git push -u origin master <span class=\"comment\">// 将本地仓库的master和远程仓库的master进行关联</span></span><br><span class=\"line\">git remote origin <span class=\"keyword\">set</span>-url [gitUrl] <span class=\"comment\">// 为本地仓库修改远程仓库地址</span></span><br><span class=\"line\">git remote rm origin <span class=\"comment\">// 为本地仓库删除远程仓库连接</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h3><p>git checkout 命令用于切换分支。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">checkout</span> <span class=\"selector-attr\">[branchName]</span> <span class=\"comment\">// 切换分支</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">checkout</span> <span class=\"selector-tag\">-b</span> <span class=\"selector-attr\">[branchName]</span> <span class=\"comment\">// 新建分支并切换到该分支</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h3><p>git branch 命令用于查看、创建、删除分支。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">branch</span> <span class=\"comment\">//查看本地分支</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">branch</span> <span class=\"selector-tag\">-r</span> <span class=\"comment\">//查看远程分支</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">branch</span> <span class=\"selector-tag\">-a</span> <span class=\"comment\">//查看本地和远程分支</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">branch</span> <span class=\"selector-attr\">[branchName]</span> <span class=\"comment\">//新建本地分支但不切换</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">branch</span> <span class=\"selector-tag\">-D</span> <span class=\"selector-attr\">[branchName]</span> <span class=\"comment\">//删除本地分支</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">branch</span> <span class=\"selector-tag\">-m</span> <span class=\"selector-attr\">[oldBranchName]</span> <span class=\"selector-attr\">[newBranchName]</span> <span class=\"comment\">//重新命名分支</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h3><p>git tag 用于创建、删除、查看标签。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">tag</span> <span class=\"selector-attr\">[tagName]</span> <span class=\"comment\">// 新建标签</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">tag</span> <span class=\"comment\">// 查看标签列表</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">tag</span> <span class=\"selector-tag\">-d</span> <span class=\"selector-attr\">[tagName]</span> <span class=\"comment\">// 删除标签</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">push</span> <span class=\"selector-tag\">origin</span> <span class=\"selector-attr\">[tagName]</span> <span class=\"comment\">// 推送标签到远程仓库</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h3><p><strong>git add</strong> 命令用于将本地文件添加到暂存区。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">add</span> [file1] [file2] <span class=\"comment\">// 添加指定文件至暂存区</span></span><br><span class=\"line\">git <span class=\"keyword\">add</span> [dir] <span class=\"comment\">// 添加指定目录至暂存区</span></span><br><span class=\"line\">git <span class=\"keyword\">add</span> . <span class=\"comment\">// 添加当前目录下所有文件至暂存区</span></span><br><span class=\"line\">git <span class=\"keyword\">add</span> -A <span class=\"comment\">// 添加当前仓库下的所有文件改动至暂存区</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p>git commit 命令用于将暂存区内容添加到本地仓库中。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"comment\">// 将暂存区文件添加到本地仓库，并记录下备注</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;xxx&#x27;</span> -n <span class=\"comment\">// 将暂存区文件添加到本地仓库，并记录下备注，同时跳过 husky hooks 设置的规则校验</span></span><br><span class=\"line\">git commit -am <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"comment\">// 将文件添加到暂存区，再添加到本地仓库，并记录下备注</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h3><p>git push 命令用于将本地分支推送到远程仓库。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push <span class=\"selector-attr\">[remoteName]</span> <span class=\"selector-attr\">[branchName]</span> <span class=\"comment\">// 推送分支</span></span><br><span class=\"line\">git push <span class=\"attr\">--set-upstream</span> <span class=\"selector-attr\">[remoteName]</span> <span class=\"selector-attr\">[branchName]</span> <span class=\"comment\">// 推送分支并建立关联关系</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-pull\"><a href=\"#git-pull\" class=\"headerlink\" title=\"git pull\"></a>git pull</h3><p>git pull 命令用于从远程仓库拉取代码并合并到本地当前分支。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull <span class=\"comment\">// 从远程仓库拉取代码合并到本地，等同于 git fetch &amp;&amp; git merge</span></span><br><span class=\"line\">git pull <span class=\"attr\">--rebase</span> <span class=\"comment\">// 使用rebase的模式进行合并</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-fetch\"><a href=\"#git-fetch\" class=\"headerlink\" title=\"git fetch\"></a>git fetch</h3><p>git fetch 命令用于从远程获取代码库。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch <span class=\"comment\">// 从所有远程仓库拉取当前分支代码</span></span><br><span class=\"line\">git fetch <span class=\"selector-attr\">[remoteName]</span> <span class=\"comment\">// 从指定远程仓库拉取当前分支代码</span></span><br><span class=\"line\">git fetch <span class=\"attr\">--all</span> <span class=\"comment\">// 获取所有远程仓库所有分支的更新</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-cherry-pick\"><a href=\"#git-cherry-pick\" class=\"headerlink\" title=\"git cherry-pick\"></a>git cherry-pick</h3><p>git cherry-pick 命令用于获取指定的 commit，可以将分支 a 上的 commit 1，复制到分支 b上。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">cherry-pick</span> <span class=\"selector-attr\">[commitId]</span> <span class=\"comment\">// 获取指定的commit</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-merge\"><a href=\"#git-merge\" class=\"headerlink\" title=\"git merge\"></a>git merge</h3><p>git merge 命令用于分支合并，将其他分支的内容合并到当前分支中。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge <span class=\"selector-attr\">[branchName]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b182abe7c54161959596eb5b140299~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"img\"></p>\n<h3 id=\"git-rebase\"><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h3><p>git rebase 用于分支变基。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase master <span class=\"comment\">// 将当前分支变基到 master 分支上</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdee372fa7654715ba5e2538b562edef~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>git rebase -i 交互模式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -<span class=\"selector-tag\">i</span> <span class=\"selector-attr\">[commitId]</span> // 基于 commitId 进行 rebase，交互式变基，可以重新编辑 commit，比如压缩合并</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f45211ea91014b459befe44034917aac~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<h3 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h3><p>git reset 命令用于回退版本，可以指定退回某一次提交的版本。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD^ <span class=\"comment\">// 回退所有内容到上一个版本</span></span><br><span class=\"line\">git reset HEAD^ <span class=\"selector-attr\">[filename]</span> <span class=\"comment\">// 回退某文件到上一个版本</span></span><br><span class=\"line\">git reset <span class=\"selector-attr\">[commitId]</span> <span class=\"comment\">// 回退所有内容到指定版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset <span class=\"attr\">--soft</span> HEAD~<span class=\"number\">1</span> <span class=\"comment\">// 回退本地仓库到上一个版本</span></span><br><span class=\"line\">git reset <span class=\"attr\">--hard</span> HEAD~<span class=\"number\">1</span> <span class=\"comment\">// 回退本地仓库到上一个版本，并删除工作区所有未提交的修改内容</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h3><p>git revert 指令用于回滚提交，可以回滚某一次提交记录。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">revert</span> <span class=\"selector-attr\">[commitId]</span> <span class=\"comment\">// 回滚某次提交</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">revert</span> <span class=\"selector-attr\">[commitId]</span> <span class=\"selector-tag\">-m</span> <span class=\"number\">1</span> <span class=\"comment\">// 回滚某次 merge 的 commit，1 代表保留主分支代码</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h3><p>git stash 用于暂存文件。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash <span class=\"comment\">// 暂存文件</span></span><br><span class=\"line\">git stash save <span class=\"string\">&#x27;aa&#x27;</span> <span class=\"comment\">// 暂存文件，添加备注</span></span><br><span class=\"line\">git stash pop <span class=\"comment\">// 应用最近一次暂存文件，并删除暂存记录</span></span><br><span class=\"line\">git stash apply <span class=\"comment\">// 应用最近一次暂存，但不删除该暂存记录</span></span><br><span class=\"line\">git stash apply stash@&#123;第几次暂存的代码，例如<span class=\"number\">0</span>&#125; <span class=\"comment\">// 应用某一次暂存，但不删除该暂存记录；</span></span><br><span class=\"line\">git stash list <span class=\"comment\">// 暂存记录</span></span><br><span class=\"line\">git stash clear <span class=\"comment\">// 删除所有暂存记录</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h3><p>git reflog 记录了所有的 commit 操作记录，便于错误操作后找回。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-rm\"><a href=\"#git-rm\" class=\"headerlink\" title=\"git rm\"></a>git rm</h3><p>git rm 用于从 git 仓库删除指定文件或目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> [filname]</span><br><span class=\"line\">git <span class=\"built_in\">rm</span> [<span class=\"built_in\">dir</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h3><p>git log 命令用于查看 git commit 记录。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> <span class=\"comment\">// 查看所有 commit 记录</span></span><br><span class=\"line\">git  <span class=\"built_in\">log</span>  --grep  瀑布流 <span class=\"comment\">// 搜索 commit msg 有瀑布流关键字的 记录</span></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Git-常用命令：\"><a href=\"#Git-常用命令：\" class=\"headerlink\" title=\"Git 常用命令：\"></a>Git 常用命令：</h1><ul>\n<li>工作区：指在本地仓库中的全部代码区域；</li>\n<li>暂存区：指在本地仓库中通过 git add 后的代码区域；</li>\n<li>本地仓库：指在本地仓库中的 git commit 后的代码区域；</li>\n<li>远程仓库：远程仓库指的托管代码的服务器。</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be9dbaf612d145d1890de71f4a57829a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><p>git clone 命令用于将存储库克隆到本地。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">clone</span> <span class=\"selector-attr\">[url]</span> <span class=\"comment\">// 将存储库克隆到本地</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h3><p><strong>git init 命令用于在目录中创建新的 Git 仓库。</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- git <span class=\"keyword\">init</span> <span class=\"comment\">// 创建新的 Git 仓库，在当前路径下生成 .git 目录</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h3><p>git remote 用于管理跟踪远程仓库。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v <span class=\"comment\">// 查看连接的远程仓库地址</span></span><br><span class=\"line\">git remote <span class=\"keyword\">add</span> origin [gitUrl] <span class=\"comment\">// 为本地仓库添加远程仓库地址</span></span><br><span class=\"line\">git push -u origin master <span class=\"comment\">// 将本地仓库的master和远程仓库的master进行关联</span></span><br><span class=\"line\">git remote origin <span class=\"keyword\">set</span>-url [gitUrl] <span class=\"comment\">// 为本地仓库修改远程仓库地址</span></span><br><span class=\"line\">git remote rm origin <span class=\"comment\">// 为本地仓库删除远程仓库连接</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h3><p>git checkout 命令用于切换分支。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">checkout</span> <span class=\"selector-attr\">[branchName]</span> <span class=\"comment\">// 切换分支</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">checkout</span> <span class=\"selector-tag\">-b</span> <span class=\"selector-attr\">[branchName]</span> <span class=\"comment\">// 新建分支并切换到该分支</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h3><p>git branch 命令用于查看、创建、删除分支。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">branch</span> <span class=\"comment\">//查看本地分支</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">branch</span> <span class=\"selector-tag\">-r</span> <span class=\"comment\">//查看远程分支</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">branch</span> <span class=\"selector-tag\">-a</span> <span class=\"comment\">//查看本地和远程分支</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">branch</span> <span class=\"selector-attr\">[branchName]</span> <span class=\"comment\">//新建本地分支但不切换</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">branch</span> <span class=\"selector-tag\">-D</span> <span class=\"selector-attr\">[branchName]</span> <span class=\"comment\">//删除本地分支</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">branch</span> <span class=\"selector-tag\">-m</span> <span class=\"selector-attr\">[oldBranchName]</span> <span class=\"selector-attr\">[newBranchName]</span> <span class=\"comment\">//重新命名分支</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h3><p>git tag 用于创建、删除、查看标签。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">tag</span> <span class=\"selector-attr\">[tagName]</span> <span class=\"comment\">// 新建标签</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">tag</span> <span class=\"comment\">// 查看标签列表</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">tag</span> <span class=\"selector-tag\">-d</span> <span class=\"selector-attr\">[tagName]</span> <span class=\"comment\">// 删除标签</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">push</span> <span class=\"selector-tag\">origin</span> <span class=\"selector-attr\">[tagName]</span> <span class=\"comment\">// 推送标签到远程仓库</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h3><p><strong>git add</strong> 命令用于将本地文件添加到暂存区。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">add</span> [file1] [file2] <span class=\"comment\">// 添加指定文件至暂存区</span></span><br><span class=\"line\">git <span class=\"keyword\">add</span> [dir] <span class=\"comment\">// 添加指定目录至暂存区</span></span><br><span class=\"line\">git <span class=\"keyword\">add</span> . <span class=\"comment\">// 添加当前目录下所有文件至暂存区</span></span><br><span class=\"line\">git <span class=\"keyword\">add</span> -A <span class=\"comment\">// 添加当前仓库下的所有文件改动至暂存区</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p>git commit 命令用于将暂存区内容添加到本地仓库中。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"comment\">// 将暂存区文件添加到本地仓库，并记录下备注</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;xxx&#x27;</span> -n <span class=\"comment\">// 将暂存区文件添加到本地仓库，并记录下备注，同时跳过 husky hooks 设置的规则校验</span></span><br><span class=\"line\">git commit -am <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"comment\">// 将文件添加到暂存区，再添加到本地仓库，并记录下备注</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h3><p>git push 命令用于将本地分支推送到远程仓库。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push <span class=\"selector-attr\">[remoteName]</span> <span class=\"selector-attr\">[branchName]</span> <span class=\"comment\">// 推送分支</span></span><br><span class=\"line\">git push <span class=\"attr\">--set-upstream</span> <span class=\"selector-attr\">[remoteName]</span> <span class=\"selector-attr\">[branchName]</span> <span class=\"comment\">// 推送分支并建立关联关系</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-pull\"><a href=\"#git-pull\" class=\"headerlink\" title=\"git pull\"></a>git pull</h3><p>git pull 命令用于从远程仓库拉取代码并合并到本地当前分支。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull <span class=\"comment\">// 从远程仓库拉取代码合并到本地，等同于 git fetch &amp;&amp; git merge</span></span><br><span class=\"line\">git pull <span class=\"attr\">--rebase</span> <span class=\"comment\">// 使用rebase的模式进行合并</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-fetch\"><a href=\"#git-fetch\" class=\"headerlink\" title=\"git fetch\"></a>git fetch</h3><p>git fetch 命令用于从远程获取代码库。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch <span class=\"comment\">// 从所有远程仓库拉取当前分支代码</span></span><br><span class=\"line\">git fetch <span class=\"selector-attr\">[remoteName]</span> <span class=\"comment\">// 从指定远程仓库拉取当前分支代码</span></span><br><span class=\"line\">git fetch <span class=\"attr\">--all</span> <span class=\"comment\">// 获取所有远程仓库所有分支的更新</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-cherry-pick\"><a href=\"#git-cherry-pick\" class=\"headerlink\" title=\"git cherry-pick\"></a>git cherry-pick</h3><p>git cherry-pick 命令用于获取指定的 commit，可以将分支 a 上的 commit 1，复制到分支 b上。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">cherry-pick</span> <span class=\"selector-attr\">[commitId]</span> <span class=\"comment\">// 获取指定的commit</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-merge\"><a href=\"#git-merge\" class=\"headerlink\" title=\"git merge\"></a>git merge</h3><p>git merge 命令用于分支合并，将其他分支的内容合并到当前分支中。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge <span class=\"selector-attr\">[branchName]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b182abe7c54161959596eb5b140299~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"img\"></p>\n<h3 id=\"git-rebase\"><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h3><p>git rebase 用于分支变基。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase master <span class=\"comment\">// 将当前分支变基到 master 分支上</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdee372fa7654715ba5e2538b562edef~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>git rebase -i 交互模式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -<span class=\"selector-tag\">i</span> <span class=\"selector-attr\">[commitId]</span> // 基于 commitId 进行 rebase，交互式变基，可以重新编辑 commit，比如压缩合并</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f45211ea91014b459befe44034917aac~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<h3 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h3><p>git reset 命令用于回退版本，可以指定退回某一次提交的版本。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD^ <span class=\"comment\">// 回退所有内容到上一个版本</span></span><br><span class=\"line\">git reset HEAD^ <span class=\"selector-attr\">[filename]</span> <span class=\"comment\">// 回退某文件到上一个版本</span></span><br><span class=\"line\">git reset <span class=\"selector-attr\">[commitId]</span> <span class=\"comment\">// 回退所有内容到指定版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset <span class=\"attr\">--soft</span> HEAD~<span class=\"number\">1</span> <span class=\"comment\">// 回退本地仓库到上一个版本</span></span><br><span class=\"line\">git reset <span class=\"attr\">--hard</span> HEAD~<span class=\"number\">1</span> <span class=\"comment\">// 回退本地仓库到上一个版本，并删除工作区所有未提交的修改内容</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h3><p>git revert 指令用于回滚提交，可以回滚某一次提交记录。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">revert</span> <span class=\"selector-attr\">[commitId]</span> <span class=\"comment\">// 回滚某次提交</span></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">revert</span> <span class=\"selector-attr\">[commitId]</span> <span class=\"selector-tag\">-m</span> <span class=\"number\">1</span> <span class=\"comment\">// 回滚某次 merge 的 commit，1 代表保留主分支代码</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h3><p>git stash 用于暂存文件。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash <span class=\"comment\">// 暂存文件</span></span><br><span class=\"line\">git stash save <span class=\"string\">&#x27;aa&#x27;</span> <span class=\"comment\">// 暂存文件，添加备注</span></span><br><span class=\"line\">git stash pop <span class=\"comment\">// 应用最近一次暂存文件，并删除暂存记录</span></span><br><span class=\"line\">git stash apply <span class=\"comment\">// 应用最近一次暂存，但不删除该暂存记录</span></span><br><span class=\"line\">git stash apply stash@&#123;第几次暂存的代码，例如<span class=\"number\">0</span>&#125; <span class=\"comment\">// 应用某一次暂存，但不删除该暂存记录；</span></span><br><span class=\"line\">git stash list <span class=\"comment\">// 暂存记录</span></span><br><span class=\"line\">git stash clear <span class=\"comment\">// 删除所有暂存记录</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h3><p>git reflog 记录了所有的 commit 操作记录，便于错误操作后找回。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-rm\"><a href=\"#git-rm\" class=\"headerlink\" title=\"git rm\"></a>git rm</h3><p>git rm 用于从 git 仓库删除指定文件或目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> [filname]</span><br><span class=\"line\">git <span class=\"built_in\">rm</span> [<span class=\"built_in\">dir</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h3><p>git log 命令用于查看 git commit 记录。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> <span class=\"comment\">// 查看所有 commit 记录</span></span><br><span class=\"line\">git  <span class=\"built_in\">log</span>  --grep  瀑布流 <span class=\"comment\">// 搜索 commit msg 有瀑布流关键字的 记录</span></span><br></pre></td></tr></table></figure>\n\n\n\n"},{"_content":"# lambda表达式总结（集合操作）\n\n## 1.集合的排序\n\n```java\nComparator<Hero> comparator=new Comparator<Hero>() {\n    @Override\n    public int compare(Hero o1, Hero o2) {\n        return o1.getHp()-o2.getHp();\n    }\n};\n```\n\n先写一个comparator,根据age排序\n\n然后调用\n\n```java\nList<Hero> sortHeroList=heroList.stream().sorted(comparator).collect(Collectors.toList());\n```\n\n## 2.最大最小值的属性以及具体元素\n\n```java\nHero maxAgeHero=heroList.stream().max(comparator).get();\n```\n\n## 3.去重\n\n### 一般去重\n\n```java\nList<Hero> heroeDistinct=heroList.stream().distinct().collect(Collectors.toList());\n```\n\n## 4.求和\n\n### 一般求和\n\n```java\nint sum=heroList.stream().mapToInt(Hero::getHp).sum();\n```\n\n大数类求和\n\n```java\nBigDecimal totalQuantity = bigDecimalList.stream().map(Hero::getHp).reduce(BigDecimal.ZERO,BigDecimal::add);\n```\n\n## 5.分组\n\n根据某个属性分组并且转成Map<String,List<Hero>>\n\n```java\nMap<String,List<Hero>> groupMap=heroList.stream().collect(Collectors.groupingBy(Hero::getSex));\n```\n\n## 6.list转为map\n\n```java\n//list转为map,如果重复，则取k1的值\nMap<Integer,Hero> heroMap=heroList.stream().collect(Collectors.toMap(Hero::getHp,a->a,(k1,k2)->k1));\n```\n\n## 7. 新的list\n\n```java\n//获取某个值转为新的list\nList<Integer> heroAgeList=heroList.stream().map(a->a.getHp()).collect(Collectors.toList());\n```\n\n## 8.过滤\n\n```java\nList<Hero> heroList1=heroList.stream().filter(hero -> hero.getHp()<300&&hero.getHp()>100).collect(Collectors.toList());\n```\n\n## 总结\n\n表达式主要分为中间过程和结束操作\n\n### 零个或多个中间操作： 每个中间操作会返回一个流，如filter,中间操作时懒操作，不会真正遍历\n\n​     中间操作有很多种，主要分为两种：\n\n​     1.**对元素进行筛选**：filter（匹配），distinct（去除重复）,sorted（自然排序）\n\n​                     sorted(Comparator)（指定排序），limit（保留），skip（忽略）\n\n​     2.**转为其他形式的流**：mapToDouble（转为double的流）, map（转换为任意类型的流）\n\n \n\n### 结束操作： 例如forEach，会返回非流结果，例如基本类型的值（int,float,double）、对象或者集合，或者在终端操作为forEach的情况下没有返回值。\n\n​     结束操作时才真正进行遍历行为，前面的中间操作也在这个时候真正的执行。\n\n​     常见的结束操作如下：\n\n​      forEach()（遍历每个元素），toArray()（转换为数组），min(Comparator)（取最小的元素）\n\n​      max(Comparator)（取最大的元素），count()（总数），findFirst()（第一个元素）.get(). \n\n以及Collectors.toList()转为list","source":"_posts/lamdba表达式的运用总结.md","raw":"# lambda表达式总结（集合操作）\n\n## 1.集合的排序\n\n```java\nComparator<Hero> comparator=new Comparator<Hero>() {\n    @Override\n    public int compare(Hero o1, Hero o2) {\n        return o1.getHp()-o2.getHp();\n    }\n};\n```\n\n先写一个comparator,根据age排序\n\n然后调用\n\n```java\nList<Hero> sortHeroList=heroList.stream().sorted(comparator).collect(Collectors.toList());\n```\n\n## 2.最大最小值的属性以及具体元素\n\n```java\nHero maxAgeHero=heroList.stream().max(comparator).get();\n```\n\n## 3.去重\n\n### 一般去重\n\n```java\nList<Hero> heroeDistinct=heroList.stream().distinct().collect(Collectors.toList());\n```\n\n## 4.求和\n\n### 一般求和\n\n```java\nint sum=heroList.stream().mapToInt(Hero::getHp).sum();\n```\n\n大数类求和\n\n```java\nBigDecimal totalQuantity = bigDecimalList.stream().map(Hero::getHp).reduce(BigDecimal.ZERO,BigDecimal::add);\n```\n\n## 5.分组\n\n根据某个属性分组并且转成Map<String,List<Hero>>\n\n```java\nMap<String,List<Hero>> groupMap=heroList.stream().collect(Collectors.groupingBy(Hero::getSex));\n```\n\n## 6.list转为map\n\n```java\n//list转为map,如果重复，则取k1的值\nMap<Integer,Hero> heroMap=heroList.stream().collect(Collectors.toMap(Hero::getHp,a->a,(k1,k2)->k1));\n```\n\n## 7. 新的list\n\n```java\n//获取某个值转为新的list\nList<Integer> heroAgeList=heroList.stream().map(a->a.getHp()).collect(Collectors.toList());\n```\n\n## 8.过滤\n\n```java\nList<Hero> heroList1=heroList.stream().filter(hero -> hero.getHp()<300&&hero.getHp()>100).collect(Collectors.toList());\n```\n\n## 总结\n\n表达式主要分为中间过程和结束操作\n\n### 零个或多个中间操作： 每个中间操作会返回一个流，如filter,中间操作时懒操作，不会真正遍历\n\n​     中间操作有很多种，主要分为两种：\n\n​     1.**对元素进行筛选**：filter（匹配），distinct（去除重复）,sorted（自然排序）\n\n​                     sorted(Comparator)（指定排序），limit（保留），skip（忽略）\n\n​     2.**转为其他形式的流**：mapToDouble（转为double的流）, map（转换为任意类型的流）\n\n \n\n### 结束操作： 例如forEach，会返回非流结果，例如基本类型的值（int,float,double）、对象或者集合，或者在终端操作为forEach的情况下没有返回值。\n\n​     结束操作时才真正进行遍历行为，前面的中间操作也在这个时候真正的执行。\n\n​     常见的结束操作如下：\n\n​      forEach()（遍历每个元素），toArray()（转换为数组），min(Comparator)（取最小的元素）\n\n​      max(Comparator)（取最大的元素），count()（总数），findFirst()（第一个元素）.get(). \n\n以及Collectors.toList()转为list","slug":"lamdba表达式的运用总结","published":1,"date":"2022-08-26T06:22:39.859Z","updated":"2022-08-26T06:40:21.434Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vd000061kua2yox7pqm","content":"<h1 id=\"lambda表达式总结（集合操作）\"><a href=\"#lambda表达式总结（集合操作）\" class=\"headerlink\" title=\"lambda表达式总结（集合操作）\"></a>lambda表达式总结（集合操作）</h1><h2 id=\"1-集合的排序\"><a href=\"#1-集合的排序\" class=\"headerlink\" title=\"1.集合的排序\"></a>1.集合的排序</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Comparator&lt;Hero&gt; comparator=<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Hero&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Hero o1, Hero o2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o1.getHp()-o2.getHp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>先写一个comparator,根据age排序</p>\n<p>然后调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Hero&gt; sortHeroList=heroList.stream().sorted(comparator).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-最大最小值的属性以及具体元素\"><a href=\"#2-最大最小值的属性以及具体元素\" class=\"headerlink\" title=\"2.最大最小值的属性以及具体元素\"></a>2.最大最小值的属性以及具体元素</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hero maxAgeHero=heroList.stream().max(comparator).get();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-去重\"><a href=\"#3-去重\" class=\"headerlink\" title=\"3.去重\"></a>3.去重</h2><h3 id=\"一般去重\"><a href=\"#一般去重\" class=\"headerlink\" title=\"一般去重\"></a>一般去重</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Hero&gt; heroeDistinct=heroList.stream().distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-求和\"><a href=\"#4-求和\" class=\"headerlink\" title=\"4.求和\"></a>4.求和</h2><h3 id=\"一般求和\"><a href=\"#一般求和\" class=\"headerlink\" title=\"一般求和\"></a>一般求和</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> sum=heroList.stream().mapToInt(Hero::getHp).sum();</span><br></pre></td></tr></table></figure>\n\n<p>大数类求和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">totalQuantity</span> <span class=\"operator\">=</span> bigDecimalList.stream().map(Hero::getHp).reduce(BigDecimal.ZERO,BigDecimal::add);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-分组\"><a href=\"#5-分组\" class=\"headerlink\" title=\"5.分组\"></a>5.分组</h2><p>根据某个属性分组并且转成Map&lt;String,List<Hero>&gt;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String,List&lt;Hero&gt;&gt; groupMap=heroList.stream().collect(Collectors.groupingBy(Hero::getSex));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-list转为map\"><a href=\"#6-list转为map\" class=\"headerlink\" title=\"6.list转为map\"></a>6.list转为map</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//list转为map,如果重复，则取k1的值</span></span><br><span class=\"line\">Map&lt;Integer,Hero&gt; heroMap=heroList.stream().collect(Collectors.toMap(Hero::getHp,a-&gt;a,(k1,k2)-&gt;k1));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-新的list\"><a href=\"#7-新的list\" class=\"headerlink\" title=\"7. 新的list\"></a>7. 新的list</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取某个值转为新的list</span></span><br><span class=\"line\">List&lt;Integer&gt; heroAgeList=heroList.stream().map(a-&gt;a.getHp()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-过滤\"><a href=\"#8-过滤\" class=\"headerlink\" title=\"8.过滤\"></a>8.过滤</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Hero&gt; heroList1=heroList.stream().filter(hero -&gt; hero.getHp()&lt;<span class=\"number\">300</span>&amp;&amp;hero.getHp()&gt;<span class=\"number\">100</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>表达式主要分为中间过程和结束操作</p>\n<h3 id=\"零个或多个中间操作：-每个中间操作会返回一个流，如filter-中间操作时懒操作，不会真正遍历\"><a href=\"#零个或多个中间操作：-每个中间操作会返回一个流，如filter-中间操作时懒操作，不会真正遍历\" class=\"headerlink\" title=\"零个或多个中间操作： 每个中间操作会返回一个流，如filter,中间操作时懒操作，不会真正遍历\"></a>零个或多个中间操作： 每个中间操作会返回一个流，如filter,中间操作时懒操作，不会真正遍历</h3><p>​     中间操作有很多种，主要分为两种：</p>\n<p>​     1.<strong>对元素进行筛选</strong>：filter（匹配），distinct（去除重复）,sorted（自然排序）</p>\n<p>​                     sorted(Comparator)（指定排序），limit（保留），skip（忽略）</p>\n<p>​     2.<strong>转为其他形式的流</strong>：mapToDouble（转为double的流）, map（转换为任意类型的流）</p>\n<h3 id=\"结束操作：-例如forEach，会返回非流结果，例如基本类型的值（int-float-double）、对象或者集合，或者在终端操作为forEach的情况下没有返回值。\"><a href=\"#结束操作：-例如forEach，会返回非流结果，例如基本类型的值（int-float-double）、对象或者集合，或者在终端操作为forEach的情况下没有返回值。\" class=\"headerlink\" title=\"结束操作： 例如forEach，会返回非流结果，例如基本类型的值（int,float,double）、对象或者集合，或者在终端操作为forEach的情况下没有返回值。\"></a>结束操作： 例如forEach，会返回非流结果，例如基本类型的值（int,float,double）、对象或者集合，或者在终端操作为forEach的情况下没有返回值。</h3><p>​     结束操作时才真正进行遍历行为，前面的中间操作也在这个时候真正的执行。</p>\n<p>​     常见的结束操作如下：</p>\n<p>​      forEach()（遍历每个元素），toArray()（转换为数组），min(Comparator)（取最小的元素）</p>\n<p>​      max(Comparator)（取最大的元素），count()（总数），findFirst()（第一个元素）.get(). </p>\n<p>以及Collectors.toList()转为list</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"lambda表达式总结（集合操作）\"><a href=\"#lambda表达式总结（集合操作）\" class=\"headerlink\" title=\"lambda表达式总结（集合操作）\"></a>lambda表达式总结（集合操作）</h1><h2 id=\"1-集合的排序\"><a href=\"#1-集合的排序\" class=\"headerlink\" title=\"1.集合的排序\"></a>1.集合的排序</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Comparator&lt;Hero&gt; comparator=<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Hero&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Hero o1, Hero o2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o1.getHp()-o2.getHp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>先写一个comparator,根据age排序</p>\n<p>然后调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Hero&gt; sortHeroList=heroList.stream().sorted(comparator).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-最大最小值的属性以及具体元素\"><a href=\"#2-最大最小值的属性以及具体元素\" class=\"headerlink\" title=\"2.最大最小值的属性以及具体元素\"></a>2.最大最小值的属性以及具体元素</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hero maxAgeHero=heroList.stream().max(comparator).get();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-去重\"><a href=\"#3-去重\" class=\"headerlink\" title=\"3.去重\"></a>3.去重</h2><h3 id=\"一般去重\"><a href=\"#一般去重\" class=\"headerlink\" title=\"一般去重\"></a>一般去重</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Hero&gt; heroeDistinct=heroList.stream().distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-求和\"><a href=\"#4-求和\" class=\"headerlink\" title=\"4.求和\"></a>4.求和</h2><h3 id=\"一般求和\"><a href=\"#一般求和\" class=\"headerlink\" title=\"一般求和\"></a>一般求和</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> sum=heroList.stream().mapToInt(Hero::getHp).sum();</span><br></pre></td></tr></table></figure>\n\n<p>大数类求和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">totalQuantity</span> <span class=\"operator\">=</span> bigDecimalList.stream().map(Hero::getHp).reduce(BigDecimal.ZERO,BigDecimal::add);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-分组\"><a href=\"#5-分组\" class=\"headerlink\" title=\"5.分组\"></a>5.分组</h2><p>根据某个属性分组并且转成Map&lt;String,List<Hero>&gt;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String,List&lt;Hero&gt;&gt; groupMap=heroList.stream().collect(Collectors.groupingBy(Hero::getSex));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-list转为map\"><a href=\"#6-list转为map\" class=\"headerlink\" title=\"6.list转为map\"></a>6.list转为map</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//list转为map,如果重复，则取k1的值</span></span><br><span class=\"line\">Map&lt;Integer,Hero&gt; heroMap=heroList.stream().collect(Collectors.toMap(Hero::getHp,a-&gt;a,(k1,k2)-&gt;k1));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-新的list\"><a href=\"#7-新的list\" class=\"headerlink\" title=\"7. 新的list\"></a>7. 新的list</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取某个值转为新的list</span></span><br><span class=\"line\">List&lt;Integer&gt; heroAgeList=heroList.stream().map(a-&gt;a.getHp()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-过滤\"><a href=\"#8-过滤\" class=\"headerlink\" title=\"8.过滤\"></a>8.过滤</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Hero&gt; heroList1=heroList.stream().filter(hero -&gt; hero.getHp()&lt;<span class=\"number\">300</span>&amp;&amp;hero.getHp()&gt;<span class=\"number\">100</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>表达式主要分为中间过程和结束操作</p>\n<h3 id=\"零个或多个中间操作：-每个中间操作会返回一个流，如filter-中间操作时懒操作，不会真正遍历\"><a href=\"#零个或多个中间操作：-每个中间操作会返回一个流，如filter-中间操作时懒操作，不会真正遍历\" class=\"headerlink\" title=\"零个或多个中间操作： 每个中间操作会返回一个流，如filter,中间操作时懒操作，不会真正遍历\"></a>零个或多个中间操作： 每个中间操作会返回一个流，如filter,中间操作时懒操作，不会真正遍历</h3><p>​     中间操作有很多种，主要分为两种：</p>\n<p>​     1.<strong>对元素进行筛选</strong>：filter（匹配），distinct（去除重复）,sorted（自然排序）</p>\n<p>​                     sorted(Comparator)（指定排序），limit（保留），skip（忽略）</p>\n<p>​     2.<strong>转为其他形式的流</strong>：mapToDouble（转为double的流）, map（转换为任意类型的流）</p>\n<h3 id=\"结束操作：-例如forEach，会返回非流结果，例如基本类型的值（int-float-double）、对象或者集合，或者在终端操作为forEach的情况下没有返回值。\"><a href=\"#结束操作：-例如forEach，会返回非流结果，例如基本类型的值（int-float-double）、对象或者集合，或者在终端操作为forEach的情况下没有返回值。\" class=\"headerlink\" title=\"结束操作： 例如forEach，会返回非流结果，例如基本类型的值（int,float,double）、对象或者集合，或者在终端操作为forEach的情况下没有返回值。\"></a>结束操作： 例如forEach，会返回非流结果，例如基本类型的值（int,float,double）、对象或者集合，或者在终端操作为forEach的情况下没有返回值。</h3><p>​     结束操作时才真正进行遍历行为，前面的中间操作也在这个时候真正的执行。</p>\n<p>​     常见的结束操作如下：</p>\n<p>​      forEach()（遍历每个元素），toArray()（转换为数组），min(Comparator)（取最小的元素）</p>\n<p>​      max(Comparator)（取最大的元素），count()（总数），findFirst()（第一个元素）.get(). </p>\n<p>以及Collectors.toList()转为list</p>\n"},{"_content":"## token的个人总结\n\n#### token的组成\n\n1.header 元数据，定义token的类型和加密算法\n\n2.payload token的具体数据，比如userid就是放在payload中\n\n3.sign 签名 服务器通过`Payload`、`Header`和一个密钥(`secret`)使用 `Header` 里面指定的签名算法（默认是 HMAC SHA256）生成。\n\n### 生成token方法\n\n调用 jwt.creat()方法生成，具体如下，先用SHA256算法将sercret加密，放入sign中，将userid放入payload中，定义header的加密算法和token类型\n\n![](images/220708-1.png)\n\n### 解析token方法，并获取userid\n\n主要是先根据sign获取到JWTVerifier对象，再获取DecodeJwt对象，最后将payload中uerid取出\n\n![](images/220708-2.png)\n\n总之，token是根据签名的加密算法生成sign，再根据sign反解析得到JWTVerifier，并可以把userid放入clamims中\n\n### token的一些好处\n\n1.无状态\n\n2.有效避免了CSRF 攻击（大部分情况下存放在 local storage ）\n\n","source":"_posts/token的一点个人总结.md","raw":"## token的个人总结\n\n#### token的组成\n\n1.header 元数据，定义token的类型和加密算法\n\n2.payload token的具体数据，比如userid就是放在payload中\n\n3.sign 签名 服务器通过`Payload`、`Header`和一个密钥(`secret`)使用 `Header` 里面指定的签名算法（默认是 HMAC SHA256）生成。\n\n### 生成token方法\n\n调用 jwt.creat()方法生成，具体如下，先用SHA256算法将sercret加密，放入sign中，将userid放入payload中，定义header的加密算法和token类型\n\n![](images/220708-1.png)\n\n### 解析token方法，并获取userid\n\n主要是先根据sign获取到JWTVerifier对象，再获取DecodeJwt对象，最后将payload中uerid取出\n\n![](images/220708-2.png)\n\n总之，token是根据签名的加密算法生成sign，再根据sign反解析得到JWTVerifier，并可以把userid放入clamims中\n\n### token的一些好处\n\n1.无状态\n\n2.有效避免了CSRF 攻击（大部分情况下存放在 local storage ）\n\n","slug":"token的一点个人总结","published":1,"date":"2022-07-08T15:12:08.053Z","updated":"2022-07-08T15:33:28.646Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vd100071kuabscihkk2","content":"<h2 id=\"token的个人总结\"><a href=\"#token的个人总结\" class=\"headerlink\" title=\"token的个人总结\"></a>token的个人总结</h2><h4 id=\"token的组成\"><a href=\"#token的组成\" class=\"headerlink\" title=\"token的组成\"></a>token的组成</h4><p>1.header 元数据，定义token的类型和加密算法</p>\n<p>2.payload token的具体数据，比如userid就是放在payload中</p>\n<p>3.sign 签名 服务器通过<code>Payload</code>、<code>Header</code>和一个密钥(<code>secret</code>)使用 <code>Header</code> 里面指定的签名算法（默认是 HMAC SHA256）生成。</p>\n<h3 id=\"生成token方法\"><a href=\"#生成token方法\" class=\"headerlink\" title=\"生成token方法\"></a>生成token方法</h3><p>调用 jwt.creat()方法生成，具体如下，先用SHA256算法将sercret加密，放入sign中，将userid放入payload中，定义header的加密算法和token类型</p>\n<p><img src=\"images/220708-1.png\"></p>\n<h3 id=\"解析token方法，并获取userid\"><a href=\"#解析token方法，并获取userid\" class=\"headerlink\" title=\"解析token方法，并获取userid\"></a>解析token方法，并获取userid</h3><p>主要是先根据sign获取到JWTVerifier对象，再获取DecodeJwt对象，最后将payload中uerid取出</p>\n<p><img src=\"images/220708-2.png\"></p>\n<p>总之，token是根据签名的加密算法生成sign，再根据sign反解析得到JWTVerifier，并可以把userid放入clamims中</p>\n<h3 id=\"token的一些好处\"><a href=\"#token的一些好处\" class=\"headerlink\" title=\"token的一些好处\"></a>token的一些好处</h3><p>1.无状态</p>\n<p>2.有效避免了CSRF 攻击（大部分情况下存放在 local storage ）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"token的个人总结\"><a href=\"#token的个人总结\" class=\"headerlink\" title=\"token的个人总结\"></a>token的个人总结</h2><h4 id=\"token的组成\"><a href=\"#token的组成\" class=\"headerlink\" title=\"token的组成\"></a>token的组成</h4><p>1.header 元数据，定义token的类型和加密算法</p>\n<p>2.payload token的具体数据，比如userid就是放在payload中</p>\n<p>3.sign 签名 服务器通过<code>Payload</code>、<code>Header</code>和一个密钥(<code>secret</code>)使用 <code>Header</code> 里面指定的签名算法（默认是 HMAC SHA256）生成。</p>\n<h3 id=\"生成token方法\"><a href=\"#生成token方法\" class=\"headerlink\" title=\"生成token方法\"></a>生成token方法</h3><p>调用 jwt.creat()方法生成，具体如下，先用SHA256算法将sercret加密，放入sign中，将userid放入payload中，定义header的加密算法和token类型</p>\n<p><img src=\"images/220708-1.png\"></p>\n<h3 id=\"解析token方法，并获取userid\"><a href=\"#解析token方法，并获取userid\" class=\"headerlink\" title=\"解析token方法，并获取userid\"></a>解析token方法，并获取userid</h3><p>主要是先根据sign获取到JWTVerifier对象，再获取DecodeJwt对象，最后将payload中uerid取出</p>\n<p><img src=\"images/220708-2.png\"></p>\n<p>总之，token是根据签名的加密算法生成sign，再根据sign反解析得到JWTVerifier，并可以把userid放入clamims中</p>\n<h3 id=\"token的一些好处\"><a href=\"#token的一些好处\" class=\"headerlink\" title=\"token的一些好处\"></a>token的一些好处</h3><p>1.无状态</p>\n<p>2.有效避免了CSRF 攻击（大部分情况下存放在 local storage ）</p>\n"},{"_content":"---\n wms部署\n---\n\n##redis部署\n\n\n```bash\nsetenforce 0\ndocker pull redis\n## 创建目录\nmkdir -p /home/redis/conf\n## 创建文件\ntouch /home/redis/conf/redis.conf\nvim /home/redis/conf/redis.conf\ndocker run --name redis -p 6379:6379 \\\n-v /home/redis/data:/data \\\n-v /home/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-d redis:latest redis-server /etc/redis/redis.conf\n```\n\n###redis配置文件，主要是密码和配置持久化\n```bash\nappendonly yes\nrequirepass zr525010\n```\n\n\n##mysql部署\n```bash\nmkdir -p /root/mysql/data /root/mysql/logs /root/mysql/conf\ntouch /root/mysql/conf/my.cnf\ndocker run \\\n--name mysql \\\n-d \\\n-p 3306:3306 \\\n--restart unless-stopped \\\n-v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=admin \\\nmysql:5.7.37\n\n```\n\n##java部署\n```bash\ntar -zxvf jdk-8u161-linux-x64.tar.gz\nvim /etc/profile\nexport JAVA_HOME=/data/runtime/jdk1.8.0_161\nexport PATH=$PATH:$JAVA_HOME/bin\n#让配置生效\nsource /etc/profile\n```\n\n###启动项目\n```bash\n#启动项目\nnohup java -jar yudao-server.jar \\\n--spring.profiles.active=test \\\n--server.port=8091 \\\n>/dev/null 2>&1 &\n#停止项目\nps -ef | grep yudao-server.jar | grep java | awk '{print $2}' | xargs kill -9\n\n```\n\n##nginx部署\n```bash\nyum install gcc-c++\nyum install -y pcre pcre-devel\nyum install -y zlib zlib-devel\nyum install -y openssl openssl-devel\n#进入官网下载\nnginx.org\ncd /usr/local\nmkdir nginx\ntar -zxvf nginx-1.16.1.tar.gz\ncd /usr/local/nginx\n./configure --prefix=/usr/local/nginx\nmake && make install\n启动nginx\ncd /usr/local/nginx\n./sbin/nginx\n重启\n./sbin/nginx -s reload\n```\n\n###nginx配置文件\n\n```bash\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    gzip on;\n    gzip_min_length 1k;     # 璁剧疆鍏佽鍘嬬缉鐨勯〉闈㈡渶灏忓瓧鑺傛暟\n    gzip_buffers 4 16k;     # 鐢ㄦ潵瀛樺偍 gzip 鐨勫帇缂╃粨鏋\n    gzip_http_version 1.1;  # 璇嗗埆 HTTP 鍗忚鐗堟湰\n    gzip_comp_level 2;      # 璁剧疆 gzip 鐨勫帇缂╂瘮 1-9銆 鍘嬬缉姣旀渶灏忎絾鏈€蹇紝鑰9 鐩稿弽\n    gzip_types gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; # 鎸囧畾鍘嬬缉绫诲瀷\n    gzip_proxied any;       # 鏃犺鍚庣鏈嶅姟鍣ㄧ殑 headers 澶磋繑鍥炰粈涔堜俊鎭紝閮芥棤鏉′欢鍚敤鍘嬬缉\n\n    server {\n        listen       7000;\n        server_name  192.168.2.2; ## 閲嶈锛侊紒锛佷慨鏀规垚浣犵殑澶栫綉 IP/鍩熷悕\n\n        location / { ## 鍓嶇椤圭洰\n            root   /data/project/web/dist;\n            index  index.html index.htm;\n            try_files $uri $uri/ /index.html;\n        }\n         location /proxy-api/ {\n            proxy_pass http://192.168.2.2:8091/;\n         }\n\n\n    }\n\n}\n```\n","source":"_posts/wms部署.md","raw":"---\n wms部署\n---\n\n##redis部署\n\n\n```bash\nsetenforce 0\ndocker pull redis\n## 创建目录\nmkdir -p /home/redis/conf\n## 创建文件\ntouch /home/redis/conf/redis.conf\nvim /home/redis/conf/redis.conf\ndocker run --name redis -p 6379:6379 \\\n-v /home/redis/data:/data \\\n-v /home/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-d redis:latest redis-server /etc/redis/redis.conf\n```\n\n###redis配置文件，主要是密码和配置持久化\n```bash\nappendonly yes\nrequirepass zr525010\n```\n\n\n##mysql部署\n```bash\nmkdir -p /root/mysql/data /root/mysql/logs /root/mysql/conf\ntouch /root/mysql/conf/my.cnf\ndocker run \\\n--name mysql \\\n-d \\\n-p 3306:3306 \\\n--restart unless-stopped \\\n-v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=admin \\\nmysql:5.7.37\n\n```\n\n##java部署\n```bash\ntar -zxvf jdk-8u161-linux-x64.tar.gz\nvim /etc/profile\nexport JAVA_HOME=/data/runtime/jdk1.8.0_161\nexport PATH=$PATH:$JAVA_HOME/bin\n#让配置生效\nsource /etc/profile\n```\n\n###启动项目\n```bash\n#启动项目\nnohup java -jar yudao-server.jar \\\n--spring.profiles.active=test \\\n--server.port=8091 \\\n>/dev/null 2>&1 &\n#停止项目\nps -ef | grep yudao-server.jar | grep java | awk '{print $2}' | xargs kill -9\n\n```\n\n##nginx部署\n```bash\nyum install gcc-c++\nyum install -y pcre pcre-devel\nyum install -y zlib zlib-devel\nyum install -y openssl openssl-devel\n#进入官网下载\nnginx.org\ncd /usr/local\nmkdir nginx\ntar -zxvf nginx-1.16.1.tar.gz\ncd /usr/local/nginx\n./configure --prefix=/usr/local/nginx\nmake && make install\n启动nginx\ncd /usr/local/nginx\n./sbin/nginx\n重启\n./sbin/nginx -s reload\n```\n\n###nginx配置文件\n\n```bash\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    gzip on;\n    gzip_min_length 1k;     # 璁剧疆鍏佽鍘嬬缉鐨勯〉闈㈡渶灏忓瓧鑺傛暟\n    gzip_buffers 4 16k;     # 鐢ㄦ潵瀛樺偍 gzip 鐨勫帇缂╃粨鏋\n    gzip_http_version 1.1;  # 璇嗗埆 HTTP 鍗忚鐗堟湰\n    gzip_comp_level 2;      # 璁剧疆 gzip 鐨勫帇缂╂瘮 1-9銆 鍘嬬缉姣旀渶灏忎絾鏈€蹇紝鑰9 鐩稿弽\n    gzip_types gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; # 鎸囧畾鍘嬬缉绫诲瀷\n    gzip_proxied any;       # 鏃犺鍚庣鏈嶅姟鍣ㄧ殑 headers 澶磋繑鍥炰粈涔堜俊鎭紝閮芥棤鏉′欢鍚敤鍘嬬缉\n\n    server {\n        listen       7000;\n        server_name  192.168.2.2; ## 閲嶈锛侊紒锛佷慨鏀规垚浣犵殑澶栫綉 IP/鍩熷悕\n\n        location / { ## 鍓嶇椤圭洰\n            root   /data/project/web/dist;\n            index  index.html index.htm;\n            try_files $uri $uri/ /index.html;\n        }\n         location /proxy-api/ {\n            proxy_pass http://192.168.2.2:8091/;\n         }\n\n\n    }\n\n}\n```\n","slug":"wms部署","published":1,"date":"2023-04-18T14:59:38.595Z","updated":"2023-04-18T14:59:28.276Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vd100081kuahe3m7f7m","content":"<hr>\n<h2 id=\"wms部署\"><a href=\"#wms部署\" class=\"headerlink\" title=\" wms部署\"></a> wms部署</h2><p>##redis部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setenforce 0</span><br><span class=\"line\">docker pull redis</span><br><span class=\"line\"><span class=\"comment\">## 创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /home/redis/conf</span><br><span class=\"line\"><span class=\"comment\">## 创建文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> /home/redis/conf/redis.conf</span><br><span class=\"line\">vim /home/redis/conf/redis.conf</span><br><span class=\"line\">docker run --name redis -p 6379:6379 \\</span><br><span class=\"line\">-v /home/redis/data:/data \\</span><br><span class=\"line\">-v /home/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-d redis:latest redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n\n<p>###redis配置文件，主要是密码和配置持久化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly <span class=\"built_in\">yes</span></span><br><span class=\"line\">requirepass zr525010</span><br></pre></td></tr></table></figure>\n\n\n<p>##mysql部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /root/mysql/data /root/mysql/logs /root/mysql/conf</span><br><span class=\"line\"><span class=\"built_in\">touch</span> /root/mysql/conf/my.cnf</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">--name mysql \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">-p 3306:3306 \\</span><br><span class=\"line\">--restart unless-stopped \\</span><br><span class=\"line\">-v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=admin \\</span><br><span class=\"line\">mysql:5.7.37</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>##java部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf jdk-8u161-linux-x64.tar.gz</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/data/runtime/jdk1.8.0_161</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br><span class=\"line\"><span class=\"comment\">#让配置生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>###启动项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#启动项目</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar yudao-server.jar \\</span><br><span class=\"line\">--spring.profiles.active=<span class=\"built_in\">test</span> \\</span><br><span class=\"line\">--server.port=8091 \\</span><br><span class=\"line\">&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"comment\">#停止项目</span></span><br><span class=\"line\">ps -ef | grep yudao-server.jar | grep java | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class=\"built_in\">kill</span> -9</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>##nginx部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc-c++</span><br><span class=\"line\">yum install -y pcre pcre-devel</span><br><span class=\"line\">yum install -y zlib zlib-devel</span><br><span class=\"line\">yum install -y openssl openssl-devel</span><br><span class=\"line\"><span class=\"comment\">#进入官网下载</span></span><br><span class=\"line\">nginx.org</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> nginx</span><br><span class=\"line\">tar -zxvf nginx-1.16.1.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">启动nginx</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx</span><br><span class=\"line\">./sbin/nginx</span><br><span class=\"line\">重启</span><br><span class=\"line\">./sbin/nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>###nginx配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;     <span class=\"comment\"># 璁剧疆鍏佽鍘嬬缉鐨勯〉闈㈡渶灏忓瓧鑺傛暟</span></span><br><span class=\"line\">    gzip_buffers 4 16k;     <span class=\"comment\"># 鐢ㄦ潵瀛樺偍 gzip 鐨勫帇缂╃粨鏋</span></span><br><span class=\"line\">    gzip_http_version 1.1;  <span class=\"comment\"># 璇嗗埆 HTTP 鍗忚鐗堟湰</span></span><br><span class=\"line\">    gzip_comp_level 2;      <span class=\"comment\"># 璁剧疆 gzip 鐨勫帇缂╂瘮 1-9銆 鍘嬬缉姣旀渶灏忎絾鏈€蹇紝鑰9 鐩稿弽</span></span><br><span class=\"line\">    gzip_types gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; <span class=\"comment\"># 鎸囧畾鍘嬬缉绫诲瀷</span></span><br><span class=\"line\">    gzip_proxied any;       <span class=\"comment\"># 鏃犺鍚庣鏈嶅姟鍣ㄧ殑 headers 澶磋繑鍥炰粈涔堜俊鎭紝閮芥棤鏉′欢鍚敤鍘嬬缉</span></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       7000;</span><br><span class=\"line\">        server_name  192.168.2.2; <span class=\"comment\">## 閲嶈锛侊紒锛佷慨鏀规垚浣犵殑澶栫綉 IP/鍩熷悕</span></span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123; <span class=\"comment\">## 鍓嶇椤圭洰</span></span><br><span class=\"line\">            root   /data/project/web/dist;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">            try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         location /proxy-api/ &#123;</span><br><span class=\"line\">            proxy_pass http://192.168.2.2:8091/;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"wms部署\"><a href=\"#wms部署\" class=\"headerlink\" title=\" wms部署\"></a> wms部署</h2><p>##redis部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setenforce 0</span><br><span class=\"line\">docker pull redis</span><br><span class=\"line\"><span class=\"comment\">## 创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /home/redis/conf</span><br><span class=\"line\"><span class=\"comment\">## 创建文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> /home/redis/conf/redis.conf</span><br><span class=\"line\">vim /home/redis/conf/redis.conf</span><br><span class=\"line\">docker run --name redis -p 6379:6379 \\</span><br><span class=\"line\">-v /home/redis/data:/data \\</span><br><span class=\"line\">-v /home/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-d redis:latest redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n\n<p>###redis配置文件，主要是密码和配置持久化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly <span class=\"built_in\">yes</span></span><br><span class=\"line\">requirepass zr525010</span><br></pre></td></tr></table></figure>\n\n\n<p>##mysql部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /root/mysql/data /root/mysql/logs /root/mysql/conf</span><br><span class=\"line\"><span class=\"built_in\">touch</span> /root/mysql/conf/my.cnf</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">--name mysql \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">-p 3306:3306 \\</span><br><span class=\"line\">--restart unless-stopped \\</span><br><span class=\"line\">-v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=admin \\</span><br><span class=\"line\">mysql:5.7.37</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>##java部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf jdk-8u161-linux-x64.tar.gz</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/data/runtime/jdk1.8.0_161</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br><span class=\"line\"><span class=\"comment\">#让配置生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>###启动项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#启动项目</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar yudao-server.jar \\</span><br><span class=\"line\">--spring.profiles.active=<span class=\"built_in\">test</span> \\</span><br><span class=\"line\">--server.port=8091 \\</span><br><span class=\"line\">&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"comment\">#停止项目</span></span><br><span class=\"line\">ps -ef | grep yudao-server.jar | grep java | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class=\"built_in\">kill</span> -9</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>##nginx部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc-c++</span><br><span class=\"line\">yum install -y pcre pcre-devel</span><br><span class=\"line\">yum install -y zlib zlib-devel</span><br><span class=\"line\">yum install -y openssl openssl-devel</span><br><span class=\"line\"><span class=\"comment\">#进入官网下载</span></span><br><span class=\"line\">nginx.org</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> nginx</span><br><span class=\"line\">tar -zxvf nginx-1.16.1.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">启动nginx</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx</span><br><span class=\"line\">./sbin/nginx</span><br><span class=\"line\">重启</span><br><span class=\"line\">./sbin/nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>###nginx配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;     <span class=\"comment\"># 璁剧疆鍏佽鍘嬬缉鐨勯〉闈㈡渶灏忓瓧鑺傛暟</span></span><br><span class=\"line\">    gzip_buffers 4 16k;     <span class=\"comment\"># 鐢ㄦ潵瀛樺偍 gzip 鐨勫帇缂╃粨鏋</span></span><br><span class=\"line\">    gzip_http_version 1.1;  <span class=\"comment\"># 璇嗗埆 HTTP 鍗忚鐗堟湰</span></span><br><span class=\"line\">    gzip_comp_level 2;      <span class=\"comment\"># 璁剧疆 gzip 鐨勫帇缂╂瘮 1-9銆 鍘嬬缉姣旀渶灏忎絾鏈€蹇紝鑰9 鐩稿弽</span></span><br><span class=\"line\">    gzip_types gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; <span class=\"comment\"># 鎸囧畾鍘嬬缉绫诲瀷</span></span><br><span class=\"line\">    gzip_proxied any;       <span class=\"comment\"># 鏃犺鍚庣鏈嶅姟鍣ㄧ殑 headers 澶磋繑鍥炰粈涔堜俊鎭紝閮芥棤鏉′欢鍚敤鍘嬬缉</span></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       7000;</span><br><span class=\"line\">        server_name  192.168.2.2; <span class=\"comment\">## 閲嶈锛侊紒锛佷慨鏀规垚浣犵殑澶栫綉 IP/鍩熷悕</span></span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123; <span class=\"comment\">## 鍓嶇椤圭洰</span></span><br><span class=\"line\">            root   /data/project/web/dist;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">            try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         location /proxy-api/ &#123;</span><br><span class=\"line\">            proxy_pass http://192.168.2.2:8091/;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"# 回溯，双指针，和栈的个人总结\n\n### 1.回溯\n\n给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\n\ncandidates 中的数字可以无限制重复被选取。\n\n说明：\n\n* 所有数字（包括 target）都是正整数。\n* 解集不能包含重复的组合。 \n\n示例 1：\n输入：candidates = [2,3,6,7], target = 7,\n\n##### 个人思路总结\n\n常规回溯，回溯的下一次target为 target-candidates【i】，首先将数组排序，每次回溯时候，当target-candidate[i]<0时候，则终止回溯，剪枝干。当target==0时候，则保留结果。注意结果不重复，则每次是以begin开始。\n\n代码如下\n\n![](images/220725.png)\n\n### 2.双指针\n\n 给定n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水\n\n* 输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\n\n* 输出：6\n\n  ##### 个人思路总结\n\n  我们可以按照分列的思路解，遍历每一列，第一列，最后一列，不积水，跳过，第二列开始，每列积水高度由该列左边最高列，右边最高列中最短的列减去该列高度决定，如果该值小于零，则舍弃，大于零，则累加。\n\n  ##### 代码如下\n\n  ![](images/220725-2.png)\n\n  ### 3.栈的运用\n\n  给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n  有效字符串需满足：\n\n  * 左括号必须用相同类型的右括号闭合。\n  * 左括号必须以正确的顺序闭合。\n  * 注意空字符串可被认为是有效字符串。\n\n  示例 1:\n\n  * 输入: \"()\"  \n  * 输出: true     \n\n  示例 2:\n\n  * 输入: \"()[]{}\"    \n\n  * 输出: true  \n\n    ##### 个人思路\n\n    如果遇到左括号，则将右括号入栈。如果是右括号，则判断是不是和栈顶弹出的元素相同，如果不相同则false，如果相同则弹出，如果栈为空 则直接false，因为此时后面都是弹出的。\n\n    ##### 代码\n\n    ##### ![](images/0725-3.png)","source":"_posts/回溯，双指针，和栈的运用.md","raw":"# 回溯，双指针，和栈的个人总结\n\n### 1.回溯\n\n给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\n\ncandidates 中的数字可以无限制重复被选取。\n\n说明：\n\n* 所有数字（包括 target）都是正整数。\n* 解集不能包含重复的组合。 \n\n示例 1：\n输入：candidates = [2,3,6,7], target = 7,\n\n##### 个人思路总结\n\n常规回溯，回溯的下一次target为 target-candidates【i】，首先将数组排序，每次回溯时候，当target-candidate[i]<0时候，则终止回溯，剪枝干。当target==0时候，则保留结果。注意结果不重复，则每次是以begin开始。\n\n代码如下\n\n![](images/220725.png)\n\n### 2.双指针\n\n 给定n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水\n\n* 输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\n\n* 输出：6\n\n  ##### 个人思路总结\n\n  我们可以按照分列的思路解，遍历每一列，第一列，最后一列，不积水，跳过，第二列开始，每列积水高度由该列左边最高列，右边最高列中最短的列减去该列高度决定，如果该值小于零，则舍弃，大于零，则累加。\n\n  ##### 代码如下\n\n  ![](images/220725-2.png)\n\n  ### 3.栈的运用\n\n  给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n  有效字符串需满足：\n\n  * 左括号必须用相同类型的右括号闭合。\n  * 左括号必须以正确的顺序闭合。\n  * 注意空字符串可被认为是有效字符串。\n\n  示例 1:\n\n  * 输入: \"()\"  \n  * 输出: true     \n\n  示例 2:\n\n  * 输入: \"()[]{}\"    \n\n  * 输出: true  \n\n    ##### 个人思路\n\n    如果遇到左括号，则将右括号入栈。如果是右括号，则判断是不是和栈顶弹出的元素相同，如果不相同则false，如果相同则弹出，如果栈为空 则直接false，因为此时后面都是弹出的。\n\n    ##### 代码\n\n    ##### ![](images/0725-3.png)","slug":"回溯，双指针，和栈的运用","published":1,"date":"2022-07-25T02:59:38.180Z","updated":"2022-07-25T03:35:30.960Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vd200091kua2xgz304a","content":"<h1 id=\"回溯，双指针，和栈的个人总结\"><a href=\"#回溯，双指针，和栈的个人总结\" class=\"headerlink\" title=\"回溯，双指针，和栈的个人总结\"></a>回溯，双指针，和栈的个人总结</h1><h3 id=\"1-回溯\"><a href=\"#1-回溯\" class=\"headerlink\" title=\"1.回溯\"></a>1.回溯</h3><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>\n<p>candidates 中的数字可以无限制重复被选取。</p>\n<p>说明：</p>\n<ul>\n<li>所有数字（包括 target）都是正整数。</li>\n<li>解集不能包含重复的组合。 </li>\n</ul>\n<p>示例 1：<br>输入：candidates = [2,3,6,7], target = 7,</p>\n<h5 id=\"个人思路总结\"><a href=\"#个人思路总结\" class=\"headerlink\" title=\"个人思路总结\"></a>个人思路总结</h5><p>常规回溯，回溯的下一次target为 target-candidates【i】，首先将数组排序，每次回溯时候，当target-candidate[i]&lt;0时候，则终止回溯，剪枝干。当target==0时候，则保留结果。注意结果不重复，则每次是以begin开始。</p>\n<p>代码如下</p>\n<p><img src=\"images/220725.png\"></p>\n<h3 id=\"2-双指针\"><a href=\"#2-双指针\" class=\"headerlink\" title=\"2.双指针\"></a>2.双指针</h3><p> 给定n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水</p>\n<ul>\n<li><p>输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]</p>\n</li>\n<li><p>输出：6</p>\n<h5 id=\"个人思路总结-1\"><a href=\"#个人思路总结-1\" class=\"headerlink\" title=\"个人思路总结\"></a>个人思路总结</h5><p>我们可以按照分列的思路解，遍历每一列，第一列，最后一列，不积水，跳过，第二列开始，每列积水高度由该列左边最高列，右边最高列中最短的列减去该列高度决定，如果该值小于零，则舍弃，大于零，则累加。</p>\n<h5 id=\"代码如下\"><a href=\"#代码如下\" class=\"headerlink\" title=\"代码如下\"></a>代码如下</h5><p><img src=\"images/220725-2.png\"></p>\n<h3 id=\"3-栈的运用\"><a href=\"#3-栈的运用\" class=\"headerlink\" title=\"3.栈的运用\"></a>3.栈的运用</h3><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ul>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n<li>注意空字符串可被认为是有效字符串。</li>\n</ul>\n<p>示例 1:</p>\n<ul>\n<li>输入: “()”  </li>\n<li>输出: true     </li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li><p>输入: “()[]{}”    </p>\n</li>\n<li><p>输出: true  </p>\n<h5 id=\"个人思路\"><a href=\"#个人思路\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h5><p>如果遇到左括号，则将右括号入栈。如果是右括号，则判断是不是和栈顶弹出的元素相同，如果不相同则false，如果相同则弹出，如果栈为空 则直接false，因为此时后面都是弹出的。</p>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"images/0725-3.png\"></h5></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"回溯，双指针，和栈的个人总结\"><a href=\"#回溯，双指针，和栈的个人总结\" class=\"headerlink\" title=\"回溯，双指针，和栈的个人总结\"></a>回溯，双指针，和栈的个人总结</h1><h3 id=\"1-回溯\"><a href=\"#1-回溯\" class=\"headerlink\" title=\"1.回溯\"></a>1.回溯</h3><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>\n<p>candidates 中的数字可以无限制重复被选取。</p>\n<p>说明：</p>\n<ul>\n<li>所有数字（包括 target）都是正整数。</li>\n<li>解集不能包含重复的组合。 </li>\n</ul>\n<p>示例 1：<br>输入：candidates = [2,3,6,7], target = 7,</p>\n<h5 id=\"个人思路总结\"><a href=\"#个人思路总结\" class=\"headerlink\" title=\"个人思路总结\"></a>个人思路总结</h5><p>常规回溯，回溯的下一次target为 target-candidates【i】，首先将数组排序，每次回溯时候，当target-candidate[i]&lt;0时候，则终止回溯，剪枝干。当target==0时候，则保留结果。注意结果不重复，则每次是以begin开始。</p>\n<p>代码如下</p>\n<p><img src=\"images/220725.png\"></p>\n<h3 id=\"2-双指针\"><a href=\"#2-双指针\" class=\"headerlink\" title=\"2.双指针\"></a>2.双指针</h3><p> 给定n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水</p>\n<ul>\n<li><p>输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]</p>\n</li>\n<li><p>输出：6</p>\n<h5 id=\"个人思路总结-1\"><a href=\"#个人思路总结-1\" class=\"headerlink\" title=\"个人思路总结\"></a>个人思路总结</h5><p>我们可以按照分列的思路解，遍历每一列，第一列，最后一列，不积水，跳过，第二列开始，每列积水高度由该列左边最高列，右边最高列中最短的列减去该列高度决定，如果该值小于零，则舍弃，大于零，则累加。</p>\n<h5 id=\"代码如下\"><a href=\"#代码如下\" class=\"headerlink\" title=\"代码如下\"></a>代码如下</h5><p><img src=\"images/220725-2.png\"></p>\n<h3 id=\"3-栈的运用\"><a href=\"#3-栈的运用\" class=\"headerlink\" title=\"3.栈的运用\"></a>3.栈的运用</h3><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ul>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n<li>注意空字符串可被认为是有效字符串。</li>\n</ul>\n<p>示例 1:</p>\n<ul>\n<li>输入: “()”  </li>\n<li>输出: true     </li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li><p>输入: “()[]{}”    </p>\n</li>\n<li><p>输出: true  </p>\n<h5 id=\"个人思路\"><a href=\"#个人思路\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h5><p>如果遇到左括号，则将右括号入栈。如果是右括号，则判断是不是和栈顶弹出的元素相同，如果不相同则false，如果相同则弹出，如果栈为空 则直接false，因为此时后面都是弹出的。</p>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"images/0725-3.png\"></h5></li>\n</ul>\n</li>\n</ul>\n"},{"_content":"# 回溯总结\n\n### 题目\n\n给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。\n\n给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\n\n示例:\n输入：\"23\"\n输出：[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n\n### 个人思路\n\n可以维护一个2-9对应字母的数组，为String[] numsString={\"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n\n则2-9分别有了对应关系，用dfs(String digits,int nums,String[] numsString)表示从下表nums开始回溯，则终止条件为nums==digits.length()，获取每个数字对应的temp，遍历temp，下标加一进行回溯，最后要移除最后一个字母\n\n### 代码如下\n\n![](images/220715-1.png)","source":"_posts/算法-回溯总结.md","raw":"# 回溯总结\n\n### 题目\n\n给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。\n\n给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\n\n示例:\n输入：\"23\"\n输出：[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n\n### 个人思路\n\n可以维护一个2-9对应字母的数组，为String[] numsString={\"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n\n则2-9分别有了对应关系，用dfs(String digits,int nums,String[] numsString)表示从下表nums开始回溯，则终止条件为nums==digits.length()，获取每个数字对应的temp，遍历temp，下标加一进行回溯，最后要移除最后一个字母\n\n### 代码如下\n\n![](images/220715-1.png)","slug":"算法-回溯总结","published":1,"date":"2022-07-15T14:11:42.844Z","updated":"2022-07-15T14:18:56.333Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vd4000a1kua0buzai1o","content":"<h1 id=\"回溯总结\"><a href=\"#回溯总结\" class=\"headerlink\" title=\"回溯总结\"></a>回溯总结</h1><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p>\n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n<p>示例:<br>输入：”23”<br>输出：[“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p>\n<h3 id=\"个人思路\"><a href=\"#个人思路\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h3><p>可以维护一个2-9对应字母的数组，为String[] numsString={“”, “”, “abc”, “def”, “ghi”, “jkl”, “mno”, “pqrs”, “tuv”, “wxyz”};</p>\n<p>则2-9分别有了对应关系，用dfs(String digits,int nums,String[] numsString)表示从下表nums开始回溯，则终止条件为nums==digits.length()，获取每个数字对应的temp，遍历temp，下标加一进行回溯，最后要移除最后一个字母</p>\n<h3 id=\"代码如下\"><a href=\"#代码如下\" class=\"headerlink\" title=\"代码如下\"></a>代码如下</h3><p><img src=\"images/220715-1.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"回溯总结\"><a href=\"#回溯总结\" class=\"headerlink\" title=\"回溯总结\"></a>回溯总结</h1><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p>\n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n<p>示例:<br>输入：”23”<br>输出：[“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p>\n<h3 id=\"个人思路\"><a href=\"#个人思路\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h3><p>可以维护一个2-9对应字母的数组，为String[] numsString={“”, “”, “abc”, “def”, “ghi”, “jkl”, “mno”, “pqrs”, “tuv”, “wxyz”};</p>\n<p>则2-9分别有了对应关系，用dfs(String digits,int nums,String[] numsString)表示从下表nums开始回溯，则终止条件为nums==digits.length()，获取每个数字对应的temp，遍历temp，下标加一进行回溯，最后要移除最后一个字母</p>\n<h3 id=\"代码如下\"><a href=\"#代码如下\" class=\"headerlink\" title=\"代码如下\"></a>代码如下</h3><p><img src=\"images/220715-1.png\"></p>\n"},{"_content":"# 算法-双指针和hashmap的运用\n\n### 1.两数之和\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。\n\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n\n所以返回 [0, 1]\n\n### 个人思路\n\n遍历数组，计算和目标的差额temp，并把数组放入hashmap，调用hashmap.put(nums[i],i)方法，如果hashmap中包含temp这个key，则是一种答案\n\n![](images/220714-1.png)\n\n### 2.最长回文子串\n\n给你一个字符串 s，找到 s 中最长的回文子串。\n\n示例 1：\n\n* 输入：s = \"babad\"\n\n* 输出：\"bab\"\n\n* 解释：\"aba\" 同样是符合题意的答案。\n\n  #### 个人思路\n\n  遍历字符串，每种i代表以什么为中心，分两种情况，一种是一个字符为中心朝两边扩展 ，如“bab”，中心是a，第二种是以两个字符为中心像两边扩展，如“baab”，中心是aa，创建extend（String s,int start,int end）方法，其中start，end方法代表字符截取的下标，如果s.chartAT(start)==s.chartAT(end)则start--，end++，最后返回最长的那个即是答案。\n\n  \n\n![](/images/220714-2.png)\n\n### 3.三数之和\n\n给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。\n\n**注意：** 答案中不可以包含重复的三元组。\n\n示例：\n\n给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n\n满足要求的三元组集合为：\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n\n#### 个人思路\n\n遍历 字符串，i下表表示第一个数字索引，剩下两个两个数一个为i+1，一个为length-1，如果 nums【i】+nums【left】+nums【right】大于0，则 right--，否则left++；如果等于0，则right--，left++；另外等于0时候，则要考虑重复，如果这个 nums【right】==nums【right+1】则right--，就会去除重复\n\n![](images/220714-3.png)","source":"_posts/算法-双指针和hashmap的运用.md","raw":"# 算法-双指针和hashmap的运用\n\n### 1.两数之和\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。\n\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n\n所以返回 [0, 1]\n\n### 个人思路\n\n遍历数组，计算和目标的差额temp，并把数组放入hashmap，调用hashmap.put(nums[i],i)方法，如果hashmap中包含temp这个key，则是一种答案\n\n![](images/220714-1.png)\n\n### 2.最长回文子串\n\n给你一个字符串 s，找到 s 中最长的回文子串。\n\n示例 1：\n\n* 输入：s = \"babad\"\n\n* 输出：\"bab\"\n\n* 解释：\"aba\" 同样是符合题意的答案。\n\n  #### 个人思路\n\n  遍历字符串，每种i代表以什么为中心，分两种情况，一种是一个字符为中心朝两边扩展 ，如“bab”，中心是a，第二种是以两个字符为中心像两边扩展，如“baab”，中心是aa，创建extend（String s,int start,int end）方法，其中start，end方法代表字符截取的下标，如果s.chartAT(start)==s.chartAT(end)则start--，end++，最后返回最长的那个即是答案。\n\n  \n\n![](/images/220714-2.png)\n\n### 3.三数之和\n\n给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。\n\n**注意：** 答案中不可以包含重复的三元组。\n\n示例：\n\n给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n\n满足要求的三元组集合为：\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n\n#### 个人思路\n\n遍历 字符串，i下表表示第一个数字索引，剩下两个两个数一个为i+1，一个为length-1，如果 nums【i】+nums【left】+nums【right】大于0，则 right--，否则left++；如果等于0，则right--，left++；另外等于0时候，则要考虑重复，如果这个 nums【right】==nums【right+1】则right--，就会去除重复\n\n![](images/220714-3.png)","slug":"算法-双指针和hashmap的运用","published":1,"date":"2022-07-14T08:26:47.912Z","updated":"2022-07-14T08:53:08.827Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vd4000b1kua29j5ep7n","content":"<h1 id=\"算法-双指针和hashmap的运用\"><a href=\"#算法-双指针和hashmap的运用\" class=\"headerlink\" title=\"算法-双指针和hashmap的运用\"></a>算法-双指针和hashmap的运用</h1><h3 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"1.两数之和\"></a>1.两数之和</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>\n<p>给定 nums = [2, 7, 11, 15], target = 9</p>\n<p>因为 nums[0] + nums[1] = 2 + 7 = 9</p>\n<p>所以返回 [0, 1]</p>\n<h3 id=\"个人思路\"><a href=\"#个人思路\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h3><p>遍历数组，计算和目标的差额temp，并把数组放入hashmap，调用hashmap.put(nums[i],i)方法，如果hashmap中包含temp这个key，则是一种答案</p>\n<p><img src=\"images/220714-1.png\"></p>\n<h3 id=\"2-最长回文子串\"><a href=\"#2-最长回文子串\" class=\"headerlink\" title=\"2.最长回文子串\"></a>2.最长回文子串</h3><p>给你一个字符串 s，找到 s 中最长的回文子串。</p>\n<p>示例 1：</p>\n<ul>\n<li><p>输入：s = “babad”</p>\n</li>\n<li><p>输出：”bab”</p>\n</li>\n<li><p>解释：”aba” 同样是符合题意的答案。</p>\n<h4 id=\"个人思路-1\"><a href=\"#个人思路-1\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h4><p>遍历字符串，每种i代表以什么为中心，分两种情况，一种是一个字符为中心朝两边扩展 ，如“bab”，中心是a，第二种是以两个字符为中心像两边扩展，如“baab”，中心是aa，创建extend（String s,int start,int end）方法，其中start，end方法代表字符截取的下标，如果s.chartAT(start)==s.chartAT(end)则start–，end++，最后返回最长的那个即是答案。</p>\n</li>\n</ul>\n<p><img src=\"/images/220714-2.png\"></p>\n<h3 id=\"3-三数之和\"><a href=\"#3-三数之和\" class=\"headerlink\" title=\"3.三数之和\"></a>3.三数之和</h3><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</p>\n<p><strong>注意：</strong> 答案中不可以包含重复的三元组。</p>\n<p>示例：</p>\n<p>给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p>\n<p>满足要求的三元组集合为：<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p>\n<h4 id=\"个人思路-2\"><a href=\"#个人思路-2\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h4><p>遍历 字符串，i下表表示第一个数字索引，剩下两个两个数一个为i+1，一个为length-1，如果 nums【i】+nums【left】+nums【right】大于0，则 right–，否则left++；如果等于0，则right–，left++；另外等于0时候，则要考虑重复，如果这个 nums【right】==nums【right+1】则right–，就会去除重复</p>\n<p><img src=\"images/220714-3.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"算法-双指针和hashmap的运用\"><a href=\"#算法-双指针和hashmap的运用\" class=\"headerlink\" title=\"算法-双指针和hashmap的运用\"></a>算法-双指针和hashmap的运用</h1><h3 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"1.两数之和\"></a>1.两数之和</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>\n<p>给定 nums = [2, 7, 11, 15], target = 9</p>\n<p>因为 nums[0] + nums[1] = 2 + 7 = 9</p>\n<p>所以返回 [0, 1]</p>\n<h3 id=\"个人思路\"><a href=\"#个人思路\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h3><p>遍历数组，计算和目标的差额temp，并把数组放入hashmap，调用hashmap.put(nums[i],i)方法，如果hashmap中包含temp这个key，则是一种答案</p>\n<p><img src=\"images/220714-1.png\"></p>\n<h3 id=\"2-最长回文子串\"><a href=\"#2-最长回文子串\" class=\"headerlink\" title=\"2.最长回文子串\"></a>2.最长回文子串</h3><p>给你一个字符串 s，找到 s 中最长的回文子串。</p>\n<p>示例 1：</p>\n<ul>\n<li><p>输入：s = “babad”</p>\n</li>\n<li><p>输出：”bab”</p>\n</li>\n<li><p>解释：”aba” 同样是符合题意的答案。</p>\n<h4 id=\"个人思路-1\"><a href=\"#个人思路-1\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h4><p>遍历字符串，每种i代表以什么为中心，分两种情况，一种是一个字符为中心朝两边扩展 ，如“bab”，中心是a，第二种是以两个字符为中心像两边扩展，如“baab”，中心是aa，创建extend（String s,int start,int end）方法，其中start，end方法代表字符截取的下标，如果s.chartAT(start)==s.chartAT(end)则start–，end++，最后返回最长的那个即是答案。</p>\n</li>\n</ul>\n<p><img src=\"/images/220714-2.png\"></p>\n<h3 id=\"3-三数之和\"><a href=\"#3-三数之和\" class=\"headerlink\" title=\"3.三数之和\"></a>3.三数之和</h3><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</p>\n<p><strong>注意：</strong> 答案中不可以包含重复的三元组。</p>\n<p>示例：</p>\n<p>给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p>\n<p>满足要求的三元组集合为：<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p>\n<h4 id=\"个人思路-2\"><a href=\"#个人思路-2\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h4><p>遍历 字符串，i下表表示第一个数字索引，剩下两个两个数一个为i+1，一个为length-1，如果 nums【i】+nums【left】+nums【right】大于0，则 right–，否则left++；如果等于0，则right–，left++；另外等于0时候，则要考虑重复，如果这个 nums【right】==nums【right+1】则right–，就会去除重复</p>\n<p><img src=\"images/220714-3.png\"></p>\n"},{"_content":"---\n\n---\n## 若依项目前后端分离部署\n\n##### 启动防火墙\n\n systemctl start firewalld\n\n##### 端口占用\n\nnetstat -npl | grep \"80\"\n\n##### #开放端口\n\n firewall-cmd --permanent --add-port=3306/tcp\n\n##### #重启防火墙\n\nfirewall-cmd --reload\n\n##### #mysql安装\n\ndocker pull mysql:5.7.30\nmkdir -p /root/mysql/data /root/mysql/logs /root/mysql/conf\ntouch /root/mysql/conf/my.cnf\n//密码是admin，-v则是挂载 –name容器名字，作为后面的启动删除名字\ndocker run -p 3306:3306 --rm --name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7.30\ndocker start mysql\n\n\n\n\n\n##### //进入容器\n\ndocker exec -it mysql /bin/bash\n登录docker容器（方式参考上方文档)后登录mysql\nmysql -uroot -padmin\n修改登录者的权限\nGRANT ALL ON *.* TO 'root'@'%';\n#刷新命令生效\n flush privileges;\n\n##### #重启mysql\n\n //docker  rm  mysql\ndocker run -p 3306:3306 --rm --name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7.30\n重启redis\n//\ndocker run -d --rm -v /root/redis/data:/data --name redis -p 6379:6379 redis  redis-server  --appendonly yes![](/images/070502.png)\n\n##### 重启nginx\n\n/data/service/ngnix/sbin/nginx -s reload\n\n##### 重启nginx\n\n // cd /data/tmp\nmake install\n/data/service/ngnix/sbin/nginx\n\n##### #Jenkins安装\n\ndocker pull jenkinsci/blueocean\ndocker run --name jenkins -u root --rm  -d -p 7005:8080 -p 50000:50000 -v /data/service/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /data/service/apache-maven-3.8.5:/usr/local/maven -v /data/service/jdk1.8.0_212:/usr/local/jdk jenkinsci/blueocean \n-u root：以 root 权限启动，防止出现权限问题\n-p 7005:8080：端口映射，服务器的 7005 端口映射容器的 8080 端口\n-p 50000:50000：Jenkins代理默认通过TCP端口50000与Jenkins主机通信\n-v /data/jenkins:/var/jenkins_home：把容器内的 Jenkins 目录挂载到服务器的 /data/jenkins 目录以防容器没了，数据也没了\n-v /var/run/docker.sock:/var/run/docker.sock：保证容器内的 docker 与 服务器上 docker 的通讯\n 附带下删除 jenkinsci/blueocean 容器\n 删除对应绑定网桥\ndocker network disconnect --force bridge jenkinsci-blueocean\n 删除 jenkinsci-blueocean 容器，xxxx  容器 ID\ndocker rm -f xxxx\n查看密码 ，目录文件为/data/service/Jenkins\ncat /data/service/jenkins/secrets/initialAdminPassword\nJenkisn部署项目\n\n1.全局工作配置\n这里的java_home 路劲是docker挂载 路径，这里的maven路进是挂载路径\n注意：只用修改java和maven，git是已经有的\n2.插件安装\n搜索 Publish over SSH 插件安装，搜索 Maven Integration 插件安装\n3.ssh连接\n在系统设置下配置远程连接，这里我配置主机地址 \n4.进入git项目配置\n\n首先生成公钥\n进入jinkins容器后执行\nDocker exec -it dockerid bash\nssh-keygen -t rsa -C ‘15019474951@163.com’\ncat ~/.ssh/id_rsa.pub\n将公钥粘入gitee\n 在安全认证中把公钥加入\n5，进入项目配置悬念则git仓库，选择刚才配置公钥\n\n .选择 \n6.选择ssh接入\n下面的shell如下\ncd /root/data/test\nid=$(ps -ef | grep \"ruoyi-admin.jar\"  | grep -v grep| awk '{print $2}')\necho $id\nkill -9 $id\nnohup /data/service/jdk1.8.0_212/bin/java -jar ruoyi-admin.jar >myout.log 2>&1 &\n注意，这里一定要指定java执行路径 这里是/data/service/jdk1.8.0_212/bin/java，这是个大坑, 这里的远程目录是在/root下，即如果配置/data/test,则最终路径是在/root/data/test\n部署gitlab\ndocker pull gitlab/gitlab-ce\ndocker run -d  -p 443:443 -p 80:80 -p 222:22 --name gitlab --restart always -v /root/gitlab/config:/etc/gitlab -v /root/gitlab/logs:/var/log/gitlab -v /root/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce\n###### gitlab.rb文件内容默认全是注释\n$ vim /root/gitlab/config/gitlab.rb\n\n###### 配置http协议所使用的访问地址,不加端口号默认为80\nexternal_url 'http://192.168.2.2'\n\n###### 配置ssh协议所使用的访问地址和端口\ngitlab_rails['gitlab_ssh_host'] = '192.168.2.2 '\ngitlab_rails['gitlab_shell_ssh_port'] = 222 # 此端口是run时22端口映射的222端口\n:wq #保存配置文件并退出\n重启gitlab容器\n$ docker restart gitlab\n重置root密码\ndocker exec -it gitlab（容器名字） /bin/bash\n启用docker里面gitlab的ruby\ngitlab-rails console -e production\n 找到管理员用户\nuser = User.where(id: 1).first\n 更改密码\nuser.password = 'abcd1234'\nuser.password_confirmation = 'abcd1234'\n记得保存\nuser.save!\n\nwebhook配置\n1.\t安装Generic Webhook Trigger插件\n2.\t加入git的公钥到jenkins\n3.\t生成key    ssh-keygen -t rsa -C '15172537049@163.com‘ cat ~/.ssh/id_rsa.pub\n4.\t\n5.\t \n\n配置apitoken，这里是后面APItoken的地址\n6.\t \n\n\n允许本地访问该地址  在menu-admin-setting-network\n7.\t \n8.\t找到WebHooks配置界面，在POST地址框中输入如下格式内容：\n9.\t\n10.\thttp://<User ID>:<API Token>@<Jenkins IP地址>:端口/generic-webhook-trigger/invoke \n11.\t添加url\nhttp://root:1148e42061461a8d68883794319c3dcd82@192.168.2.2:7005/generic-webhook-trigger/invoke\n\n \n\n配置固定ip地址\n虚拟机安装Linux系列教材 （八）- 设置 Centos7 为固定ip地址 (how2j.cn)\n需要注意编写ens33时候 onboot=yes\n如果出现报错\"Could not resolve host: mirrorlist.centos.org; Unknown error\"\n则在\"Could not resolve host: mirrorlist.centos.org; Unknown error\"解决方法 - Mr.Gavin - 博客园 (cnblogs.com)处理\n\nIpv4转发（连接不上数据库）\n2.开启转发配置\n\nvim /etc/sysctl.conf\n\n#配置转发\nnet.ipv4.ip_forward=1\n#保存退出就可以了\n:wq!\n#重启服务，让配置生效\nsystemctl restart network\n\n","source":"_posts/若依项目前后端分离部署.md","raw":"---\n\n---\n## 若依项目前后端分离部署\n\n##### 启动防火墙\n\n systemctl start firewalld\n\n##### 端口占用\n\nnetstat -npl | grep \"80\"\n\n##### #开放端口\n\n firewall-cmd --permanent --add-port=3306/tcp\n\n##### #重启防火墙\n\nfirewall-cmd --reload\n\n##### #mysql安装\n\ndocker pull mysql:5.7.30\nmkdir -p /root/mysql/data /root/mysql/logs /root/mysql/conf\ntouch /root/mysql/conf/my.cnf\n//密码是admin，-v则是挂载 –name容器名字，作为后面的启动删除名字\ndocker run -p 3306:3306 --rm --name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7.30\ndocker start mysql\n\n\n\n\n\n##### //进入容器\n\ndocker exec -it mysql /bin/bash\n登录docker容器（方式参考上方文档)后登录mysql\nmysql -uroot -padmin\n修改登录者的权限\nGRANT ALL ON *.* TO 'root'@'%';\n#刷新命令生效\n flush privileges;\n\n##### #重启mysql\n\n //docker  rm  mysql\ndocker run -p 3306:3306 --rm --name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7.30\n重启redis\n//\ndocker run -d --rm -v /root/redis/data:/data --name redis -p 6379:6379 redis  redis-server  --appendonly yes![](/images/070502.png)\n\n##### 重启nginx\n\n/data/service/ngnix/sbin/nginx -s reload\n\n##### 重启nginx\n\n // cd /data/tmp\nmake install\n/data/service/ngnix/sbin/nginx\n\n##### #Jenkins安装\n\ndocker pull jenkinsci/blueocean\ndocker run --name jenkins -u root --rm  -d -p 7005:8080 -p 50000:50000 -v /data/service/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /data/service/apache-maven-3.8.5:/usr/local/maven -v /data/service/jdk1.8.0_212:/usr/local/jdk jenkinsci/blueocean \n-u root：以 root 权限启动，防止出现权限问题\n-p 7005:8080：端口映射，服务器的 7005 端口映射容器的 8080 端口\n-p 50000:50000：Jenkins代理默认通过TCP端口50000与Jenkins主机通信\n-v /data/jenkins:/var/jenkins_home：把容器内的 Jenkins 目录挂载到服务器的 /data/jenkins 目录以防容器没了，数据也没了\n-v /var/run/docker.sock:/var/run/docker.sock：保证容器内的 docker 与 服务器上 docker 的通讯\n 附带下删除 jenkinsci/blueocean 容器\n 删除对应绑定网桥\ndocker network disconnect --force bridge jenkinsci-blueocean\n 删除 jenkinsci-blueocean 容器，xxxx  容器 ID\ndocker rm -f xxxx\n查看密码 ，目录文件为/data/service/Jenkins\ncat /data/service/jenkins/secrets/initialAdminPassword\nJenkisn部署项目\n\n1.全局工作配置\n这里的java_home 路劲是docker挂载 路径，这里的maven路进是挂载路径\n注意：只用修改java和maven，git是已经有的\n2.插件安装\n搜索 Publish over SSH 插件安装，搜索 Maven Integration 插件安装\n3.ssh连接\n在系统设置下配置远程连接，这里我配置主机地址 \n4.进入git项目配置\n\n首先生成公钥\n进入jinkins容器后执行\nDocker exec -it dockerid bash\nssh-keygen -t rsa -C ‘15019474951@163.com’\ncat ~/.ssh/id_rsa.pub\n将公钥粘入gitee\n 在安全认证中把公钥加入\n5，进入项目配置悬念则git仓库，选择刚才配置公钥\n\n .选择 \n6.选择ssh接入\n下面的shell如下\ncd /root/data/test\nid=$(ps -ef | grep \"ruoyi-admin.jar\"  | grep -v grep| awk '{print $2}')\necho $id\nkill -9 $id\nnohup /data/service/jdk1.8.0_212/bin/java -jar ruoyi-admin.jar >myout.log 2>&1 &\n注意，这里一定要指定java执行路径 这里是/data/service/jdk1.8.0_212/bin/java，这是个大坑, 这里的远程目录是在/root下，即如果配置/data/test,则最终路径是在/root/data/test\n部署gitlab\ndocker pull gitlab/gitlab-ce\ndocker run -d  -p 443:443 -p 80:80 -p 222:22 --name gitlab --restart always -v /root/gitlab/config:/etc/gitlab -v /root/gitlab/logs:/var/log/gitlab -v /root/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce\n###### gitlab.rb文件内容默认全是注释\n$ vim /root/gitlab/config/gitlab.rb\n\n###### 配置http协议所使用的访问地址,不加端口号默认为80\nexternal_url 'http://192.168.2.2'\n\n###### 配置ssh协议所使用的访问地址和端口\ngitlab_rails['gitlab_ssh_host'] = '192.168.2.2 '\ngitlab_rails['gitlab_shell_ssh_port'] = 222 # 此端口是run时22端口映射的222端口\n:wq #保存配置文件并退出\n重启gitlab容器\n$ docker restart gitlab\n重置root密码\ndocker exec -it gitlab（容器名字） /bin/bash\n启用docker里面gitlab的ruby\ngitlab-rails console -e production\n 找到管理员用户\nuser = User.where(id: 1).first\n 更改密码\nuser.password = 'abcd1234'\nuser.password_confirmation = 'abcd1234'\n记得保存\nuser.save!\n\nwebhook配置\n1.\t安装Generic Webhook Trigger插件\n2.\t加入git的公钥到jenkins\n3.\t生成key    ssh-keygen -t rsa -C '15172537049@163.com‘ cat ~/.ssh/id_rsa.pub\n4.\t\n5.\t \n\n配置apitoken，这里是后面APItoken的地址\n6.\t \n\n\n允许本地访问该地址  在menu-admin-setting-network\n7.\t \n8.\t找到WebHooks配置界面，在POST地址框中输入如下格式内容：\n9.\t\n10.\thttp://<User ID>:<API Token>@<Jenkins IP地址>:端口/generic-webhook-trigger/invoke \n11.\t添加url\nhttp://root:1148e42061461a8d68883794319c3dcd82@192.168.2.2:7005/generic-webhook-trigger/invoke\n\n \n\n配置固定ip地址\n虚拟机安装Linux系列教材 （八）- 设置 Centos7 为固定ip地址 (how2j.cn)\n需要注意编写ens33时候 onboot=yes\n如果出现报错\"Could not resolve host: mirrorlist.centos.org; Unknown error\"\n则在\"Could not resolve host: mirrorlist.centos.org; Unknown error\"解决方法 - Mr.Gavin - 博客园 (cnblogs.com)处理\n\nIpv4转发（连接不上数据库）\n2.开启转发配置\n\nvim /etc/sysctl.conf\n\n#配置转发\nnet.ipv4.ip_forward=1\n#保存退出就可以了\n:wq!\n#重启服务，让配置生效\nsystemctl restart network\n\n","slug":"若依项目前后端分离部署","published":1,"date":"2022-06-15T08:32:27.658Z","updated":"2022-07-07T12:27:57.561Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vd5000c1kua2r8v8tgk","content":"<hr>\n<hr>\n<h2 id=\"若依项目前后端分离部署\"><a href=\"#若依项目前后端分离部署\" class=\"headerlink\" title=\"若依项目前后端分离部署\"></a>若依项目前后端分离部署</h2><h5 id=\"启动防火墙\"><a href=\"#启动防火墙\" class=\"headerlink\" title=\"启动防火墙\"></a>启动防火墙</h5><p> systemctl start firewalld</p>\n<h5 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h5><p>netstat -npl | grep “80”</p>\n<h5 id=\"开放端口\"><a href=\"#开放端口\" class=\"headerlink\" title=\"#开放端口\"></a>#开放端口</h5><p> firewall-cmd –permanent –add-port=3306/tcp</p>\n<h5 id=\"重启防火墙\"><a href=\"#重启防火墙\" class=\"headerlink\" title=\"#重启防火墙\"></a>#重启防火墙</h5><p>firewall-cmd –reload</p>\n<h5 id=\"mysql安装\"><a href=\"#mysql安装\" class=\"headerlink\" title=\"#mysql安装\"></a>#mysql安装</h5><p>docker pull mysql:5.7.30<br>mkdir -p /root/mysql/data /root/mysql/logs /root/mysql/conf<br>touch /root/mysql/conf/my.cnf<br>//密码是admin，-v则是挂载 –name容器名字，作为后面的启动删除名字<br>docker run -p 3306:3306 –rm –name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7.30<br>docker start mysql</p>\n<h5 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"//进入容器\"></a>//进入容器</h5><p>docker exec -it mysql /bin/bash<br>登录docker容器（方式参考上方文档)后登录mysql<br>mysql -uroot -padmin<br>修改登录者的权限<br>GRANT ALL ON <em>.</em> TO ‘root‘@’%’;<br>#刷新命令生效<br> flush privileges;</p>\n<h5 id=\"重启mysql\"><a href=\"#重启mysql\" class=\"headerlink\" title=\"#重启mysql\"></a>#重启mysql</h5><p> //docker  rm  mysql<br>docker run -p 3306:3306 –rm –name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7.30<br>重启redis<br>//<br>docker run -d –rm -v /root/redis/data:/data –name redis -p 6379:6379 redis  redis-server  –appendonly yes<img src=\"/images/070502.png\"></p>\n<h5 id=\"重启nginx\"><a href=\"#重启nginx\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h5><p>/data/service/ngnix/sbin/nginx -s reload</p>\n<h5 id=\"重启nginx-1\"><a href=\"#重启nginx-1\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h5><p> // cd /data/tmp<br>make install<br>/data/service/ngnix/sbin/nginx</p>\n<h5 id=\"Jenkins安装\"><a href=\"#Jenkins安装\" class=\"headerlink\" title=\"#Jenkins安装\"></a>#Jenkins安装</h5><p>docker pull jenkinsci/blueocean<br>docker run –name jenkins -u root –rm  -d -p 7005:8080 -p 50000:50000 -v /data/service/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /data/service/apache-maven-3.8.5:/usr/local/maven -v /data/service/jdk1.8.0_212:/usr/local/jdk jenkinsci/blueocean<br>-u root：以 root 权限启动，防止出现权限问题<br>-p 7005:8080：端口映射，服务器的 7005 端口映射容器的 8080 端口<br>-p 50000:50000：Jenkins代理默认通过TCP端口50000与Jenkins主机通信<br>-v /data/jenkins:/var/jenkins_home：把容器内的 Jenkins 目录挂载到服务器的 /data/jenkins 目录以防容器没了，数据也没了<br>-v /var/run/docker.sock:/var/run/docker.sock：保证容器内的 docker 与 服务器上 docker 的通讯<br> 附带下删除 jenkinsci/blueocean 容器<br> 删除对应绑定网桥<br>docker network disconnect –force bridge jenkinsci-blueocean<br> 删除 jenkinsci-blueocean 容器，xxxx  容器 ID<br>docker rm -f xxxx<br>查看密码 ，目录文件为/data/service/Jenkins<br>cat /data/service/jenkins/secrets/initialAdminPassword<br>Jenkisn部署项目</p>\n<p>1.全局工作配置<br>这里的java_home 路劲是docker挂载 路径，这里的maven路进是挂载路径<br>注意：只用修改java和maven，git是已经有的<br>2.插件安装<br>搜索 Publish over SSH 插件安装，搜索 Maven Integration 插件安装<br>3.ssh连接<br>在系统设置下配置远程连接，这里我配置主机地址<br>4.进入git项目配置</p>\n<p>首先生成公钥<br>进入jinkins容器后执行<br>Docker exec -it dockerid bash<br>ssh-keygen -t rsa -C ‘<a href=\"mailto:&#49;&#53;&#48;&#x31;&#57;&#x34;&#x37;&#52;&#57;&#x35;&#49;&#64;&#x31;&#54;&#x33;&#46;&#x63;&#x6f;&#x6d;\">&#49;&#53;&#48;&#x31;&#57;&#x34;&#x37;&#52;&#57;&#x35;&#49;&#64;&#x31;&#54;&#x33;&#46;&#x63;&#x6f;&#x6d;</a>’<br>cat ~/.ssh/id_rsa.pub<br>将公钥粘入gitee<br> 在安全认证中把公钥加入<br>5，进入项目配置悬念则git仓库，选择刚才配置公钥</p>\n<p> .选择<br>6.选择ssh接入<br>下面的shell如下<br>cd /root/data/test<br>id=$(ps -ef | grep “ruoyi-admin.jar”  | grep -v grep| awk ‘{print $2}’)<br>echo $id<br>kill -9 $id<br>nohup /data/service/jdk1.8.0_212/bin/java -jar ruoyi-admin.jar &gt;myout.log 2&gt;&amp;1 &amp;<br>注意，这里一定要指定java执行路径 这里是/data/service/jdk1.8.0_212/bin/java，这是个大坑, 这里的远程目录是在/root下，即如果配置/data/test,则最终路径是在/root/data/test<br>部署gitlab<br>docker pull gitlab/gitlab-ce<br>docker run -d  -p 443:443 -p 80:80 -p 222:22 –name gitlab –restart always -v /root/gitlab/config:/etc/gitlab -v /root/gitlab/logs:/var/log/gitlab -v /root/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce</p>\n<h6 id=\"gitlab-rb文件内容默认全是注释\"><a href=\"#gitlab-rb文件内容默认全是注释\" class=\"headerlink\" title=\"gitlab.rb文件内容默认全是注释\"></a>gitlab.rb文件内容默认全是注释</h6><p>$ vim /root/gitlab/config/gitlab.rb</p>\n<h6 id=\"配置http协议所使用的访问地址-不加端口号默认为80\"><a href=\"#配置http协议所使用的访问地址-不加端口号默认为80\" class=\"headerlink\" title=\"配置http协议所使用的访问地址,不加端口号默认为80\"></a>配置http协议所使用的访问地址,不加端口号默认为80</h6><p>external_url ‘<a href=\"http://192.168.2.2&/#39;\">http://192.168.2.2&#39;</a></p>\n<h6 id=\"配置ssh协议所使用的访问地址和端口\"><a href=\"#配置ssh协议所使用的访问地址和端口\" class=\"headerlink\" title=\"配置ssh协议所使用的访问地址和端口\"></a>配置ssh协议所使用的访问地址和端口</h6><p>gitlab_rails[‘gitlab_ssh_host’] = ‘192.168.2.2 ‘<br>gitlab_rails[‘gitlab_shell_ssh_port’] = 222 # 此端口是run时22端口映射的222端口<br>:wq #保存配置文件并退出<br>重启gitlab容器<br>$ docker restart gitlab<br>重置root密码<br>docker exec -it gitlab（容器名字） /bin/bash<br>启用docker里面gitlab的ruby<br>gitlab-rails console -e production<br> 找到管理员用户<br>user = User.where(id: 1).first<br> 更改密码<br>user.password = ‘abcd1234’<br>user.password_confirmation = ‘abcd1234’<br>记得保存<br>user.save!</p>\n<p>webhook配置</p>\n<ol>\n<li>   安装Generic Webhook Trigger插件</li>\n<li>   加入git的公钥到jenkins</li>\n<li>   生成key    ssh-keygen -t rsa -C ‘<a href=\"mailto:&#49;&#x35;&#x31;&#x37;&#x32;&#x35;&#x33;&#55;&#48;&#x34;&#57;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#x6f;&#x6d;\">&#49;&#x35;&#x31;&#x37;&#x32;&#x35;&#x33;&#55;&#48;&#x34;&#57;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#x6f;&#x6d;</a>‘ cat ~/.ssh/id_rsa.pub</li>\n<li></li>\n<li></li>\n</ol>\n<p>配置apitoken，这里是后面APItoken的地址<br>6.     </p>\n<p>允许本地访问该地址  在menu-admin-setting-network<br>7.<br>8.    找到WebHooks配置界面，在POST地址框中输入如下格式内容：<br>9.<br>10.    http://<User ID>:<API Token>@&lt;Jenkins IP地址&gt;:端口/generic-webhook-trigger/invoke<br>11.    添加url<br><a href=\"http://root:1148e42061461a8d68883794319c3dcd82@192.168.2.2:7005/generic-webhook-trigger/invoke\">http://root:1148e42061461a8d68883794319c3dcd82@192.168.2.2:7005/generic-webhook-trigger/invoke</a></p>\n<p>配置固定ip地址<br>虚拟机安装Linux系列教材 （八）- 设置 Centos7 为固定ip地址 (how2j.cn)<br>需要注意编写ens33时候 onboot=yes<br>如果出现报错”Could not resolve host: mirrorlist.centos.org; Unknown error”<br>则在”Could not resolve host: mirrorlist.centos.org; Unknown error”解决方法 - Mr.Gavin - 博客园 (cnblogs.com)处理</p>\n<p>Ipv4转发（连接不上数据库）<br>2.开启转发配置</p>\n<p>vim /etc/sysctl.conf</p>\n<p>#配置转发<br>net.ipv4.ip_forward=1<br>#保存退出就可以了<br>:wq!<br>#重启服务，让配置生效<br>systemctl restart network</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<hr>\n<h2 id=\"若依项目前后端分离部署\"><a href=\"#若依项目前后端分离部署\" class=\"headerlink\" title=\"若依项目前后端分离部署\"></a>若依项目前后端分离部署</h2><h5 id=\"启动防火墙\"><a href=\"#启动防火墙\" class=\"headerlink\" title=\"启动防火墙\"></a>启动防火墙</h5><p> systemctl start firewalld</p>\n<h5 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h5><p>netstat -npl | grep “80”</p>\n<h5 id=\"开放端口\"><a href=\"#开放端口\" class=\"headerlink\" title=\"#开放端口\"></a>#开放端口</h5><p> firewall-cmd –permanent –add-port=3306/tcp</p>\n<h5 id=\"重启防火墙\"><a href=\"#重启防火墙\" class=\"headerlink\" title=\"#重启防火墙\"></a>#重启防火墙</h5><p>firewall-cmd –reload</p>\n<h5 id=\"mysql安装\"><a href=\"#mysql安装\" class=\"headerlink\" title=\"#mysql安装\"></a>#mysql安装</h5><p>docker pull mysql:5.7.30<br>mkdir -p /root/mysql/data /root/mysql/logs /root/mysql/conf<br>touch /root/mysql/conf/my.cnf<br>//密码是admin，-v则是挂载 –name容器名字，作为后面的启动删除名字<br>docker run -p 3306:3306 –rm –name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7.30<br>docker start mysql</p>\n<h5 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"//进入容器\"></a>//进入容器</h5><p>docker exec -it mysql /bin/bash<br>登录docker容器（方式参考上方文档)后登录mysql<br>mysql -uroot -padmin<br>修改登录者的权限<br>GRANT ALL ON <em>.</em> TO ‘root‘@’%’;<br>#刷新命令生效<br> flush privileges;</p>\n<h5 id=\"重启mysql\"><a href=\"#重启mysql\" class=\"headerlink\" title=\"#重启mysql\"></a>#重启mysql</h5><p> //docker  rm  mysql<br>docker run -p 3306:3306 –rm –name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7.30<br>重启redis<br>//<br>docker run -d –rm -v /root/redis/data:/data –name redis -p 6379:6379 redis  redis-server  –appendonly yes<img src=\"/images/070502.png\"></p>\n<h5 id=\"重启nginx\"><a href=\"#重启nginx\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h5><p>/data/service/ngnix/sbin/nginx -s reload</p>\n<h5 id=\"重启nginx-1\"><a href=\"#重启nginx-1\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h5><p> // cd /data/tmp<br>make install<br>/data/service/ngnix/sbin/nginx</p>\n<h5 id=\"Jenkins安装\"><a href=\"#Jenkins安装\" class=\"headerlink\" title=\"#Jenkins安装\"></a>#Jenkins安装</h5><p>docker pull jenkinsci/blueocean<br>docker run –name jenkins -u root –rm  -d -p 7005:8080 -p 50000:50000 -v /data/service/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /data/service/apache-maven-3.8.5:/usr/local/maven -v /data/service/jdk1.8.0_212:/usr/local/jdk jenkinsci/blueocean<br>-u root：以 root 权限启动，防止出现权限问题<br>-p 7005:8080：端口映射，服务器的 7005 端口映射容器的 8080 端口<br>-p 50000:50000：Jenkins代理默认通过TCP端口50000与Jenkins主机通信<br>-v /data/jenkins:/var/jenkins_home：把容器内的 Jenkins 目录挂载到服务器的 /data/jenkins 目录以防容器没了，数据也没了<br>-v /var/run/docker.sock:/var/run/docker.sock：保证容器内的 docker 与 服务器上 docker 的通讯<br> 附带下删除 jenkinsci/blueocean 容器<br> 删除对应绑定网桥<br>docker network disconnect –force bridge jenkinsci-blueocean<br> 删除 jenkinsci-blueocean 容器，xxxx  容器 ID<br>docker rm -f xxxx<br>查看密码 ，目录文件为/data/service/Jenkins<br>cat /data/service/jenkins/secrets/initialAdminPassword<br>Jenkisn部署项目</p>\n<p>1.全局工作配置<br>这里的java_home 路劲是docker挂载 路径，这里的maven路进是挂载路径<br>注意：只用修改java和maven，git是已经有的<br>2.插件安装<br>搜索 Publish over SSH 插件安装，搜索 Maven Integration 插件安装<br>3.ssh连接<br>在系统设置下配置远程连接，这里我配置主机地址<br>4.进入git项目配置</p>\n<p>首先生成公钥<br>进入jinkins容器后执行<br>Docker exec -it dockerid bash<br>ssh-keygen -t rsa -C ‘<a href=\"mailto:&#49;&#53;&#48;&#x31;&#57;&#x34;&#x37;&#52;&#57;&#x35;&#49;&#64;&#x31;&#54;&#x33;&#46;&#x63;&#x6f;&#x6d;\">&#49;&#53;&#48;&#x31;&#57;&#x34;&#x37;&#52;&#57;&#x35;&#49;&#64;&#x31;&#54;&#x33;&#46;&#x63;&#x6f;&#x6d;</a>’<br>cat ~/.ssh/id_rsa.pub<br>将公钥粘入gitee<br> 在安全认证中把公钥加入<br>5，进入项目配置悬念则git仓库，选择刚才配置公钥</p>\n<p> .选择<br>6.选择ssh接入<br>下面的shell如下<br>cd /root/data/test<br>id=$(ps -ef | grep “ruoyi-admin.jar”  | grep -v grep| awk ‘{print $2}’)<br>echo $id<br>kill -9 $id<br>nohup /data/service/jdk1.8.0_212/bin/java -jar ruoyi-admin.jar &gt;myout.log 2&gt;&amp;1 &amp;<br>注意，这里一定要指定java执行路径 这里是/data/service/jdk1.8.0_212/bin/java，这是个大坑, 这里的远程目录是在/root下，即如果配置/data/test,则最终路径是在/root/data/test<br>部署gitlab<br>docker pull gitlab/gitlab-ce<br>docker run -d  -p 443:443 -p 80:80 -p 222:22 –name gitlab –restart always -v /root/gitlab/config:/etc/gitlab -v /root/gitlab/logs:/var/log/gitlab -v /root/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce</p>\n<h6 id=\"gitlab-rb文件内容默认全是注释\"><a href=\"#gitlab-rb文件内容默认全是注释\" class=\"headerlink\" title=\"gitlab.rb文件内容默认全是注释\"></a>gitlab.rb文件内容默认全是注释</h6><p>$ vim /root/gitlab/config/gitlab.rb</p>\n<h6 id=\"配置http协议所使用的访问地址-不加端口号默认为80\"><a href=\"#配置http协议所使用的访问地址-不加端口号默认为80\" class=\"headerlink\" title=\"配置http协议所使用的访问地址,不加端口号默认为80\"></a>配置http协议所使用的访问地址,不加端口号默认为80</h6><p>external_url ‘<a href=\"http://192.168.2.2&/#39;\">http://192.168.2.2&#39;</a></p>\n<h6 id=\"配置ssh协议所使用的访问地址和端口\"><a href=\"#配置ssh协议所使用的访问地址和端口\" class=\"headerlink\" title=\"配置ssh协议所使用的访问地址和端口\"></a>配置ssh协议所使用的访问地址和端口</h6><p>gitlab_rails[‘gitlab_ssh_host’] = ‘192.168.2.2 ‘<br>gitlab_rails[‘gitlab_shell_ssh_port’] = 222 # 此端口是run时22端口映射的222端口<br>:wq #保存配置文件并退出<br>重启gitlab容器<br>$ docker restart gitlab<br>重置root密码<br>docker exec -it gitlab（容器名字） /bin/bash<br>启用docker里面gitlab的ruby<br>gitlab-rails console -e production<br> 找到管理员用户<br>user = User.where(id: 1).first<br> 更改密码<br>user.password = ‘abcd1234’<br>user.password_confirmation = ‘abcd1234’<br>记得保存<br>user.save!</p>\n<p>webhook配置</p>\n<ol>\n<li>   安装Generic Webhook Trigger插件</li>\n<li>   加入git的公钥到jenkins</li>\n<li>   生成key    ssh-keygen -t rsa -C ‘<a href=\"mailto:&#49;&#x35;&#x31;&#x37;&#x32;&#x35;&#x33;&#55;&#48;&#x34;&#57;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#x6f;&#x6d;\">&#49;&#x35;&#x31;&#x37;&#x32;&#x35;&#x33;&#55;&#48;&#x34;&#57;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#x6f;&#x6d;</a>‘ cat ~/.ssh/id_rsa.pub</li>\n<li></li>\n<li></li>\n</ol>\n<p>配置apitoken，这里是后面APItoken的地址<br>6.     </p>\n<p>允许本地访问该地址  在menu-admin-setting-network<br>7.<br>8.    找到WebHooks配置界面，在POST地址框中输入如下格式内容：<br>9.<br>10.    http://<User ID>:<API Token>@&lt;Jenkins IP地址&gt;:端口/generic-webhook-trigger/invoke<br>11.    添加url<br><a href=\"http://root:1148e42061461a8d68883794319c3dcd82@192.168.2.2:7005/generic-webhook-trigger/invoke\">http://root:1148e42061461a8d68883794319c3dcd82@192.168.2.2:7005/generic-webhook-trigger/invoke</a></p>\n<p>配置固定ip地址<br>虚拟机安装Linux系列教材 （八）- 设置 Centos7 为固定ip地址 (how2j.cn)<br>需要注意编写ens33时候 onboot=yes<br>如果出现报错”Could not resolve host: mirrorlist.centos.org; Unknown error”<br>则在”Could not resolve host: mirrorlist.centos.org; Unknown error”解决方法 - Mr.Gavin - 博客园 (cnblogs.com)处理</p>\n<p>Ipv4转发（连接不上数据库）<br>2.开启转发配置</p>\n<p>vim /etc/sysctl.conf</p>\n<p>#配置转发<br>net.ipv4.ip_forward=1<br>#保存退出就可以了<br>:wq!<br>#重启服务，让配置生效<br>systemctl restart network</p>\n"},{"_content":"## **递归的一点思考**\n\n递归就是将大问题转化为小问题的一种思路。\n\n它有两个特点，\n\n1.重复调用自身函数\n\n2.有终结条件\n\n例如leetcode题目二叉树的中序遍历就可用递归\n\n![](E:\\javaProject\\hexo\\source\\images\\220707-1.png)\n\n![](images/220707-1.png)\n","source":"_posts/递归的一点思考.md","raw":"## **递归的一点思考**\n\n递归就是将大问题转化为小问题的一种思路。\n\n它有两个特点，\n\n1.重复调用自身函数\n\n2.有终结条件\n\n例如leetcode题目二叉树的中序遍历就可用递归\n\n![](E:\\javaProject\\hexo\\source\\images\\220707-1.png)\n\n![](images/220707-1.png)\n","slug":"递归的一点思考","published":1,"date":"2022-07-07T11:11:15.948Z","updated":"2022-07-07T12:26:34.949Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vd5000d1kuaci5e049j","content":"<h2 id=\"递归的一点思考\"><a href=\"#递归的一点思考\" class=\"headerlink\" title=\"递归的一点思考\"></a><strong>递归的一点思考</strong></h2><p>递归就是将大问题转化为小问题的一种思路。</p>\n<p>它有两个特点，</p>\n<p>1.重复调用自身函数</p>\n<p>2.有终结条件</p>\n<p>例如leetcode题目二叉树的中序遍历就可用递归</p>\n<p><img src=\"E:\\javaProject\\hexo\\source\\images\\220707-1.png\"></p>\n<p><img src=\"images/220707-1.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"递归的一点思考\"><a href=\"#递归的一点思考\" class=\"headerlink\" title=\"递归的一点思考\"></a><strong>递归的一点思考</strong></h2><p>递归就是将大问题转化为小问题的一种思路。</p>\n<p>它有两个特点，</p>\n<p>1.重复调用自身函数</p>\n<p>2.有终结条件</p>\n<p>例如leetcode题目二叉树的中序遍历就可用递归</p>\n<p><img src=\"E:\\javaProject\\hexo\\source\\images\\220707-1.png\"></p>\n<p><img src=\"images/220707-1.png\"></p>\n"},{"_content":"# 部署ruoyi前后端不分离版\n\n### 项目目录\n\n![](images/2022-08-18.png)\n\n#tmp存放临时安装包\nmkdir -p /data/tmp\n#service存放软件环境\nmkdir -p /data/service\n#gitee存放代码版本控制库\nmkdir -p /data/gitee\n\n### 安装java\n\njava\ncd /data/tmp\ntar -zxvf jdk-8u212-linux-x64.tar.gz\nmv jdk1.8.0_212 /data/service\ncd /data/service\nll\nvim /etc/profile\nexport JAVA_HOME=/data/service/jdk1.8.0_212\nexport PATH=$PATH:$JAVA_HOME/bin\nsource /etc/profile\n\n### 安装maven\n\ncd /data/tmp\ntar -zxvf apache-maven-3.8.5-bin.tar.gz\nmv apache-maven-3.8.5 /data/service\ncd /data/service\nll\nvim /etc/profile\nexport MAVEN_HOME=/data/service/apache-maven-3.8.5\nexport PATH=$PATH:$MAVEN_HOME/bin\nsource /etc/profile\nvim /data/service/apache-maven-3.8.5/conf/setting.xml\n#配置本地仓库\n<localRepository>/data/service/apache-maven-3.8.5/repository</localRepository>\n#配置阿里云镜像\n<mirror>\n  <id>aliyunmaven</id>\n  <mirrorOf>*</mirrorOf>\n  <name>阿里云公共仓库</name>\n  <url>https://maven.aliyun.com/repository/public</url>\n</mirror>\n\n\n\n### 安装git\n\nyum -y groupinstall \"Development Tools\"\nyum install wget unzip gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel libcurl-devel expat-devel -y\ncd /data/tmp\ntar zxvf git-2.18.0.tar.gz\ncd git-2.18.0\n./configure --prefix=/data/service/git\nmake && make install\nvim /etc/profile\nexport GIT_HOME=/data/service/git\nexport PATH=$PATH:$GIT_HOME/bin\nsource /etc/profile\n\n### git公钥，和下载项目\n\ngit密匙\nssh-keygen -t rsa -C \"15172537049@163.com\"\ncat ~/.ssh/id_rsa.pub\n//粘到公匙\nssh -T git@gitee.com\ncd /data/gitee\ngit clone git@gitee.com:y_project/RuoYi.git\n\n### docker安装\n\ndocker安装\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager \\\n    --add-repo \\\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nyum install -y https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm\nyum install docker-ce docker-ce-cli -y\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://plb9xzjh.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n### mysql安装\n\ndocker pull mysql:5.7.30\nmkdir -p /root/mysql/data /root/mysql/logs /root/mysql/conf\ntouch /root/mysql/conf/my.cnf\n//密码是admin，-v则是挂载 –name容器名字，作为后面的启动删除名字\ndocker run -p 3306:3306 --rm --name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7.30\ndocker start mysql\n//进入容器\ndocker exec -it mysql /bin/bash\n#登录docker容器（方式参考上方文档）后登录mysql\nmysql -uroot -padmin\n#修改登录者的权限\nGRANT ALL ON *.* TO 'root'@'%';\n#刷新命令生效\n flush privileges;\n\n### 修改项目配置\n\ncd /data/gitee/RuoYi/ruoyi-admin/src/main/resources/\n#修改application.yml的项目启动端口号与文件上传路径\nvim application.yml\n#修改application-druid.yml的数据源\nvim application-druid.yml\n\n### 打包启动\n\ncd /data/gitee/RuoYi/\nmvn install\nmkdir -p /data/app/ruoyi-admin\ncp /data/gitee/RuoYi/ruoyi-admin/target/ruoyi-admin.jar /data/app/ruoyi-admin/ruoyi-admin.jar\ncd /data/app/ruoyi-admin/\n#后台启动项目\nnohup java -jar ruoyi-admin.jar &\n#查看项目运行日志\ntail -f nohup.out\n\n### 开放端口\n\n重启防火墙\nfirewall-cmd --permanent --add-port=80/tcp\nfirewall-cmd --reload\n\n\n\n### ","source":"_posts/部署ruoyi前后端不分离版.md","raw":"# 部署ruoyi前后端不分离版\n\n### 项目目录\n\n![](images/2022-08-18.png)\n\n#tmp存放临时安装包\nmkdir -p /data/tmp\n#service存放软件环境\nmkdir -p /data/service\n#gitee存放代码版本控制库\nmkdir -p /data/gitee\n\n### 安装java\n\njava\ncd /data/tmp\ntar -zxvf jdk-8u212-linux-x64.tar.gz\nmv jdk1.8.0_212 /data/service\ncd /data/service\nll\nvim /etc/profile\nexport JAVA_HOME=/data/service/jdk1.8.0_212\nexport PATH=$PATH:$JAVA_HOME/bin\nsource /etc/profile\n\n### 安装maven\n\ncd /data/tmp\ntar -zxvf apache-maven-3.8.5-bin.tar.gz\nmv apache-maven-3.8.5 /data/service\ncd /data/service\nll\nvim /etc/profile\nexport MAVEN_HOME=/data/service/apache-maven-3.8.5\nexport PATH=$PATH:$MAVEN_HOME/bin\nsource /etc/profile\nvim /data/service/apache-maven-3.8.5/conf/setting.xml\n#配置本地仓库\n<localRepository>/data/service/apache-maven-3.8.5/repository</localRepository>\n#配置阿里云镜像\n<mirror>\n  <id>aliyunmaven</id>\n  <mirrorOf>*</mirrorOf>\n  <name>阿里云公共仓库</name>\n  <url>https://maven.aliyun.com/repository/public</url>\n</mirror>\n\n\n\n### 安装git\n\nyum -y groupinstall \"Development Tools\"\nyum install wget unzip gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel libcurl-devel expat-devel -y\ncd /data/tmp\ntar zxvf git-2.18.0.tar.gz\ncd git-2.18.0\n./configure --prefix=/data/service/git\nmake && make install\nvim /etc/profile\nexport GIT_HOME=/data/service/git\nexport PATH=$PATH:$GIT_HOME/bin\nsource /etc/profile\n\n### git公钥，和下载项目\n\ngit密匙\nssh-keygen -t rsa -C \"15172537049@163.com\"\ncat ~/.ssh/id_rsa.pub\n//粘到公匙\nssh -T git@gitee.com\ncd /data/gitee\ngit clone git@gitee.com:y_project/RuoYi.git\n\n### docker安装\n\ndocker安装\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager \\\n    --add-repo \\\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nyum install -y https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm\nyum install docker-ce docker-ce-cli -y\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://plb9xzjh.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n### mysql安装\n\ndocker pull mysql:5.7.30\nmkdir -p /root/mysql/data /root/mysql/logs /root/mysql/conf\ntouch /root/mysql/conf/my.cnf\n//密码是admin，-v则是挂载 –name容器名字，作为后面的启动删除名字\ndocker run -p 3306:3306 --rm --name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7.30\ndocker start mysql\n//进入容器\ndocker exec -it mysql /bin/bash\n#登录docker容器（方式参考上方文档）后登录mysql\nmysql -uroot -padmin\n#修改登录者的权限\nGRANT ALL ON *.* TO 'root'@'%';\n#刷新命令生效\n flush privileges;\n\n### 修改项目配置\n\ncd /data/gitee/RuoYi/ruoyi-admin/src/main/resources/\n#修改application.yml的项目启动端口号与文件上传路径\nvim application.yml\n#修改application-druid.yml的数据源\nvim application-druid.yml\n\n### 打包启动\n\ncd /data/gitee/RuoYi/\nmvn install\nmkdir -p /data/app/ruoyi-admin\ncp /data/gitee/RuoYi/ruoyi-admin/target/ruoyi-admin.jar /data/app/ruoyi-admin/ruoyi-admin.jar\ncd /data/app/ruoyi-admin/\n#后台启动项目\nnohup java -jar ruoyi-admin.jar &\n#查看项目运行日志\ntail -f nohup.out\n\n### 开放端口\n\n重启防火墙\nfirewall-cmd --permanent --add-port=80/tcp\nfirewall-cmd --reload\n\n\n\n### ","slug":"部署ruoyi前后端不分离版","published":1,"date":"2022-08-18T08:51:40.113Z","updated":"2022-08-18T09:29:05.448Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vd6000e1kua19v9adrm","content":"<h1 id=\"部署ruoyi前后端不分离版\"><a href=\"#部署ruoyi前后端不分离版\" class=\"headerlink\" title=\"部署ruoyi前后端不分离版\"></a>部署ruoyi前后端不分离版</h1><h3 id=\"项目目录\"><a href=\"#项目目录\" class=\"headerlink\" title=\"项目目录\"></a>项目目录</h3><p><img src=\"images/2022-08-18.png\"></p>\n<p>#tmp存放临时安装包<br>mkdir -p /data/tmp<br>#service存放软件环境<br>mkdir -p /data/service<br>#gitee存放代码版本控制库<br>mkdir -p /data/gitee</p>\n<h3 id=\"安装java\"><a href=\"#安装java\" class=\"headerlink\" title=\"安装java\"></a>安装java</h3><p>java<br>cd /data/tmp<br>tar -zxvf jdk-8u212-linux-x64.tar.gz<br>mv jdk1.8.0_212 /data/service<br>cd /data/service<br>ll<br>vim /etc/profile<br>export JAVA_HOME=/data/service/jdk1.8.0_212<br>export PATH=$PATH:$JAVA_HOME/bin<br>source /etc/profile</p>\n<h3 id=\"安装maven\"><a href=\"#安装maven\" class=\"headerlink\" title=\"安装maven\"></a>安装maven</h3><p>cd /data/tmp<br>tar -zxvf apache-maven-3.8.5-bin.tar.gz<br>mv apache-maven-3.8.5 /data/service<br>cd /data/service<br>ll<br>vim /etc/profile<br>export MAVEN_HOME=/data/service/apache-maven-3.8.5<br>export PATH=$PATH:$MAVEN_HOME/bin<br>source /etc/profile<br>vim /data/service/apache-maven-3.8.5/conf/setting.xml<br>#配置本地仓库<br><localRepository>/data/service/apache-maven-3.8.5/repository</localRepository><br>#配置阿里云镜像<br><mirror><br>  <id>aliyunmaven</id><br>  <mirrorOf>*</mirrorOf><br>  <name>阿里云公共仓库</name><br>  <url><a href=\"https://maven.aliyun.com/repository/public\">https://maven.aliyun.com/repository/public</a></url><br></mirror></p>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>yum -y groupinstall “Development Tools”<br>yum install wget unzip gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel libcurl-devel expat-devel -y<br>cd /data/tmp<br>tar zxvf git-2.18.0.tar.gz<br>cd git-2.18.0<br>./configure –prefix=/data/service/git<br>make &amp;&amp; make install<br>vim /etc/profile<br>export GIT_HOME=/data/service/git<br>export PATH=$PATH:$GIT_HOME/bin<br>source /etc/profile</p>\n<h3 id=\"git公钥，和下载项目\"><a href=\"#git公钥，和下载项目\" class=\"headerlink\" title=\"git公钥，和下载项目\"></a>git公钥，和下载项目</h3><p>git密匙<br>ssh-keygen -t rsa -C “<a href=\"mailto:&#x31;&#x35;&#49;&#x37;&#x32;&#x35;&#x33;&#55;&#x30;&#52;&#x39;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#111;&#x6d;\">&#x31;&#x35;&#49;&#x37;&#x32;&#x35;&#x33;&#55;&#x30;&#52;&#x39;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#111;&#x6d;</a>“<br>cat ~/.ssh/id_rsa.pub<br>//粘到公匙<br>ssh -T <a href=\"mailto:&#103;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#101;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#103;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#101;&#x65;&#46;&#x63;&#x6f;&#x6d;</a><br>cd /data/gitee<br>git clone <a href=\"mailto:&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#x65;&#x65;&#46;&#99;&#x6f;&#109;\">&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#x65;&#x65;&#46;&#99;&#x6f;&#109;</a>:y_project/RuoYi.git</p>\n<h3 id=\"docker安装\"><a href=\"#docker安装\" class=\"headerlink\" title=\"docker安装\"></a>docker安装</h3><p>docker安装<br>sudo yum remove docker <br>                  docker-client <br>                  docker-client-latest <br>                  docker-common <br>                  docker-latest <br>                  docker-latest-logrotate <br>                  docker-logrotate <br>                  docker-engine<br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br>sudo yum-config-manager <br>    –add-repo <br>    <a href=\"http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a><br>yum install -y <a href=\"https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm\">https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm</a><br>yum install docker-ce docker-ce-cli -y<br>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-‘EOF’<br>{<br>  “registry-mirrors”: [“<a href=\"https://plb9xzjh.mirror.aliyuncs.com&quot;]\">https://plb9xzjh.mirror.aliyuncs.com&quot;]</a><br>}<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker</p>\n<h3 id=\"mysql安装\"><a href=\"#mysql安装\" class=\"headerlink\" title=\"mysql安装\"></a>mysql安装</h3><p>docker pull mysql:5.7.30<br>mkdir -p /root/mysql/data /root/mysql/logs /root/mysql/conf<br>touch /root/mysql/conf/my.cnf<br>//密码是admin，-v则是挂载 –name容器名字，作为后面的启动删除名字<br>docker run -p 3306:3306 –rm –name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7.30<br>docker start mysql<br>//进入容器<br>docker exec -it mysql /bin/bash<br>#登录docker容器（方式参考上方文档）后登录mysql<br>mysql -uroot -padmin<br>#修改登录者的权限<br>GRANT ALL ON <em>.</em> TO ‘root‘@’%’;<br>#刷新命令生效<br> flush privileges;</p>\n<h3 id=\"修改项目配置\"><a href=\"#修改项目配置\" class=\"headerlink\" title=\"修改项目配置\"></a>修改项目配置</h3><p>cd /data/gitee/RuoYi/ruoyi-admin/src/main/resources/<br>#修改application.yml的项目启动端口号与文件上传路径<br>vim application.yml<br>#修改application-druid.yml的数据源<br>vim application-druid.yml</p>\n<h3 id=\"打包启动\"><a href=\"#打包启动\" class=\"headerlink\" title=\"打包启动\"></a>打包启动</h3><p>cd /data/gitee/RuoYi/<br>mvn install<br>mkdir -p /data/app/ruoyi-admin<br>cp /data/gitee/RuoYi/ruoyi-admin/target/ruoyi-admin.jar /data/app/ruoyi-admin/ruoyi-admin.jar<br>cd /data/app/ruoyi-admin/<br>#后台启动项目<br>nohup java -jar ruoyi-admin.jar &amp;<br>#查看项目运行日志<br>tail -f nohup.out</p>\n<h3 id=\"开放端口\"><a href=\"#开放端口\" class=\"headerlink\" title=\"开放端口\"></a>开放端口</h3><p>重启防火墙<br>firewall-cmd –permanent –add-port=80/tcp<br>firewall-cmd –reload</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"部署ruoyi前后端不分离版\"><a href=\"#部署ruoyi前后端不分离版\" class=\"headerlink\" title=\"部署ruoyi前后端不分离版\"></a>部署ruoyi前后端不分离版</h1><h3 id=\"项目目录\"><a href=\"#项目目录\" class=\"headerlink\" title=\"项目目录\"></a>项目目录</h3><p><img src=\"images/2022-08-18.png\"></p>\n<p>#tmp存放临时安装包<br>mkdir -p /data/tmp<br>#service存放软件环境<br>mkdir -p /data/service<br>#gitee存放代码版本控制库<br>mkdir -p /data/gitee</p>\n<h3 id=\"安装java\"><a href=\"#安装java\" class=\"headerlink\" title=\"安装java\"></a>安装java</h3><p>java<br>cd /data/tmp<br>tar -zxvf jdk-8u212-linux-x64.tar.gz<br>mv jdk1.8.0_212 /data/service<br>cd /data/service<br>ll<br>vim /etc/profile<br>export JAVA_HOME=/data/service/jdk1.8.0_212<br>export PATH=$PATH:$JAVA_HOME/bin<br>source /etc/profile</p>\n<h3 id=\"安装maven\"><a href=\"#安装maven\" class=\"headerlink\" title=\"安装maven\"></a>安装maven</h3><p>cd /data/tmp<br>tar -zxvf apache-maven-3.8.5-bin.tar.gz<br>mv apache-maven-3.8.5 /data/service<br>cd /data/service<br>ll<br>vim /etc/profile<br>export MAVEN_HOME=/data/service/apache-maven-3.8.5<br>export PATH=$PATH:$MAVEN_HOME/bin<br>source /etc/profile<br>vim /data/service/apache-maven-3.8.5/conf/setting.xml<br>#配置本地仓库<br><localRepository>/data/service/apache-maven-3.8.5/repository</localRepository><br>#配置阿里云镜像<br><mirror><br>  <id>aliyunmaven</id><br>  <mirrorOf>*</mirrorOf><br>  <name>阿里云公共仓库</name><br>  <url><a href=\"https://maven.aliyun.com/repository/public\">https://maven.aliyun.com/repository/public</a></url><br></mirror></p>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>yum -y groupinstall “Development Tools”<br>yum install wget unzip gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel libcurl-devel expat-devel -y<br>cd /data/tmp<br>tar zxvf git-2.18.0.tar.gz<br>cd git-2.18.0<br>./configure –prefix=/data/service/git<br>make &amp;&amp; make install<br>vim /etc/profile<br>export GIT_HOME=/data/service/git<br>export PATH=$PATH:$GIT_HOME/bin<br>source /etc/profile</p>\n<h3 id=\"git公钥，和下载项目\"><a href=\"#git公钥，和下载项目\" class=\"headerlink\" title=\"git公钥，和下载项目\"></a>git公钥，和下载项目</h3><p>git密匙<br>ssh-keygen -t rsa -C “<a href=\"mailto:&#x31;&#x35;&#49;&#x37;&#x32;&#x35;&#x33;&#55;&#x30;&#52;&#x39;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#111;&#x6d;\">&#x31;&#x35;&#49;&#x37;&#x32;&#x35;&#x33;&#55;&#x30;&#52;&#x39;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#111;&#x6d;</a>“<br>cat ~/.ssh/id_rsa.pub<br>//粘到公匙<br>ssh -T <a href=\"mailto:&#103;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#101;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#103;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#101;&#x65;&#46;&#x63;&#x6f;&#x6d;</a><br>cd /data/gitee<br>git clone <a href=\"mailto:&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#x65;&#x65;&#46;&#99;&#x6f;&#109;\">&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#x65;&#x65;&#46;&#99;&#x6f;&#109;</a>:y_project/RuoYi.git</p>\n<h3 id=\"docker安装\"><a href=\"#docker安装\" class=\"headerlink\" title=\"docker安装\"></a>docker安装</h3><p>docker安装<br>sudo yum remove docker <br>                  docker-client <br>                  docker-client-latest <br>                  docker-common <br>                  docker-latest <br>                  docker-latest-logrotate <br>                  docker-logrotate <br>                  docker-engine<br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br>sudo yum-config-manager <br>    –add-repo <br>    <a href=\"http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a><br>yum install -y <a href=\"https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm\">https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm</a><br>yum install docker-ce docker-ce-cli -y<br>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-‘EOF’<br>{<br>  “registry-mirrors”: [“<a href=\"https://plb9xzjh.mirror.aliyuncs.com&quot;]\">https://plb9xzjh.mirror.aliyuncs.com&quot;]</a><br>}<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker</p>\n<h3 id=\"mysql安装\"><a href=\"#mysql安装\" class=\"headerlink\" title=\"mysql安装\"></a>mysql安装</h3><p>docker pull mysql:5.7.30<br>mkdir -p /root/mysql/data /root/mysql/logs /root/mysql/conf<br>touch /root/mysql/conf/my.cnf<br>//密码是admin，-v则是挂载 –name容器名字，作为后面的启动删除名字<br>docker run -p 3306:3306 –rm –name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7.30<br>docker start mysql<br>//进入容器<br>docker exec -it mysql /bin/bash<br>#登录docker容器（方式参考上方文档）后登录mysql<br>mysql -uroot -padmin<br>#修改登录者的权限<br>GRANT ALL ON <em>.</em> TO ‘root‘@’%’;<br>#刷新命令生效<br> flush privileges;</p>\n<h3 id=\"修改项目配置\"><a href=\"#修改项目配置\" class=\"headerlink\" title=\"修改项目配置\"></a>修改项目配置</h3><p>cd /data/gitee/RuoYi/ruoyi-admin/src/main/resources/<br>#修改application.yml的项目启动端口号与文件上传路径<br>vim application.yml<br>#修改application-druid.yml的数据源<br>vim application-druid.yml</p>\n<h3 id=\"打包启动\"><a href=\"#打包启动\" class=\"headerlink\" title=\"打包启动\"></a>打包启动</h3><p>cd /data/gitee/RuoYi/<br>mvn install<br>mkdir -p /data/app/ruoyi-admin<br>cp /data/gitee/RuoYi/ruoyi-admin/target/ruoyi-admin.jar /data/app/ruoyi-admin/ruoyi-admin.jar<br>cd /data/app/ruoyi-admin/<br>#后台启动项目<br>nohup java -jar ruoyi-admin.jar &amp;<br>#查看项目运行日志<br>tail -f nohup.out</p>\n<h3 id=\"开放端口\"><a href=\"#开放端口\" class=\"headerlink\" title=\"开放端口\"></a>开放端口</h3><p>重启防火墙<br>firewall-cmd –permanent –add-port=80/tcp<br>firewall-cmd –reload</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>"},{"_content":"# 部署ruoyi前后端分离版\n\n### 此步骤在不分离版后延续\n\n### redis启动\n\ndocker pull redis:latest\ndocker run -d --rm -v /root/redis/data:/data --name redis -p 6379:6379 redis  redis-server  --appendonly yes\n\n### nodejs\n\ncd /data/tmp\ntar -zxvf node-v14.15.5-linux-x64.tar.gz\nmv node-v14.15.5-linux-x64 /data/service\ncd /data/service\nll\n配置环境变量\nvim /etc/profile\nexport NODEJS_HOME=/data/service/node-v14.15.5-linux-x64\nexport PATH=$PATH:$NODEJS_HOME/bin\nsource /etc/profile\n\n### nginx\n\ncd /data/tmp\ntar zxvf nginx-1.18.0.tar.gz\ncd nginx-1.18.0\n./configure --prefix=/data/service/ngnix\nmake && make install\n/data/service/ngnix/sbin/nginx\n\n### git拉代码并修改配置文件，打包\n\ncd /data/gitee\ngit clone git@gitee.com:y_project/RuoYi-Vue.git\ncd /data/gitee/RuoYi-Vue/ruoyi-admin/src/main/resources/\n#修改application.yml的项目启动端口号与文件上传路径\nvim application.yml\n#修改application-druid.yml的数据源\nvim application-druid.yml\ncd /data/gitee/RuoYi-Vue/\nmvn clean install -pl com.ruoyi:ruoyi-admin -am\nmkdir -p /data/app/ruoyi-vue\ncp /data/gitee/RuoYi-Vue/ruoyi-admin/target/ruoyi-admin.jar /data/app/ruoyi-vue/ruoyi-admin.jar\ncd /data/app/ruoyi-vue/\n#后台启动项目\nnohup java -jar ruoyi-admin.jar &\n#查看项目运行日志\ntail -f nohup.out\n\n### 启动前端项目\n\n1、下载依赖并打包\ncd /data/gitee/RuoYi-Vue/ruoyi-ui\nnpm install --registry=https://registry.npmmirror.com\nnpm install\nmkdir /data/app/ruoyi-ui\nmv dist/* /data/app/ruoyi-ui/\n\n### 配置nginx\n\n此处/代表根目录 root配置的dist的明确地址\n\n/prod-api/配置的是转发路径，及前端请求都转发到 localhost:18081地址\n\n​    location / {\n​            root   /data/app/ruoyi-ui/dist;  此处为前端dist路径\n​            index  index.html index.htm;\n​        }\n​\tlocation /prod-api/ {\n  proxy_set_header Host $http_host;\n  proxy_set_header X-Real-IP $remote_addr;\n  proxy_set_header REMOTE-HOST $remote_addr;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_pass http://localhost:18081/; 此处为后端项目路径\n}\n重启nginx\n/data/service/ngnix/sbin/nginx -s reload\n访问 192.168.2..6:80","source":"_posts/部署ruoyi前后端分离版.md","raw":"# 部署ruoyi前后端分离版\n\n### 此步骤在不分离版后延续\n\n### redis启动\n\ndocker pull redis:latest\ndocker run -d --rm -v /root/redis/data:/data --name redis -p 6379:6379 redis  redis-server  --appendonly yes\n\n### nodejs\n\ncd /data/tmp\ntar -zxvf node-v14.15.5-linux-x64.tar.gz\nmv node-v14.15.5-linux-x64 /data/service\ncd /data/service\nll\n配置环境变量\nvim /etc/profile\nexport NODEJS_HOME=/data/service/node-v14.15.5-linux-x64\nexport PATH=$PATH:$NODEJS_HOME/bin\nsource /etc/profile\n\n### nginx\n\ncd /data/tmp\ntar zxvf nginx-1.18.0.tar.gz\ncd nginx-1.18.0\n./configure --prefix=/data/service/ngnix\nmake && make install\n/data/service/ngnix/sbin/nginx\n\n### git拉代码并修改配置文件，打包\n\ncd /data/gitee\ngit clone git@gitee.com:y_project/RuoYi-Vue.git\ncd /data/gitee/RuoYi-Vue/ruoyi-admin/src/main/resources/\n#修改application.yml的项目启动端口号与文件上传路径\nvim application.yml\n#修改application-druid.yml的数据源\nvim application-druid.yml\ncd /data/gitee/RuoYi-Vue/\nmvn clean install -pl com.ruoyi:ruoyi-admin -am\nmkdir -p /data/app/ruoyi-vue\ncp /data/gitee/RuoYi-Vue/ruoyi-admin/target/ruoyi-admin.jar /data/app/ruoyi-vue/ruoyi-admin.jar\ncd /data/app/ruoyi-vue/\n#后台启动项目\nnohup java -jar ruoyi-admin.jar &\n#查看项目运行日志\ntail -f nohup.out\n\n### 启动前端项目\n\n1、下载依赖并打包\ncd /data/gitee/RuoYi-Vue/ruoyi-ui\nnpm install --registry=https://registry.npmmirror.com\nnpm install\nmkdir /data/app/ruoyi-ui\nmv dist/* /data/app/ruoyi-ui/\n\n### 配置nginx\n\n此处/代表根目录 root配置的dist的明确地址\n\n/prod-api/配置的是转发路径，及前端请求都转发到 localhost:18081地址\n\n​    location / {\n​            root   /data/app/ruoyi-ui/dist;  此处为前端dist路径\n​            index  index.html index.htm;\n​        }\n​\tlocation /prod-api/ {\n  proxy_set_header Host $http_host;\n  proxy_set_header X-Real-IP $remote_addr;\n  proxy_set_header REMOTE-HOST $remote_addr;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_pass http://localhost:18081/; 此处为后端项目路径\n}\n重启nginx\n/data/service/ngnix/sbin/nginx -s reload\n访问 192.168.2..6:80","slug":"部署ruoyi前后端分离版","published":1,"date":"2022-08-18T09:29:31.771Z","updated":"2022-08-18T09:43:00.936Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clgme6vd6000f1kuaawm6bkhn","content":"<h1 id=\"部署ruoyi前后端分离版\"><a href=\"#部署ruoyi前后端分离版\" class=\"headerlink\" title=\"部署ruoyi前后端分离版\"></a>部署ruoyi前后端分离版</h1><h3 id=\"此步骤在不分离版后延续\"><a href=\"#此步骤在不分离版后延续\" class=\"headerlink\" title=\"此步骤在不分离版后延续\"></a>此步骤在不分离版后延续</h3><h3 id=\"redis启动\"><a href=\"#redis启动\" class=\"headerlink\" title=\"redis启动\"></a>redis启动</h3><p>docker pull redis:latest<br>docker run -d –rm -v /root/redis/data:/data –name redis -p 6379:6379 redis  redis-server  –appendonly yes</p>\n<h3 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h3><p>cd /data/tmp<br>tar -zxvf node-v14.15.5-linux-x64.tar.gz<br>mv node-v14.15.5-linux-x64 /data/service<br>cd /data/service<br>ll<br>配置环境变量<br>vim /etc/profile<br>export NODEJS_HOME=/data/service/node-v14.15.5-linux-x64<br>export PATH=$PATH:$NODEJS_HOME/bin<br>source /etc/profile</p>\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><p>cd /data/tmp<br>tar zxvf nginx-1.18.0.tar.gz<br>cd nginx-1.18.0<br>./configure –prefix=/data/service/ngnix<br>make &amp;&amp; make install<br>/data/service/ngnix/sbin/nginx</p>\n<h3 id=\"git拉代码并修改配置文件，打包\"><a href=\"#git拉代码并修改配置文件，打包\" class=\"headerlink\" title=\"git拉代码并修改配置文件，打包\"></a>git拉代码并修改配置文件，打包</h3><p>cd /data/gitee<br>git clone <a href=\"mailto:&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#101;&#x65;&#46;&#x63;&#111;&#x6d;\">&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#101;&#x65;&#46;&#x63;&#111;&#x6d;</a>:y_project/RuoYi-Vue.git<br>cd /data/gitee/RuoYi-Vue/ruoyi-admin/src/main/resources/<br>#修改application.yml的项目启动端口号与文件上传路径<br>vim application.yml<br>#修改application-druid.yml的数据源<br>vim application-druid.yml<br>cd /data/gitee/RuoYi-Vue/<br>mvn clean install -pl com.ruoyi:ruoyi-admin -am<br>mkdir -p /data/app/ruoyi-vue<br>cp /data/gitee/RuoYi-Vue/ruoyi-admin/target/ruoyi-admin.jar /data/app/ruoyi-vue/ruoyi-admin.jar<br>cd /data/app/ruoyi-vue/<br>#后台启动项目<br>nohup java -jar ruoyi-admin.jar &amp;<br>#查看项目运行日志<br>tail -f nohup.out</p>\n<h3 id=\"启动前端项目\"><a href=\"#启动前端项目\" class=\"headerlink\" title=\"启动前端项目\"></a>启动前端项目</h3><p>1、下载依赖并打包<br>cd /data/gitee/RuoYi-Vue/ruoyi-ui<br>npm install –registry=<a href=\"https://registry.npmmirror.com/\">https://registry.npmmirror.com</a><br>npm install<br>mkdir /data/app/ruoyi-ui<br>mv dist/* /data/app/ruoyi-ui/</p>\n<h3 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h3><p>此处/代表根目录 root配置的dist的明确地址</p>\n<p>/prod-api/配置的是转发路径，及前端请求都转发到 localhost:18081地址</p>\n<p>​    location / {<br>​            root   /data/app/ruoyi-ui/dist;  此处为前端dist路径<br>​            index  index.html index.htm;<br>​        }<br>​    location /prod-api/ {<br>  proxy_set_header Host $http_host;<br>  proxy_set_header X-Real-IP $remote_addr;<br>  proxy_set_header REMOTE-HOST $remote_addr;<br>  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>  proxy_pass <a href=\"http://localhost:18081/\">http://localhost:18081/</a>; 此处为后端项目路径<br>}<br>重启nginx<br>/data/service/ngnix/sbin/nginx -s reload<br>访问 192.168.2..6:80</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"部署ruoyi前后端分离版\"><a href=\"#部署ruoyi前后端分离版\" class=\"headerlink\" title=\"部署ruoyi前后端分离版\"></a>部署ruoyi前后端分离版</h1><h3 id=\"此步骤在不分离版后延续\"><a href=\"#此步骤在不分离版后延续\" class=\"headerlink\" title=\"此步骤在不分离版后延续\"></a>此步骤在不分离版后延续</h3><h3 id=\"redis启动\"><a href=\"#redis启动\" class=\"headerlink\" title=\"redis启动\"></a>redis启动</h3><p>docker pull redis:latest<br>docker run -d –rm -v /root/redis/data:/data –name redis -p 6379:6379 redis  redis-server  –appendonly yes</p>\n<h3 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h3><p>cd /data/tmp<br>tar -zxvf node-v14.15.5-linux-x64.tar.gz<br>mv node-v14.15.5-linux-x64 /data/service<br>cd /data/service<br>ll<br>配置环境变量<br>vim /etc/profile<br>export NODEJS_HOME=/data/service/node-v14.15.5-linux-x64<br>export PATH=$PATH:$NODEJS_HOME/bin<br>source /etc/profile</p>\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><p>cd /data/tmp<br>tar zxvf nginx-1.18.0.tar.gz<br>cd nginx-1.18.0<br>./configure –prefix=/data/service/ngnix<br>make &amp;&amp; make install<br>/data/service/ngnix/sbin/nginx</p>\n<h3 id=\"git拉代码并修改配置文件，打包\"><a href=\"#git拉代码并修改配置文件，打包\" class=\"headerlink\" title=\"git拉代码并修改配置文件，打包\"></a>git拉代码并修改配置文件，打包</h3><p>cd /data/gitee<br>git clone <a href=\"mailto:&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#101;&#x65;&#46;&#x63;&#111;&#x6d;\">&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#101;&#x65;&#46;&#x63;&#111;&#x6d;</a>:y_project/RuoYi-Vue.git<br>cd /data/gitee/RuoYi-Vue/ruoyi-admin/src/main/resources/<br>#修改application.yml的项目启动端口号与文件上传路径<br>vim application.yml<br>#修改application-druid.yml的数据源<br>vim application-druid.yml<br>cd /data/gitee/RuoYi-Vue/<br>mvn clean install -pl com.ruoyi:ruoyi-admin -am<br>mkdir -p /data/app/ruoyi-vue<br>cp /data/gitee/RuoYi-Vue/ruoyi-admin/target/ruoyi-admin.jar /data/app/ruoyi-vue/ruoyi-admin.jar<br>cd /data/app/ruoyi-vue/<br>#后台启动项目<br>nohup java -jar ruoyi-admin.jar &amp;<br>#查看项目运行日志<br>tail -f nohup.out</p>\n<h3 id=\"启动前端项目\"><a href=\"#启动前端项目\" class=\"headerlink\" title=\"启动前端项目\"></a>启动前端项目</h3><p>1、下载依赖并打包<br>cd /data/gitee/RuoYi-Vue/ruoyi-ui<br>npm install –registry=<a href=\"https://registry.npmmirror.com/\">https://registry.npmmirror.com</a><br>npm install<br>mkdir /data/app/ruoyi-ui<br>mv dist/* /data/app/ruoyi-ui/</p>\n<h3 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h3><p>此处/代表根目录 root配置的dist的明确地址</p>\n<p>/prod-api/配置的是转发路径，及前端请求都转发到 localhost:18081地址</p>\n<p>​    location / {<br>​            root   /data/app/ruoyi-ui/dist;  此处为前端dist路径<br>​            index  index.html index.htm;<br>​        }<br>​    location /prod-api/ {<br>  proxy_set_header Host $http_host;<br>  proxy_set_header X-Real-IP $remote_addr;<br>  proxy_set_header REMOTE-HOST $remote_addr;<br>  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>  proxy_pass <a href=\"http://localhost:18081/\">http://localhost:18081/</a>; 此处为后端项目路径<br>}<br>重启nginx<br>/data/service/ngnix/sbin/nginx -s reload<br>访问 192.168.2..6:80</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}